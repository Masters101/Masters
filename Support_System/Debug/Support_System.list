
Support_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a8  080063a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080063a8  080063a8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063a8  080063a8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080063b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000007c  0800642c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800642c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132d9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273e  00000000  00000000  00033385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00035ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00036ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218c5  00000000  00000000  000379d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fb1  00000000  00000000  00059295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4e06  00000000  00000000  0006c246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013104c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d8c  00000000  00000000  001310a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f40 	.word	0x08005f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005f40 	.word	0x08005f40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <Set_Motor_Parameters>:

#include "Motor_Control.h"
#include "math.h"

void Set_Motor_Parameters(uint8_t DIR) // SET MOTOR PARAMETERS --> NEED TO ADD PWM
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	if (DIR == FORWARD)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d116      	bne.n	800091a <Set_Motor_Parameters+0x3e>
	{
		// Left Motor
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1); // dir1_L = PC9
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <Set_Motor_Parameters+0x78>)
 80008f4:	f001 fdb2 	bl	800245c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0); // dir2_L = PC8
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <Set_Motor_Parameters+0x78>)
 8000900:	f001 fdac 	bl	800245c <HAL_GPIO_WritePin>

		// Right Motor
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0); // dir1_R = PC7
 8000904:	2200      	movs	r2, #0
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <Set_Motor_Parameters+0x78>)
 800090a:	f001 fda7 	bl	800245c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1); // dir2_R = PC6
 800090e:	2201      	movs	r2, #1
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <Set_Motor_Parameters+0x78>)
 8000914:	f001 fda2 	bl	800245c <HAL_GPIO_WritePin>

		// Right Motor
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1); // dir1_R = PC7
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0); // dir2_R = PC6
	}
}
 8000918:	e018      	b.n	800094c <Set_Motor_Parameters+0x70>
	else if(DIR == BACKWARD)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d115      	bne.n	800094c <Set_Motor_Parameters+0x70>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0); // dir1_L = PC9
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <Set_Motor_Parameters+0x78>)
 8000928:	f001 fd98 	bl	800245c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1); // dir2_L = PC8
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <Set_Motor_Parameters+0x78>)
 8000934:	f001 fd92 	bl	800245c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1); // dir1_R = PC7
 8000938:	2201      	movs	r2, #1
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <Set_Motor_Parameters+0x78>)
 800093e:	f001 fd8d 	bl	800245c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0); // dir2_R = PC6
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <Set_Motor_Parameters+0x78>)
 8000948:	f001 fd88 	bl	800245c <HAL_GPIO_WritePin>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	48000800 	.word	0x48000800

08000958 <Read_Encoder_Values>:

float Read_Encoder_Values(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
	float current_pos_left;
	uint32_t myEnc_Right;
	float current_pos_right;

	// TOP ENCODER
	myEnc_top = ((TIM1 -> CNT) >> 2); // Shifted right by 2 to show 1 tick for each actual encoder tick
 800095e:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <Read_Encoder_Values+0xd8>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	617b      	str	r3, [r7, #20]
	current_pos_top = (float)myEnc_top*((2*M_PI)/PPR)*count;
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000970:	ee17 0a90 	vmov	r0, s15
 8000974:	f7ff ff0a 	bl	800078c <__aeabi_f2d>
 8000978:	a329      	add	r3, pc, #164	; (adr r3, 8000a20 <Read_Encoder_Values+0xc8>)
 800097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097e:	f7ff fc77 	bl	8000270 <__aeabi_dmul>
 8000982:	4602      	mov	r2, r0
 8000984:	460b      	mov	r3, r1
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	a327      	add	r3, pc, #156	; (adr r3, 8000a28 <Read_Encoder_Values+0xd0>)
 800098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000990:	f7ff fc6e 	bl	8000270 <__aeabi_dmul>
 8000994:	4602      	mov	r2, r0
 8000996:	460b      	mov	r3, r1
 8000998:	4610      	mov	r0, r2
 800099a:	4619      	mov	r1, r3
 800099c:	f7ff ff4e 	bl	800083c <__aeabi_d2f>
 80009a0:	4603      	mov	r3, r0
 80009a2:	613b      	str	r3, [r7, #16]
	// LEFT MOTOR ENCODER
	myEnc_Left = ((TIM2 -> CNT) >> 2); // Shift right by 2 to show 1 tick for each actual encoder tick
 80009a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	60fb      	str	r3, [r7, #12]
	current_pos_left = (float)myEnc_Left*((2*M_PI)/PPR); // needs to be multiplied by a count
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	ee07 3a90 	vmov	s15, r3
 80009b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b8:	ee17 0a90 	vmov	r0, s15
 80009bc:	f7ff fee6 	bl	800078c <__aeabi_f2d>
 80009c0:	a317      	add	r3, pc, #92	; (adr r3, 8000a20 <Read_Encoder_Values+0xc8>)
 80009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c6:	f7ff fc53 	bl	8000270 <__aeabi_dmul>
 80009ca:	4602      	mov	r2, r0
 80009cc:	460b      	mov	r3, r1
 80009ce:	4610      	mov	r0, r2
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff ff33 	bl	800083c <__aeabi_d2f>
 80009d6:	4603      	mov	r3, r0
 80009d8:	60bb      	str	r3, [r7, #8]
	// RIGHT MOTOR ENCODER
	myEnc_Right = ((TIM3 -> CNT) >> 2);
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <Read_Encoder_Values+0xdc>)
 80009dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	607b      	str	r3, [r7, #4]
	current_pos_right = (float)myEnc_Right*((2*M_PI)/PPR); // needs to be multiplied by a count, will be the same as left motor
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ec:	ee17 0a90 	vmov	r0, s15
 80009f0:	f7ff fecc 	bl	800078c <__aeabi_f2d>
 80009f4:	a30a      	add	r3, pc, #40	; (adr r3, 8000a20 <Read_Encoder_Values+0xc8>)
 80009f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fa:	f7ff fc39 	bl	8000270 <__aeabi_dmul>
 80009fe:	4602      	mov	r2, r0
 8000a00:	460b      	mov	r3, r1
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	f7ff ff19 	bl	800083c <__aeabi_d2f>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	603b      	str	r3, [r7, #0]

	return (float)current_pos_top, (float)current_pos_left, (float)current_pos_right;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	ee07 3a90 	vmov	s15, r3
}
 8000a14:	eeb0 0a67 	vmov.f32	s0, s15
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	b68b71c3 	.word	0xb68b71c3
 8000a24:	3f79bc65 	.word	0x3f79bc65
 8000a28:	a29c779a 	.word	0xa29c779a
 8000a2c:	4000b923 	.word	0x4000b923
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	40000400 	.word	0x40000400

08000a38 <Kill_Motors>:

void Kill_Motors(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <Kill_Motors+0x34>)
 8000a42:	f001 fd0b 	bl	800245c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <Kill_Motors+0x34>)
 8000a4c:	f001 fd06 	bl	800245c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <Kill_Motors+0x34>)
 8000a58:	f001 fd00 	bl	800245c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <Kill_Motors+0x34>)
 8000a64:	f001 fcfa 	bl	800245c <HAL_GPIO_WritePin>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	48000800 	.word	0x48000800

08000a70 <pca9685_init>:
		3248, 3284, 3320, 3356, 3393, 3430, 3467, 3504, 3542, 3579, 3617, 3656, 3694, 3733, 3773, 3812, 3852, 3892,
		3932, 3973, 4013, 4055, 4095
};

void pca9685_init(pca9685_handle_t *handle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle != NULL);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d105      	bne.n	8000a8c <pca9685_init+0x1c>
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <pca9685_init+0xb0>)
 8000a82:	4a28      	ldr	r2, [pc, #160]	; (8000b24 <pca9685_init+0xb4>)
 8000a84:	2138      	movs	r1, #56	; 0x38
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <pca9685_init+0xb8>)
 8000a88:	f004 fa48 	bl	8004f1c <__assert_func>

	// Mode registers set to default values(Auto-Increment, Sleep, Open-Drain);
	uint8_t mode1_reg_default_value = 0b00110000u;
 8000a8c:	2330      	movs	r3, #48	; 0x30
 8000a8e:	77bb      	strb	r3, [r7, #30]
	uint8_t mode2_reg_default_value = 0b00000000u;
 8000a90:	2300      	movs	r3, #0
 8000a92:	77fb      	strb	r3, [r7, #31]

	if (handle->inverted)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	799b      	ldrb	r3, [r3, #6]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <pca9685_init+0x34>
	{
		mode2_reg_default_value |= 0b00010000u;
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	77fb      	strb	r3, [r7, #31]
	}

	uint8_t init_data1[] = { PCA9685_REGISTER_MODE1, mode1_reg_default_value};
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	773b      	strb	r3, [r7, #28]
 8000aa8:	7fbb      	ldrb	r3, [r7, #30]
 8000aaa:	777b      	strb	r3, [r7, #29]
	uint8_t init_data2[] = { PCA9685_REGISTER_MODE2, mode2_reg_default_value};
 8000aac:	2301      	movs	r3, #1
 8000aae:	763b      	strb	r3, [r7, #24]
 8000ab0:	7ffb      	ldrb	r3, [r7, #31]
 8000ab2:	767b      	strb	r3, [r7, #25]

	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, init_data1, 2, PCA9685_I2C_TIMEOUT);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	8899      	ldrh	r1, [r3, #4]
 8000abc:	f107 021c 	add.w	r2, r7, #28
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	f001 fd93 	bl	80025f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, init_data2, 2, PCA9685_I2C_TIMEOUT);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	8899      	ldrh	r1, [r3, #4]
 8000ad2:	f107 0218 	add.w	r2, r7, #24
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2302      	movs	r3, #2
 8000adc:	f001 fd88 	bl	80025f0 <HAL_I2C_Master_Transmit>

	uint8_t startup_data[4] = {0x00, 0x00, 0x00, 0x10};
 8000ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ae4:	617b      	str	r3, [r7, #20]
	uint8_t transfer[5];
	transfer[0] = PCA9685_REGISTER_ALL_LED_ON_L;
 8000ae6:	23fa      	movs	r3, #250	; 0xfa
 8000ae8:	733b      	strb	r3, [r7, #12]
 8000aea:	697b      	ldr	r3, [r7, #20]

	memcpy(&transfer[1], startup_data, 4);
 8000aec:	f8c7 300d 	str.w	r3, [r7, #13]

	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer, sizeof(startup_data) + 1, PCA9685_I2C_TIMEOUT);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	8899      	ldrh	r1, [r3, #4]
 8000af8:	f107 020c 	add.w	r2, r7, #12
 8000afc:	2301      	movs	r3, #1
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2305      	movs	r3, #5
 8000b02:	f001 fd75 	bl	80025f0 <HAL_I2C_Master_Transmit>

	pca9685_set_pwm_frequency(handle, 1000);
 8000b06:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000b2c <pca9685_init+0xbc>
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 f88a 	bl	8000c24 <pca9685_set_pwm_frequency>
	pca9685_wakeup(handle);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f839 	bl	8000b88 <pca9685_wakeup>
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	08005f58 	.word	0x08005f58
 8000b24:	08006230 	.word	0x08006230
 8000b28:	08005f74 	.word	0x08005f74
 8000b2c:	447a0000 	.word	0x447a0000

08000b30 <pca9685_sleep>:

static void pca9685_sleep(pca9685_handle_t *handle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]
	uint8_t mode1_reg;

	//if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &PCA9685_REGISTER_MODE1, 1, PCA9685_I2C_TIMEOUT) != HAL_OK)
	//{
	HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, &mode1_reg, 1, PCA9685_I2C_TIMEOUT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	8899      	ldrh	r1, [r3, #4]
 8000b40:	f107 020f 	add.w	r2, r7, #15
 8000b44:	2301      	movs	r3, #1
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f001 fe45 	bl	80027d8 <HAL_I2C_Master_Receive>
	//}

	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	73fb      	strb	r3, [r7, #15]
	PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	73fb      	strb	r3, [r7, #15]

	uint8_t data[2] = {PCA9685_REGISTER_MODE1_SLEEP, mode1_reg};
 8000b62:	2310      	movs	r3, #16
 8000b64:	733b      	strb	r3, [r7, #12]
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	8899      	ldrh	r1, [r3, #4]
 8000b72:	f107 020c 	add.w	r2, r7, #12
 8000b76:	2301      	movs	r3, #1
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	f001 fd38 	bl	80025f0 <HAL_I2C_Master_Transmit>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <pca9685_wakeup>:

void pca9685_wakeup(pca9685_handle_t *handle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	6078      	str	r0, [r7, #4]
	uint8_t mode1_reg;
	//if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &PCA9685_REGISTER_MODE1, 1, PCA9685_I2C_TIMEOUT) != HAL_OK)
	//{
	HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, &mode1_reg, 1, PCA9685_I2C_TIMEOUT);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	8899      	ldrh	r1, [r3, #4]
 8000b98:	f107 020e 	add.w	r2, r7, #14
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f001 fe19 	bl	80027d8 <HAL_I2C_Master_Receive>
	//}

	bool restart_required = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000ba6:	7bbb      	ldrb	r3, [r7, #14]
 8000ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	bf14      	ite	ne
 8000bb0:	2301      	movne	r3, #1
 8000bb2:	2300      	moveq	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

	// Clear the restart bit for now and clear the sleep bit
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73bb      	strb	r3, [r7, #14]
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	73bb      	strb	r3, [r7, #14]

	uint8_t data[2] = {PCA9685_REGISTER_MODE1_SLEEP, mode1_reg};
 8000bca:	2310      	movs	r3, #16
 8000bcc:	733b      	strb	r3, [r7, #12]
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	8899      	ldrh	r1, [r3, #4]
 8000bda:	f107 020c 	add.w	r2, r7, #12
 8000bde:	2301      	movs	r3, #1
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2302      	movs	r3, #2
 8000be4:	f001 fd04 	bl	80025f0 <HAL_I2C_Master_Transmit>

	if(restart_required)
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d016      	beq.n	8000c1c <pca9685_wakeup+0x94>
	{
		HAL_Delay(1); // Oscillator requires at least 500us to stabilize
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f001 f974 	bl	8001edc <HAL_Delay>
		PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	73bb      	strb	r3, [r7, #14]
		uint8_t data[2] = {PCA9685_REGISTER_MODE1_SLEEP, mode1_reg};
 8000bfe:	2310      	movs	r3, #16
 8000c00:	723b      	strb	r3, [r7, #8]
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	8899      	ldrh	r1, [r3, #4]
 8000c0e:	f107 0208 	add.w	r2, r7, #8
 8000c12:	2301      	movs	r3, #1
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2302      	movs	r3, #2
 8000c18:	f001 fcea 	bl	80025f0 <HAL_I2C_Master_Transmit>
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <pca9685_set_pwm_frequency>:

void pca9685_set_pwm_frequency(pca9685_handle_t *handle, float frequency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
	assert(frequency >= 24);
 8000c30:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c34:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c40:	da05      	bge.n	8000c4e <pca9685_set_pwm_frequency+0x2a>
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <pca9685_set_pwm_frequency+0xac>)
 8000c44:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <pca9685_set_pwm_frequency+0xb0>)
 8000c46:	2181      	movs	r1, #129	; 0x81
 8000c48:	4823      	ldr	r0, [pc, #140]	; (8000cd8 <pca9685_set_pwm_frequency+0xb4>)
 8000c4a:	f004 f967 	bl	8004f1c <__assert_func>
	assert(frequency <= 1526);
 8000c4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c52:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000cdc <pca9685_set_pwm_frequency+0xb8>
 8000c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5e:	d905      	bls.n	8000c6c <pca9685_set_pwm_frequency+0x48>
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <pca9685_set_pwm_frequency+0xbc>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <pca9685_set_pwm_frequency+0xb0>)
 8000c64:	2182      	movs	r1, #130	; 0x82
 8000c66:	481c      	ldr	r0, [pc, #112]	; (8000cd8 <pca9685_set_pwm_frequency+0xb4>)
 8000c68:	f004 f958 	bl	8004f1c <__assert_func>

	// Calculate the prescaler value (datasheet page 25)
	uint8_t prescaler = (uint8_t)roundf(25000000.0f / (4096 * frequency)) - 1;
 8000c6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c70:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000ce4 <pca9685_set_pwm_frequency+0xc0>
 8000c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c78:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000ce8 <pca9685_set_pwm_frequency+0xc4>
 8000c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c80:	eeb0 0a47 	vmov.f32	s0, s14
 8000c84:	f005 f936 	bl	8005ef4 <roundf>
 8000c88:	eef0 7a40 	vmov.f32	s15, s0
 8000c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c90:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c94:	793b      	ldrb	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	75fb      	strb	r3, [r7, #23]

	pca9685_sleep(handle); //must be in sleep mode to change frequency
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f7ff ff47 	bl	8000b30 <pca9685_sleep>
	uint8_t prescaler_data[2] = {PCA9685_REGISTER_PRESCALER, prescaler};
 8000ca2:	23fe      	movs	r3, #254	; 0xfe
 8000ca4:	753b      	strb	r3, [r7, #20]
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, prescaler_data, 2, PCA9685_I2C_TIMEOUT); //write new prescaler
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	8899      	ldrh	r1, [r3, #4]
 8000cb2:	f107 0214 	add.w	r2, r7, #20
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f001 fc98 	bl	80025f0 <HAL_I2C_Master_Transmit>

	pca9685_wakeup(handle);
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f7ff ff61 	bl	8000b88 <pca9685_wakeup>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08005f94 	.word	0x08005f94
 8000cd4:	08006240 	.word	0x08006240
 8000cd8:	08005f74 	.word	0x08005f74
 8000cdc:	44bec000 	.word	0x44bec000
 8000ce0:	08005fa4 	.word	0x08005fa4
 8000ce4:	45800000 	.word	0x45800000
 8000ce8:	4bbebc20 	.word	0x4bbebc20

08000cec <pca9685_set_pwm_channel_times>:

void pca9685_set_pwm_channel_times(pca9685_handle_t *handle, unsigned channel, unsigned on_time, unsigned off_time)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	603b      	str	r3, [r7, #0]
	assert(channel >= 0);
	assert(channel < 16);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d905      	bls.n	8000d0c <pca9685_set_pwm_channel_times+0x20>
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <pca9685_set_pwm_channel_times+0x98>)
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <pca9685_set_pwm_channel_times+0x9c>)
 8000d04:	2191      	movs	r1, #145	; 0x91
 8000d06:	4821      	ldr	r0, [pc, #132]	; (8000d8c <pca9685_set_pwm_channel_times+0xa0>)
 8000d08:	f004 f908 	bl	8004f1c <__assert_func>

	assert(on_time >= 0);
	assert(on_time <= 4096);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d12:	d905      	bls.n	8000d20 <pca9685_set_pwm_channel_times+0x34>
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <pca9685_set_pwm_channel_times+0xa4>)
 8000d16:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <pca9685_set_pwm_channel_times+0x9c>)
 8000d18:	2194      	movs	r1, #148	; 0x94
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <pca9685_set_pwm_channel_times+0xa0>)
 8000d1c:	f004 f8fe 	bl	8004f1c <__assert_func>

	assert(off_time >= 0);
	assert(off_time <= 4096);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d26:	d905      	bls.n	8000d34 <pca9685_set_pwm_channel_times+0x48>
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <pca9685_set_pwm_channel_times+0xa8>)
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <pca9685_set_pwm_channel_times+0x9c>)
 8000d2c:	2197      	movs	r1, #151	; 0x97
 8000d2e:	4817      	ldr	r0, [pc, #92]	; (8000d8c <pca9685_set_pwm_channel_times+0xa0>)
 8000d30:	f004 f8f4 	bl	8004f1c <__assert_func>

	uint8_t data_pwm[4] = { on_time, on_time >> 8u, off_time, off_time >> 8u };
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	773b      	strb	r3, [r7, #28]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	777b      	strb	r3, [r7, #29]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	77bb      	strb	r3, [r7, #30]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	77fb      	strb	r3, [r7, #31]
	uint8_t transfer_pwm[5];
	transfer_pwm[0] =  PCA9685_REGISTER_LED0_ON_L + channel * 4;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	3306      	adds	r3, #6
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	753b      	strb	r3, [r7, #20]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
	memcpy(&transfer_pwm[1], data_pwm, sizeof(data_pwm));
 8000d60:	f8c7 3015 	str.w	r3, [r7, #21]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer_pwm, sizeof(data_pwm) + 1, PCA9685_I2C_TIMEOUT);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	8899      	ldrh	r1, [r3, #4]
 8000d6c:	f107 0214 	add.w	r2, r7, #20
 8000d70:	2301      	movs	r3, #1
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2305      	movs	r3, #5
 8000d76:	f001 fc3b 	bl	80025f0 <HAL_I2C_Master_Transmit>
}
 8000d7a:	bf00      	nop
 8000d7c:	3720      	adds	r7, #32
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	08005fb8 	.word	0x08005fb8
 8000d88:	0800625c 	.word	0x0800625c
 8000d8c:	08005f74 	.word	0x08005f74
 8000d90:	08005fc8 	.word	0x08005fc8
 8000d94:	08005fd8 	.word	0x08005fd8

08000d98 <pca9685_set_channel_duty_cycle>:

void pca9685_set_channel_duty_cycle(pca9685_handle_t *handle, unsigned channel, float duty_cycle, bool logarithmic)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	70fb      	strb	r3, [r7, #3]
	assert(duty_cycle >= 0.0);
 8000daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db6:	da05      	bge.n	8000dc4 <pca9685_set_channel_duty_cycle+0x2c>
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <pca9685_set_channel_duty_cycle+0x110>)
 8000dba:	4a3c      	ldr	r2, [pc, #240]	; (8000eac <pca9685_set_channel_duty_cycle+0x114>)
 8000dbc:	21a2      	movs	r1, #162	; 0xa2
 8000dbe:	483c      	ldr	r0, [pc, #240]	; (8000eb0 <pca9685_set_channel_duty_cycle+0x118>)
 8000dc0:	f004 f8ac 	bl	8004f1c <__assert_func>
	assert(duty_cycle <= 1.0);
 8000dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	d905      	bls.n	8000de2 <pca9685_set_channel_duty_cycle+0x4a>
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <pca9685_set_channel_duty_cycle+0x11c>)
 8000dd8:	4a34      	ldr	r2, [pc, #208]	; (8000eac <pca9685_set_channel_duty_cycle+0x114>)
 8000dda:	21a3      	movs	r1, #163	; 0xa3
 8000ddc:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <pca9685_set_channel_duty_cycle+0x118>)
 8000dde:	f004 f89d 	bl	8004f1c <__assert_func>

	if (duty_cycle == 0.0)
 8000de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	d107      	bne.n	8000e00 <pca9685_set_channel_duty_cycle+0x68>
	{
		pca9685_set_pwm_channel_times(handle, channel, 0, 4096); // Special value for always off
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	2200      	movs	r2, #0
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f7ff ff77 	bl	8000cec <pca9685_set_pwm_channel_times>
			unsigned off_time = (on_time + required_on_time) & 0xfffu;

			pca9685_set_pwm_channel_times(handle, channel, on_time, off_time);
	}

	}
 8000dfe:	e04e      	b.n	8000e9e <pca9685_set_channel_duty_cycle+0x106>
	else if (duty_cycle == 1.0)
 8000e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e08:	eef4 7a47 	vcmp.f32	s15, s14
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	d107      	bne.n	8000e22 <pca9685_set_channel_duty_cycle+0x8a>
		pca9685_set_pwm_channel_times(handle, channel, 4096, 0); // Special value for always on
 8000e12:	2300      	movs	r3, #0
 8000e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff ff66 	bl	8000cec <pca9685_set_pwm_channel_times>
	}
 8000e20:	e03d      	b.n	8000e9e <pca9685_set_channel_duty_cycle+0x106>
			if (logarithmic)
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d014      	beq.n	8000e52 <pca9685_set_channel_duty_cycle+0xba>
				required_on_time = CIEL_8_12[(unsigned)roundf(255 * duty_cycle)];
 8000e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e2c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000eb8 <pca9685_set_channel_duty_cycle+0x120>
 8000e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e34:	eeb0 0a67 	vmov.f32	s0, s15
 8000e38:	f005 f85c 	bl	8005ef4 <roundf>
 8000e3c:	eef0 7a40 	vmov.f32	s15, s0
 8000e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e44:	ee17 2a90 	vmov	r2, s15
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <pca9685_set_channel_duty_cycle+0x124>)
 8000e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	e010      	b.n	8000e74 <pca9685_set_channel_duty_cycle+0xdc>
				required_on_time = (unsigned)roundf(4095 * duty_cycle);
 8000e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e56:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ec0 <pca9685_set_channel_duty_cycle+0x128>
 8000e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e62:	f005 f847 	bl	8005ef4 <roundf>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e6e:	ee17 3a90 	vmov	r3, s15
 8000e72:	61fb      	str	r3, [r7, #28]
			unsigned on_time = (channel == 0) ? 0 : (channel * 256) - 1;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <pca9685_set_channel_duty_cycle+0xea>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	e000      	b.n	8000e84 <pca9685_set_channel_duty_cycle+0xec>
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
			unsigned off_time = (on_time + required_on_time) & 0xfffu;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e90:	617b      	str	r3, [r7, #20]
			pca9685_set_pwm_channel_times(handle, channel, on_time, off_time);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff27 	bl	8000cec <pca9685_set_pwm_channel_times>
	}
 8000e9e:	bf00      	nop
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	08005fec 	.word	0x08005fec
 8000eac:	0800627c 	.word	0x0800627c
 8000eb0:	08005f74 	.word	0x08005f74
 8000eb4:	08006000 	.word	0x08006000
 8000eb8:	437f0000 	.word	0x437f0000
 8000ebc:	08006030 	.word	0x08006030
 8000ec0:	457ff000 	.word	0x457ff000

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b090      	sub	sp, #64	; 0x40
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Mode = idle;
 8000eca:	4b7d      	ldr	r3, [pc, #500]	; (80010c0 <main+0x1fc>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 ff9e 	bl	8001e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 fa30 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fbfe 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000edc:	f000 fbcc 	bl	8001678 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ee0:	f000 fac6 	bl	8001470 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ee4:	f000 fb1e 	bl	8001524 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ee8:	f000 fb70 	bl	80015cc <MX_TIM3_Init>
  MX_I2C1_Init();
 8000eec:	f000 fa80 	bl	80013f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t student[] = {'C','O','N','N','E','C','T','E','D'};
 8000ef0:	4a74      	ldr	r2, [pc, #464]	; (80010c4 <main+0x200>)
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ef8:	c303      	stmia	r3!, {r0, r1}
 8000efa:	701a      	strb	r2, [r3, #0]
	uint8_t ON[] = {'O','N','_','M','O','D','E'};
 8000efc:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <main+0x204>)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f06:	6018      	str	r0, [r3, #0]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	8019      	strh	r1, [r3, #0]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	0c0a      	lsrs	r2, r1, #16
 8000f10:	701a      	strb	r2, [r3, #0]
	uint8_t OFF[] = {'O','F','F','_','M','O','D','E'};
 8000f12:	4a6e      	ldr	r2, [pc, #440]	; (80010cc <main+0x208>)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart2, student, 9, 100);
 8000f1e:	f107 0114 	add.w	r1, r7, #20
 8000f22:	2364      	movs	r3, #100	; 0x64
 8000f24:	2209      	movs	r2, #9
 8000f26:	486a      	ldr	r0, [pc, #424]	; (80010d0 <main+0x20c>)
 8000f28:	f003 fcc6 	bl	80048b8 <HAL_UART_Transmit>

	volatile uint8_t Kp = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	70fb      	strb	r3, [r7, #3]
	volatile uint8_t Ki = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	70bb      	strb	r3, [r7, #2]
	volatile uint8_t Kd = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	707b      	strb	r3, [r7, #1]
	float Error1;
	float Error2;
	float Error_Integral1 = 0;
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float Previous_Error1 = 0;
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
	float Error_Integral2 =0;
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
	float Previous_Error2 = 0;
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
	float Error_Derivative1 = 0;
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Error_Derivative2 = 0;
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ON_BUTTON == 1)
 8000f5c:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <main+0x210>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d10c      	bne.n	8000f80 <main+0xbc>
	  {
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 8000f66:	2102      	movs	r1, #2
 8000f68:	485b      	ldr	r0, [pc, #364]	; (80010d8 <main+0x214>)
 8000f6a:	f001 fa5f 	bl	800242c <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d105      	bne.n	8000f80 <main+0xbc>
		  {
			  Mode = ON_MODE;
 8000f74:	4b52      	ldr	r3, [pc, #328]	; (80010c0 <main+0x1fc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
			  ON_BUTTON = 0;
 8000f7a:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <main+0x210>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(OFF_BUTTON == 1)
 8000f80:	4b56      	ldr	r3, [pc, #344]	; (80010dc <main+0x218>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10c      	bne.n	8000fa4 <main+0xe0>
	  {
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4852      	ldr	r0, [pc, #328]	; (80010d8 <main+0x214>)
 8000f8e:	f001 fa4d 	bl	800242c <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <main+0xe0>
		  {
			  Mode = OFF_MODE;
 8000f98:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <main+0x1fc>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
			  OFF_BUTTON = 0;
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <main+0x218>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
		  }

	  }


	  switch(Mode){
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <main+0x1fc>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	f000 81a9 	beq.w	8001302 <main+0x43e>
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	dcd3      	bgt.n	8000f5c <main+0x98>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <main+0xfc>
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f000 818b 	beq.w	80012d4 <main+0x410>
 8000fbe:	e1a1      	b.n	8001304 <main+0x440>
	  	break;
	  }

	  case ON_MODE:
	  {
	  	HAL_UART_Transmit(&huart2, ON, 7, 100);
 8000fc0:	f107 010c 	add.w	r1, r7, #12
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	4841      	ldr	r0, [pc, #260]	; (80010d0 <main+0x20c>)
 8000fca:	f003 fc75 	bl	80048b8 <HAL_UART_Transmit>

	  	// Start Encoder Timer
	  	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8000fce:	213c      	movs	r1, #60	; 0x3c
 8000fd0:	4843      	ldr	r0, [pc, #268]	; (80010e0 <main+0x21c>)
 8000fd2:	f003 fa89 	bl	80044e8 <HAL_TIM_Encoder_Start>
	  	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8000fd6:	213c      	movs	r1, #60	; 0x3c
 8000fd8:	4842      	ldr	r0, [pc, #264]	; (80010e4 <main+0x220>)
 8000fda:	f003 fa85 	bl	80044e8 <HAL_TIM_Encoder_Start>
	  	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000fde:	213c      	movs	r1, #60	; 0x3c
 8000fe0:	4841      	ldr	r0, [pc, #260]	; (80010e8 <main+0x224>)
 8000fe2:	f003 fa81 	bl	80044e8 <HAL_TIM_Encoder_Start>

	  	// Initialize and Startup PWM Driver
	  	pca9685_init(&handle);
 8000fe6:	4841      	ldr	r0, [pc, #260]	; (80010ec <main+0x228>)
 8000fe8:	f7ff fd42 	bl	8000a70 <pca9685_init>
	  	pca9685_set_pwm_frequency(&handle, 1000.0f);
 8000fec:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80010f0 <main+0x22c>
 8000ff0:	483e      	ldr	r0, [pc, #248]	; (80010ec <main+0x228>)
 8000ff2:	f7ff fe17 	bl	8000c24 <pca9685_set_pwm_frequency>
	  	pca9685_set_pwm_channel_times(&handle,0,4096,0); // Duty cycle of 0%
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	483b      	ldr	r0, [pc, #236]	; (80010ec <main+0x228>)
 8001000:	f7ff fe74 	bl	8000cec <pca9685_set_pwm_channel_times>
	  	pca9685_set_pwm_channel_times(&handle,1,4096,0); // Duty cycle of 0%
 8001004:	2300      	movs	r3, #0
 8001006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100a:	2101      	movs	r1, #1
 800100c:	4837      	ldr	r0, [pc, #220]	; (80010ec <main+0x228>)
 800100e:	f7ff fe6d 	bl	8000cec <pca9685_set_pwm_channel_times>
	  	pca9685_set_channel_duty_cycle(&handle,0,0.0f,false);
 8001012:	2200      	movs	r2, #0
 8001014:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80010f4 <main+0x230>
 8001018:	2100      	movs	r1, #0
 800101a:	4834      	ldr	r0, [pc, #208]	; (80010ec <main+0x228>)
 800101c:	f7ff febc 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  	pca9685_set_channel_duty_cycle(&handle,1,0.0f,false);
 8001020:	2200      	movs	r2, #0
 8001022:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80010f4 <main+0x230>
 8001026:	2101      	movs	r1, #1
 8001028:	4830      	ldr	r0, [pc, #192]	; (80010ec <main+0x228>)
 800102a:	f7ff feb5 	bl	8000d98 <pca9685_set_channel_duty_cycle>

	  	// Read Encoder Values
	  	Read_Encoder_Values();
 800102e:	f7ff fc93 	bl	8000958 <Read_Encoder_Values>

	  	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	///////////////////////////////////////////////// CONTROL LOOP ///////////////////////////////////////////////////

	  	// Proportional Error (Relative Position)
	  	Error1 = current_pos_top - current_pos_left;
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <main+0x234>)
 8001034:	ed93 7a00 	vldr	s14, [r3]
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <main+0x238>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001042:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  	Error2 = current_pos_top - current_pos_right;
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <main+0x234>)
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <main+0x23c>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001056:	edc7 7a08 	vstr	s15, [r7, #32]

	  	// To void integral wind-up, restrict integral error to reasonable values
		//Integral Error
	  	Error_Integral1 = Error_Integral1 + Error1;
 800105a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800105e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  	Error_Integral2 = Error_Integral2 + Error2;
 800106a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800106e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  	if (Error_Integral1 > 50)
 800107a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800107e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800110c <main+0x248>
 8001082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	dd02      	ble.n	8001092 <main+0x1ce>
	  	{
	  		Error_Integral1 = 50;  // Recommended in Tutorial
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <main+0x240>)
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001090:	e00a      	b.n	80010a8 <main+0x1e4>
	  	}
	  	else if (Error_Integral1 < 50)
 8001092:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001096:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800110c <main+0x248>
 800109a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	d501      	bpl.n	80010a8 <main+0x1e4>
	  	{
	  		Error_Integral1 = -50;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <main+0x244>)
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	}

	  	if(Error_Integral2 > 50)
 80010a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010ac:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800110c <main+0x248>
 80010b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	dd2a      	ble.n	8001110 <main+0x24c>
	  	{
	  		Error_Integral2 = 50;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <main+0x240>)
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
 80010be:	e032      	b.n	8001126 <main+0x262>
 80010c0:	20000158 	.word	0x20000158
 80010c4:	08006014 	.word	0x08006014
 80010c8:	08006020 	.word	0x08006020
 80010cc:	08006028 	.word	0x08006028
 80010d0:	200001f8 	.word	0x200001f8
 80010d4:	2000027d 	.word	0x2000027d
 80010d8:	48000800 	.word	0x48000800
 80010dc:	2000027c 	.word	0x2000027c
 80010e0:	20000160 	.word	0x20000160
 80010e4:	200001ac 	.word	0x200001ac
 80010e8:	2000010c 	.word	0x2000010c
 80010ec:	20000004 	.word	0x20000004
 80010f0:	447a0000 	.word	0x447a0000
 80010f4:	00000000 	.word	0x00000000
 80010f8:	200000b8 	.word	0x200000b8
 80010fc:	200000b4 	.word	0x200000b4
 8001100:	20000108 	.word	0x20000108
 8001104:	42480000 	.word	0x42480000
 8001108:	c2480000 	.word	0xc2480000
 800110c:	42480000 	.word	0x42480000
	  	}
	  	else if (Error_Integral2 < 50)
 8001110:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001114:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800110c <main+0x248>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d501      	bpl.n	8001126 <main+0x262>
		{
			Error_Integral2 = -50;
 8001122:	4b79      	ldr	r3, [pc, #484]	; (8001308 <main+0x444>)
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
		}

	  	// Derivative Error
	  	Error_Derivative1 = Error1 - Previous_Error1;
 8001126:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800112a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800112e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001132:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  	Previous_Error1 = Error1;
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38

	  	Error_Derivative2 = Error2 - Previous_Error2;
 800113a:	ed97 7a08 	vldr	s14, [r7, #32]
 800113e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001146:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  	Previous_Error2 = Error2;
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	633b      	str	r3, [r7, #48]	; 0x30

	  	// PID OUTPUT
	  	PID_Output1 = (Kp*Error1)+(Ki*Error_Integral1)+(Kd*Error_Derivative1); // Map to PWM Signal
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800115e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001162:	78bb      	ldrb	r3, [r7, #2]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800116e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800117a:	787b      	ldrb	r3, [r7, #1]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001186:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800118a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001192:	4b5e      	ldr	r3, [pc, #376]	; (800130c <main+0x448>)
 8001194:	edc3 7a00 	vstr	s15, [r3]
	  	PID_Output2 = (Kp*Error2)+(Ki*Error_Integral2)+(Kd*Error_Derivative2); // Map to PWM Signal
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80011a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ac:	78bb      	ldrb	r3, [r7, #2]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <main+0x44c>)
 80011de:	edc3 7a00 	vstr	s15, [r3]

	  	if(current_pos_top <= Setpoint)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <main+0x450>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d813      	bhi.n	800121a <main+0x356>
	  	{
	  		Set_Motor_Parameters(Forward);
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <main+0x454>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fb6f 	bl	80008dc <Set_Motor_Parameters>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 80011fe:	2200      	movs	r2, #0
 8001200:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800131c <main+0x458>
 8001204:	2100      	movs	r1, #0
 8001206:	4846      	ldr	r0, [pc, #280]	; (8001320 <main+0x45c>)
 8001208:	f7ff fdc6 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  		pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 800120c:	2200      	movs	r2, #0
 800120e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800131c <main+0x458>
 8001212:	2101      	movs	r1, #1
 8001214:	4842      	ldr	r0, [pc, #264]	; (8001320 <main+0x45c>)
 8001216:	f7ff fdbf 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  	}

	  	if(current_pos_top > Setpoint)
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <main+0x450>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	dd13      	ble.n	8001252 <main+0x38e>
	  	{
	  		Set_Motor_Parameters(Backward);
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <main+0x460>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fb53 	bl	80008dc <Set_Motor_Parameters>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 8001236:	2200      	movs	r2, #0
 8001238:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800131c <main+0x458>
 800123c:	2100      	movs	r1, #0
 800123e:	4838      	ldr	r0, [pc, #224]	; (8001320 <main+0x45c>)
 8001240:	f7ff fdaa 	bl	8000d98 <pca9685_set_channel_duty_cycle>
			pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 8001244:	2200      	movs	r2, #0
 8001246:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800131c <main+0x458>
 800124a:	2101      	movs	r1, #1
 800124c:	4834      	ldr	r0, [pc, #208]	; (8001320 <main+0x45c>)
 800124e:	f7ff fda3 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  	}

	  	if(current_pos_top >= Max_Len)
 8001252:	4b30      	ldr	r3, [pc, #192]	; (8001314 <main+0x450>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001328 <main+0x464>
 800125c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	db15      	blt.n	8001292 <main+0x3ce>
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);  // Trigger Relay if max rail length exceeded
 8001266:	2201      	movs	r2, #1
 8001268:	2104      	movs	r1, #4
 800126a:	4830      	ldr	r0, [pc, #192]	; (800132c <main+0x468>)
 800126c:	f001 f8f6 	bl	800245c <HAL_GPIO_WritePin>
	  		Kill_Motors();
 8001270:	f7ff fbe2 	bl	8000a38 <Kill_Motors>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001274:	2200      	movs	r2, #0
 8001276:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800131c <main+0x458>
 800127a:	2100      	movs	r1, #0
 800127c:	4828      	ldr	r0, [pc, #160]	; (8001320 <main+0x45c>)
 800127e:	f7ff fd8b 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  		pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001282:	2200      	movs	r2, #0
 8001284:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800131c <main+0x458>
 8001288:	2101      	movs	r1, #1
 800128a:	4825      	ldr	r0, [pc, #148]	; (8001320 <main+0x45c>)
 800128c:	f7ff fd84 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  		while(1)
 8001290:	e7fe      	b.n	8001290 <main+0x3cc>
	  		{
	  			// Do Nothing
	  		}
	  	}

	  	if(current_pos_top <= Min_Len)
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <main+0x450>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001330 <main+0x46c>
 800129c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	d900      	bls.n	80012a8 <main+0x3e4>
	  		{
	  			// Do Nothing
	  		}
	  	}

	  	break;
 80012a6:	e02d      	b.n	8001304 <main+0x440>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);  // Trigger Relay if min rail length exceeded
 80012a8:	2201      	movs	r2, #1
 80012aa:	2104      	movs	r1, #4
 80012ac:	481f      	ldr	r0, [pc, #124]	; (800132c <main+0x468>)
 80012ae:	f001 f8d5 	bl	800245c <HAL_GPIO_WritePin>
	  		Kill_Motors();
 80012b2:	f7ff fbc1 	bl	8000a38 <Kill_Motors>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); //SET DUTY CYCLE TO ZERO
 80012b6:	2200      	movs	r2, #0
 80012b8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800131c <main+0x458>
 80012bc:	2100      	movs	r1, #0
 80012be:	4818      	ldr	r0, [pc, #96]	; (8001320 <main+0x45c>)
 80012c0:	f7ff fd6a 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  		pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); //SET DUTY CYCLE TO ZERO
 80012c4:	2200      	movs	r2, #0
 80012c6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800131c <main+0x458>
 80012ca:	2101      	movs	r1, #1
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <main+0x45c>)
 80012ce:	f7ff fd63 	bl	8000d98 <pca9685_set_channel_duty_cycle>
	  		while(1)
 80012d2:	e7fe      	b.n	80012d2 <main+0x40e>
	  }

	  case OFF_MODE:
	  {
		  Kill_Motors();
 80012d4:	f7ff fbb0 	bl	8000a38 <Kill_Motors>
		  pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); //SET DUTY CYCLE TO ZERO
 80012d8:	2200      	movs	r2, #0
 80012da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800131c <main+0x458>
 80012de:	2100      	movs	r1, #0
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <main+0x45c>)
 80012e2:	f7ff fd59 	bl	8000d98 <pca9685_set_channel_duty_cycle>
		  pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); //SET DUTY CYCLE TO ZERO
 80012e6:	2200      	movs	r2, #0
 80012e8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800131c <main+0x458>
 80012ec:	2101      	movs	r1, #1
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <main+0x45c>)
 80012f0:	f7ff fd52 	bl	8000d98 <pca9685_set_channel_duty_cycle>
		  HAL_UART_Transmit(&huart2, OFF, 8, 100);
 80012f4:	1d39      	adds	r1, r7, #4
 80012f6:	2364      	movs	r3, #100	; 0x64
 80012f8:	2208      	movs	r2, #8
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <main+0x470>)
 80012fc:	f003 fadc 	bl	80048b8 <HAL_UART_Transmit>
		  while(1)
 8001300:	e7fe      	b.n	8001300 <main+0x43c>
	  	break;
 8001302:	bf00      	nop
	  if(ON_BUTTON == 1)
 8001304:	e62a      	b.n	8000f5c <main+0x98>
 8001306:	bf00      	nop
 8001308:	c2480000 	.word	0xc2480000
 800130c:	2000015c 	.word	0x2000015c
 8001310:	200000b0 	.word	0x200000b0
 8001314:	200000b8 	.word	0x200000b8
 8001318:	20000000 	.word	0x20000000
 800131c:	00000000 	.word	0x00000000
 8001320:	20000004 	.word	0x20000004
 8001324:	20000098 	.word	0x20000098
 8001328:	437a0000 	.word	0x437a0000
 800132c:	48000800 	.word	0x48000800
 8001330:	c37a0000 	.word	0xc37a0000
 8001334:	200001f8 	.word	0x200001f8

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	; 0x58
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001342:	2228      	movs	r2, #40	; 0x28
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fe42 	bl	8004fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136e:	2302      	movs	r3, #2
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001372:	2301      	movs	r3, #1
 8001374:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001376:	2310      	movs	r3, #16
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800137e:	2300      	movs	r3, #0
 8001380:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001382:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001386:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fd91 	bl	8002eb4 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001398:	f000 fa2a 	bl	80017f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fc83 	bl	8003cc4 <HAL_RCC_ClockConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013c4:	f000 fa14 	bl	80017f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 80013c8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80013cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fea9 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013e4:	f000 fa04 	bl	80017f0 <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3758      	adds	r7, #88	; 0x58
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_I2C1_Init+0x74>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <MX_I2C1_Init+0x78>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_I2C1_Init+0x74>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <MX_I2C1_Init+0x7c>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_I2C1_Init+0x74>)
 8001408:	2201      	movs	r2, #1
 800140a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_I2C1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_I2C1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_I2C1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_I2C1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <MX_I2C1_Init+0x74>)
 800142c:	f001 f851 	bl	80024d2 <HAL_I2C_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001436:	f000 f9db 	bl	80017f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800143a:	2100      	movs	r1, #0
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <MX_I2C1_Init+0x74>)
 800143e:	f001 fca1 	bl	8002d84 <HAL_I2CEx_ConfigAnalogFilter>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001448:	f000 f9d2 	bl	80017f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_I2C1_Init+0x74>)
 8001450:	f001 fce3 	bl	8002e1a <HAL_I2CEx_ConfigDigitalFilter>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 f9c9 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000bc 	.word	0x200000bc
 8001468:	40005400 	.word	0x40005400
 800146c:	2000090e 	.word	0x2000090e

08001470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2224      	movs	r2, #36	; 0x24
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fda6 	bl	8004fd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <MX_TIM1_Init+0xac>)
 8001490:	4a23      	ldr	r2, [pc, #140]	; (8001520 <MX_TIM1_Init+0xb0>)
 8001492:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_TIM1_Init+0xac>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <MX_TIM1_Init+0xac>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <MX_TIM1_Init+0xac>)
 80014a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_TIM1_Init+0xac>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_TIM1_Init+0xac>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_TIM1_Init+0xac>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ba:	2303      	movs	r3, #3
 80014bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014ca:	230a      	movs	r3, #10
 80014cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d2:	2301      	movs	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014da:	230a      	movs	r3, #10
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_TIM1_Init+0xac>)
 80014e6:	f002 ff59 	bl	800439c <HAL_TIM_Encoder_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80014f0:	f000 f97e 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_TIM1_Init+0xac>)
 8001506:	f003 f91b 	bl	8004740 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001510:	f000 f96e 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3730      	adds	r7, #48	; 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000160 	.word	0x20000160
 8001520:	40012c00 	.word	0x40012c00

08001524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2224      	movs	r2, #36	; 0x24
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fd4c 	bl	8004fd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_TIM2_Init+0xa4>)
 8001544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001548:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_TIM2_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM2_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_TIM2_Init+0xa4>)
 8001558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM2_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM2_Init+0xa4>)
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800156a:	2303      	movs	r3, #3
 800156c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800157a:	230a      	movs	r3, #10
 800157c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001582:	2301      	movs	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800158a:	230a      	movs	r3, #10
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_TIM2_Init+0xa4>)
 8001596:	f002 ff01 	bl	800439c <HAL_TIM_Encoder_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80015a0:	f000 f926 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM2_Init+0xa4>)
 80015b2:	f003 f8c5 	bl	8004740 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015bc:	f000 f918 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3730      	adds	r7, #48	; 0x30
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200001ac 	.word	0x200001ac

080015cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2224      	movs	r2, #36	; 0x24
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fcf8 	bl	8004fd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_TIM3_Init+0xa4>)
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <MX_TIM3_Init+0xa8>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_TIM3_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_TIM3_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_TIM3_Init+0xa4>)
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM3_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_TIM3_Init+0xa4>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001610:	2303      	movs	r3, #3
 8001612:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001620:	230a      	movs	r3, #10
 8001622:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001630:	230a      	movs	r3, #10
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_TIM3_Init+0xa4>)
 800163c:	f002 feae 	bl	800439c <HAL_TIM_Encoder_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001646:	f000 f8d3 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM3_Init+0xa4>)
 8001658:	f003 f872 	bl	8004740 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001662:	f000 f8c5 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	; 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000010c 	.word	0x2000010c
 8001674:	40000400 	.word	0x40000400

08001678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_USART2_UART_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001684:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016bc:	f003 f8ae 	bl	800481c <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 f893 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200001f8 	.word	0x200001f8
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <MX_GPIO_Init+0x10c>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	4a3c      	ldr	r2, [pc, #240]	; (80017e4 <MX_GPIO_Init+0x10c>)
 80016f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016f8:	6153      	str	r3, [r2, #20]
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <MX_GPIO_Init+0x10c>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <MX_GPIO_Init+0x10c>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_GPIO_Init+0x10c>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <MX_GPIO_Init+0x10c>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <MX_GPIO_Init+0x10c>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2120      	movs	r1, #32
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f000 fe81 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001760:	4821      	ldr	r0, [pc, #132]	; (80017e8 <MX_GPIO_Init+0x110>)
 8001762:	f000 fe7b 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001766:	2306      	movs	r3, #6
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MX_GPIO_Init+0x114>)
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800176e:	2302      	movs	r3, #2
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	481b      	ldr	r0, [pc, #108]	; (80017e8 <MX_GPIO_Init+0x110>)
 800177a:	f000 fce5 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800177e:	2320      	movs	r3, #32
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001798:	f000 fcd6 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800179c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_GPIO_Init+0x110>)
 80017b6:	f000 fcc7 	bl	8002148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2007      	movs	r0, #7
 80017c0:	f000 fc8b 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017c4:	2007      	movs	r0, #7
 80017c6:	f000 fca4 	bl	8002112 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2008      	movs	r0, #8
 80017d0:	f000 fc83 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80017d4:	2008      	movs	r0, #8
 80017d6:	f000 fc9c 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000800 	.word	0x48000800
 80017ec:	10110000 	.word	0x10110000

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x44>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_MspInit+0x44>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x44>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_MspInit+0x44>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_MspInit+0x44>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_MspInit+0x44>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <HAL_I2C_MspInit+0xb8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d145      	bne.n	80018f2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a8:	2304      	movs	r3, #4
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f000 fc47 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018be:	2312      	movs	r3, #18
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ca:	2304      	movs	r3, #4
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <HAL_I2C_MspInit+0xc0>)
 80018d6:	f000 fc37 	bl	8002148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 80018e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_I2C_MspInit+0xbc>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40005400 	.word	0x40005400
 8001900:	40021000 	.word	0x40021000
 8001904:	48000400 	.word	0x48000400

08001908 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a55      	ldr	r2, [pc, #340]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x174>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d146      	bne.n	80019b8 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192a:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800194c:	6153      	str	r3, [r2, #20]
 800194e:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	6153      	str	r3, [r2, #20]
 8001966:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001972:	2301      	movs	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001982:	2302      	movs	r3, #2
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	483d      	ldr	r0, [pc, #244]	; (8001a84 <HAL_TIM_Encoder_MspInit+0x17c>)
 800198e:	f000 fbdb 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019a4:	2306      	movs	r3, #6
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b2:	f000 fbc9 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019b6:	e05c      	b.n	8001a72 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c0:	d129      	bne.n	8001a16 <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c2:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019f2:	2303      	movs	r3, #3
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a02:	2301      	movs	r3, #1
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fb9a 	bl	8002148 <HAL_GPIO_Init>
}
 8001a14:	e02d      	b.n	8001a72 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM3)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_TIM_Encoder_MspInit+0x180>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d128      	bne.n	8001a72 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	61d3      	str	r3, [r2, #28]
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a42:	6153      	str	r3, [r2, #20]
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x178>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001a50:	2350      	movs	r3, #80	; 0x50
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a60:	2302      	movs	r3, #2
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f000 fb6b 	bl	8002148 <HAL_GPIO_Init>
}
 8001a72:	bf00      	nop
 8001a74:	3738      	adds	r7, #56	; 0x38
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40012c00 	.word	0x40012c00
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000800 	.word	0x48000800
 8001a88:	40000400 	.word	0x40000400

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_UART_MspInit+0x7c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d128      	bne.n	8001b00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0x80>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_UART_MspInit+0x80>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_UART_MspInit+0x80>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_UART_MspInit+0x80>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_UART_MspInit+0x80>)
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_UART_MspInit+0x80>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aee:	2307      	movs	r3, #7
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f000 fb24 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40021000 	.word	0x40021000

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler+0x4>

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5c:	f000 f99e 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	interrupt_time = HAL_GetTick();
 8001b68:	f000 f9ac 	bl	8001ec4 <HAL_GetTick>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <EXTI1_IRQHandler+0x44>)
 8001b70:	6013      	str	r3, [r2, #0]
	if((interrupt_time - last_interrupt) > 10)  // Debounce for 10ms
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <EXTI1_IRQHandler+0x44>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <EXTI1_IRQHandler+0x48>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d90d      	bls.n	8001b9c <EXTI1_IRQHandler+0x38>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 8001b80:	2102      	movs	r1, #2
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <EXTI1_IRQHandler+0x4c>)
 8001b84:	f000 fc52 	bl	800242c <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <EXTI1_IRQHandler+0x30>
		{
			ON_BUTTON = 1;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <EXTI1_IRQHandler+0x50>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
		}
		last_interrupt = interrupt_time;
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <EXTI1_IRQHandler+0x44>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <EXTI1_IRQHandler+0x48>)
 8001b9a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f000 fc75 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200000a0 	.word	0x200000a0
 8001bac:	2000009c 	.word	0x2000009c
 8001bb0:	48000800 	.word	0x48000800
 8001bb4:	2000027d 	.word	0x2000027d

08001bb8 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and touch sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
	interrupt_time = HAL_GetTick();
 8001bbc:	f000 f982 	bl	8001ec4 <HAL_GetTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <EXTI2_TSC_IRQHandler+0x44>)
 8001bc4:	6013      	str	r3, [r2, #0]
	if((interrupt_time - last_interrupt) > 10)  // Debounce for 10ms
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <EXTI2_TSC_IRQHandler+0x44>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <EXTI2_TSC_IRQHandler+0x48>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b0a      	cmp	r3, #10
 8001bd2:	d90d      	bls.n	8001bf0 <EXTI2_TSC_IRQHandler+0x38>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1)
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	480b      	ldr	r0, [pc, #44]	; (8001c04 <EXTI2_TSC_IRQHandler+0x4c>)
 8001bd8:	f000 fc28 	bl	800242c <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <EXTI2_TSC_IRQHandler+0x30>
		{
			OFF_BUTTON = 1;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <EXTI2_TSC_IRQHandler+0x50>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
		}
		last_interrupt = interrupt_time;
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <EXTI2_TSC_IRQHandler+0x44>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <EXTI2_TSC_IRQHandler+0x48>)
 8001bee:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bf0:	2004      	movs	r0, #4
 8001bf2:	f000 fc4b 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200000a0 	.word	0x200000a0
 8001c00:	2000009c 	.word	0x2000009c
 8001c04:	48000800 	.word	0x48000800
 8001c08:	2000027c 	.word	0x2000027c

08001c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	return 1;
 8001c10:	2301      	movs	r3, #1
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_kill>:

int _kill(int pid, int sig)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c26:	f003 f997 	bl	8004f58 <__errno>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2216      	movs	r2, #22
 8001c2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_exit>:

void _exit (int status)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffe7 	bl	8001c1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c4e:	e7fe      	b.n	8001c4e <_exit+0x12>

08001c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00a      	b.n	8001c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c62:	f3af 8000 	nop.w
 8001c66:	4601      	mov	r1, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf0      	blt.n	8001c62 <_read+0x12>
	}

return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e009      	b.n	8001cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf1      	blt.n	8001c9c <_write+0x12>
	}
	return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_isatty>:

int _isatty(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f003 f8fc 	bl	8004f58 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20003000 	.word	0x20003000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	200000a4 	.word	0x200000a4
 8001d94:	20000298 	.word	0x20000298

08001d98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc0:	480d      	ldr	r0, [pc, #52]	; (8001df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dc2:	490e      	ldr	r1, [pc, #56]	; (8001dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <LoopForever+0xe>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd8:	4c0b      	ldr	r4, [pc, #44]	; (8001e08 <LoopForever+0x16>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001de6:	f7ff ffd7 	bl	8001d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f003 f8cd 	bl	8004f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dee:	f7ff f869 	bl	8000ec4 <main>

08001df2 <LoopForever>:

LoopForever:
    b LoopForever
 8001df2:	e7fe      	b.n	8001df2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001df4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e00:	080063b0 	.word	0x080063b0
  ldr r2, =_sbss
 8001e04:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e08:	20000294 	.word	0x20000294

08001e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC1_2_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_Init+0x28>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_Init+0x28>)
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f94f 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff fce6 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000

08001e3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f967 	bl	800212e <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f92f 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000014 	.word	0x20000014
 8001e98:	20000010 	.word	0x20000010

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x24>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_IncTick+0x24>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000014 	.word	0x20000014
 8001ec0:	20000280 	.word	0x20000280

08001ec4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000280 	.word	0x20000280

08001edc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000014 	.word	0x20000014

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff29 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff3e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff8e 	bl	8002018 <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff31 	bl	8001f88 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002156:	e14e      	b.n	80023f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8140 	beq.w	80023f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d00b      	beq.n	8002190 <HAL_GPIO_Init+0x48>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d007      	beq.n	8002190 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002184:	2b11      	cmp	r3, #17
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b12      	cmp	r3, #18
 800218e:	d130      	bne.n	80021f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c6:	2201      	movs	r2, #1
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 0201 	and.w	r2, r3, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0xea>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b12      	cmp	r3, #18
 8002230:	d123      	bne.n	800227a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	6939      	ldr	r1, [r7, #16]
 8002276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 809a 	beq.w	80023f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022bc:	4b55      	ldr	r3, [pc, #340]	; (8002414 <HAL_GPIO_Init+0x2cc>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a54      	ldr	r2, [pc, #336]	; (8002414 <HAL_GPIO_Init+0x2cc>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b52      	ldr	r3, [pc, #328]	; (8002414 <HAL_GPIO_Init+0x2cc>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d4:	4a50      	ldr	r2, [pc, #320]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022fe:	d013      	beq.n	8002328 <HAL_GPIO_Init+0x1e0>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_GPIO_Init+0x2d4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00d      	beq.n	8002324 <HAL_GPIO_Init+0x1dc>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a45      	ldr	r2, [pc, #276]	; (8002420 <HAL_GPIO_Init+0x2d8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <HAL_GPIO_Init+0x1d8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a44      	ldr	r2, [pc, #272]	; (8002424 <HAL_GPIO_Init+0x2dc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_GPIO_Init+0x1d4>
 8002318:	2303      	movs	r3, #3
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x1e2>
 800231c:	2305      	movs	r3, #5
 800231e:	e004      	b.n	800232a <HAL_GPIO_Init+0x1e2>
 8002320:	2302      	movs	r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x1e2>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_GPIO_Init+0x1e2>
 8002328:	2300      	movs	r3, #0
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800233a:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800236c:	4a2e      	ldr	r2, [pc, #184]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002396:	4a24      	ldr	r2, [pc, #144]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	f47f aea9 	bne.w	8002158 <HAL_GPIO_Init+0x10>
  }
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000
 800241c:	48000400 	.word	0x48000400
 8002420:	48000800 	.word	0x48000800
 8002424:	48000c00 	.word	0x48000c00
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e001      	b.n	800244e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
 8002468:	4613      	mov	r3, r2
 800246a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002478:	e002      	b.n	8002480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f806 	bl	80024bc <HAL_GPIO_EXTI_Callback>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e081      	b.n	80025e8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff f9a3 	bl	8001844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2224      	movs	r2, #36	; 0x24
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002522:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002532:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	e006      	b.n	800255a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002558:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d104      	bne.n	800256c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800256a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800258e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	ea42 0103 	orr.w	r1, r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69d9      	ldr	r1, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1a      	ldr	r2, [r3, #32]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	461a      	mov	r2, r3
 80025fc:	460b      	mov	r3, r1
 80025fe:	817b      	strh	r3, [r7, #10]
 8002600:	4613      	mov	r3, r2
 8002602:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	f040 80da 	bne.w	80027c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_I2C_Master_Transmit+0x30>
 800261c:	2302      	movs	r3, #2
 800261e:	e0d3      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1d8>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002628:	f7ff fc4c 	bl	8001ec4 <HAL_GetTick>
 800262c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2319      	movs	r3, #25
 8002634:	2201      	movs	r2, #1
 8002636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f9e6 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0be      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2210      	movs	r2, #16
 8002656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2bff      	cmp	r3, #255	; 0xff
 800267a:	d90e      	bls.n	800269a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	22ff      	movs	r2, #255	; 0xff
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	b2da      	uxtb	r2, r3
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fb48 	bl	8002d28 <I2C_TransferConfig>
 8002698:	e06c      	b.n	8002774 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	8979      	ldrh	r1, [r7, #10]
 80026ac:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fb37 	bl	8002d28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80026ba:	e05b      	b.n	8002774 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	6a39      	ldr	r1, [r7, #32]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f9e3 	bl	8002a8c <I2C_WaitOnTXISFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e07b      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d034      	beq.n	8002774 <HAL_I2C_Master_Transmit+0x184>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d130      	bne.n	8002774 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2200      	movs	r2, #0
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f975 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e04d      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d90e      	bls.n	8002754 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	22ff      	movs	r2, #255	; 0xff
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	b2da      	uxtb	r2, r3
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 faeb 	bl	8002d28 <I2C_TransferConfig>
 8002752:	e00f      	b.n	8002774 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	b2da      	uxtb	r2, r3
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fada 	bl	8002d28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d19e      	bne.n	80026bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	6a39      	ldr	r1, [r7, #32]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f9c2 	bl	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e01a      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2220      	movs	r2, #32
 8002798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	80002000 	.word	0x80002000
 80027d4:	fe00e800 	.word	0xfe00e800

080027d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	817b      	strh	r3, [r7, #10]
 80027e8:	4613      	mov	r3, r2
 80027ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	f040 80db 	bne.w	80029b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2C_Master_Receive+0x30>
 8002804:	2302      	movs	r3, #2
 8002806:	e0d4      	b.n	80029b2 <HAL_I2C_Master_Receive+0x1da>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002810:	f7ff fb58 	bl	8001ec4 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2319      	movs	r3, #25
 800281c:	2201      	movs	r2, #1
 800281e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8f2 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0bf      	b.n	80029b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2222      	movs	r2, #34	; 0x22
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2210      	movs	r2, #16
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	2bff      	cmp	r3, #255	; 0xff
 8002862:	d90e      	bls.n	8002882 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	b2da      	uxtb	r2, r3
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	4b52      	ldr	r3, [pc, #328]	; (80029bc <HAL_I2C_Master_Receive+0x1e4>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa54 	bl	8002d28 <I2C_TransferConfig>
 8002880:	e06d      	b.n	800295e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	b2da      	uxtb	r2, r3
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_I2C_Master_Receive+0x1e4>)
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fa43 	bl	8002d28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80028a2:	e05c      	b.n	800295e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	6a39      	ldr	r1, [r7, #32]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f96b 	bl	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e07c      	b.n	80029b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d034      	beq.n	800295e <HAL_I2C_Master_Receive+0x186>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d130      	bne.n	800295e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2200      	movs	r2, #0
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f880 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e04d      	b.n	80029b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	2bff      	cmp	r3, #255	; 0xff
 800291e:	d90e      	bls.n	800293e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	22ff      	movs	r2, #255	; 0xff
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	b2da      	uxtb	r2, r3
 800292c:	8979      	ldrh	r1, [r7, #10]
 800292e:	2300      	movs	r3, #0
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f9f6 	bl	8002d28 <I2C_TransferConfig>
 800293c:	e00f      	b.n	800295e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	b2da      	uxtb	r2, r3
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f9e5 	bl	8002d28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d19d      	bne.n	80028a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	6a39      	ldr	r1, [r7, #32]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f8cd 	bl	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e01a      	b.n	80029b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2220      	movs	r2, #32
 8002982:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_I2C_Master_Receive+0x1e8>)
 8002990:	400b      	ands	r3, r1
 8002992:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	80002400 	.word	0x80002400
 80029c0:	fe00e800 	.word	0xfe00e800

080029c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d103      	bne.n	80029e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d007      	beq.n	8002a00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	619a      	str	r2, [r3, #24]
  }
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1c:	e022      	b.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d01e      	beq.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7ff fa4d 	bl	8001ec4 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d113      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e00f      	b.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d0cd      	beq.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a98:	e02c      	b.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8dc 	bl	8002c5c <I2C_IsAcknowledgeFailed>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02a      	b.n	8002b04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d01e      	beq.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7ff fa05 	bl	8001ec4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d113      	bne.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e007      	b.n	8002b04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d1cb      	bne.n	8002a9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b18:	e028      	b.n	8002b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f89c 	bl	8002c5c <I2C_IsAcknowledgeFailed>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e026      	b.n	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7ff f9c9 	bl	8001ec4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d113      	bne.n	8002b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e007      	b.n	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d1cf      	bne.n	8002b1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b90:	e055      	b.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f860 	bl	8002c5c <I2C_IsAcknowledgeFailed>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e053      	b.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d129      	bne.n	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d105      	bne.n	8002bce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e03f      	b.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002be2:	400b      	ands	r3, r1
 8002be4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e022      	b.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7ff f95c 	bl	8001ec4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e007      	b.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d1a2      	bne.n	8002b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	fe00e800 	.word	0xfe00e800

08002c5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d151      	bne.n	8002d1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c76:	e022      	b.n	8002cbe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d01e      	beq.n	8002cbe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7ff f920 	bl	8001ec4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <I2C_IsAcknowledgeFailed+0x3a>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d113      	bne.n	8002cbe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e02e      	b.n	8002d1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d1d5      	bne.n	8002c78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff fe71 	bl	80029c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <I2C_IsAcknowledgeFailed+0xc8>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f043 0204 	orr.w	r2, r3, #4
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fe00e800 	.word	0xfe00e800

08002d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	4613      	mov	r3, r2
 8002d38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	0d5b      	lsrs	r3, r3, #21
 8002d44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <I2C_TransferConfig+0x58>)
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	ea02 0103 	and.w	r1, r2, r3
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d58:	7a7b      	ldrb	r3, [r7, #9]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	03ff63ff 	.word	0x03ff63ff

08002d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d138      	bne.n	8002e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e032      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d139      	bne.n	8002ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e033      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	; 0x24
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f000 bef4 	b.w	8003cb6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 816a 	beq.w	80031b2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ede:	4bb3      	ldr	r3, [pc, #716]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eea:	4bb0      	ldr	r3, [pc, #704]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d159      	bne.n	8002faa <HAL_RCC_OscConfig+0xf6>
 8002ef6:	4bad      	ldr	r3, [pc, #692]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f02:	d152      	bne.n	8002faa <HAL_RCC_OscConfig+0xf6>
 8002f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_OscConfig+0x82>
 8002f30:	4b9e      	ldr	r3, [pc, #632]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	e015      	b.n	8002f62 <HAL_RCC_OscConfig+0xae>
 8002f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002f5e:	4b93      	ldr	r3, [pc, #588]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002f6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002f6e:	fa92 f2a2 	rbit	r2, r2
 8002f72:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002f76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002f7a:	fab2 f282 	clz	r2, r2
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	f042 0220 	orr.w	r2, r2, #32
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	f002 021f 	and.w	r2, r2, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 810c 	beq.w	80031b0 <HAL_RCC_OscConfig+0x2fc>
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 8106 	bne.w	80031b0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f000 be86 	b.w	8003cb6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x110>
 8002fb6:	4b7d      	ldr	r3, [pc, #500]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7c      	ldr	r2, [pc, #496]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e030      	b.n	8003026 <HAL_RCC_OscConfig+0x172>
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x134>
 8002fce:	4b77      	ldr	r3, [pc, #476]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a76      	ldr	r2, [pc, #472]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b74      	ldr	r3, [pc, #464]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01e      	b.n	8003026 <HAL_RCC_OscConfig+0x172>
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x15a>
 8002ff4:	4b6d      	ldr	r3, [pc, #436]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6c      	ldr	r2, [pc, #432]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8002ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e00b      	b.n	8003026 <HAL_RCC_OscConfig+0x172>
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a66      	ldr	r2, [pc, #408]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b64      	ldr	r3, [pc, #400]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003026:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f023 020f 	bic.w	r2, r3, #15
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	495d      	ldr	r1, [pc, #372]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d059      	beq.n	80030f8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe ff3e 	bl	8001ec4 <HAL_GetTick>
 8003048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304e:	f7fe ff39 	bl	8001ec4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d902      	bls.n	8003064 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	f000 be29 	b.w	8003cb6 <HAL_RCC_OscConfig+0xe02>
 8003064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003068:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003078:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_RCC_OscConfig+0x1e2>
 8003090:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x20e>
 8003096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800309a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80030be:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80030ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80030ce:	fa92 f2a2 	rbit	r2, r2
 80030d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80030d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ab      	beq.n	800304e <HAL_RCC_OscConfig+0x19a>
 80030f6:	e05c      	b.n	80031b2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fee4 	bl	8001ec4 <HAL_GetTick>
 80030fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003102:	f7fe fedf 	bl	8001ec4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d902      	bls.n	8003118 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	f000 bdcf 	b.w	8003cb6 <HAL_RCC_OscConfig+0xe02>
 8003118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800311c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800312c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_RCC_OscConfig+0x296>
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	e015      	b.n	8003176 <HAL_RCC_OscConfig+0x2c2>
 800314a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800315e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003162:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003166:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCC_OscConfig+0x2f8>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800317a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800317e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003182:	fa92 f2a2 	rbit	r2, r2
 8003186:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800318a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800318e:	fab2 f282 	clz	r2, r2
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f042 0220 	orr.w	r2, r2, #32
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f002 021f 	and.w	r2, r2, #31
 800319e:	2101      	movs	r1, #1
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ab      	bne.n	8003102 <HAL_RCC_OscConfig+0x24e>
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_OscConfig+0x2fe>
 80031ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 816f 	beq.w	80034a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031c2:	4bd0      	ldr	r3, [pc, #832]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031ce:	4bcd      	ldr	r3, [pc, #820]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d16c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x400>
 80031da:	4bca      	ldr	r3, [pc, #808]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d166      	bne.n	80032b4 <HAL_RCC_OscConfig+0x400>
 80031e6:	2302      	movs	r3, #2
 80031e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80031f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d102      	bne.n	8003216 <HAL_RCC_OscConfig+0x362>
 8003210:	4bbc      	ldr	r3, [pc, #752]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	e013      	b.n	800323e <HAL_RCC_OscConfig+0x38a>
 8003216:	2302      	movs	r3, #2
 8003218:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003228:	2302      	movs	r3, #2
 800322a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800322e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800323a:	4bb2      	ldr	r3, [pc, #712]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2202      	movs	r2, #2
 8003240:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003244:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003248:	fa92 f2a2 	rbit	r2, r2
 800324c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003250:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0220 	orr.w	r2, r2, #32
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_RCC_OscConfig+0x3cc>
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d002      	beq.n	8003280 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f000 bd1b 	b.w	8003cb6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4ba0      	ldr	r3, [pc, #640]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	21f8      	movs	r1, #248	; 0xf8
 8003290:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003298:	fa91 f1a1 	rbit	r1, r1
 800329c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80032a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80032a4:	fab1 f181 	clz	r1, r1
 80032a8:	b2c9      	uxtb	r1, r1
 80032aa:	408b      	lsls	r3, r1
 80032ac:	4995      	ldr	r1, [pc, #596]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	e0f5      	b.n	80034a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8085 	beq.w	80033ca <HAL_RCC_OscConfig+0x516>
 80032c0:	2301      	movs	r3, #1
 80032c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80032d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	461a      	mov	r2, r3
 80032e8:	2301      	movs	r3, #1
 80032ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fdea 	bl	8001ec4 <HAL_GetTick>
 80032f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe fde5 	bl	8001ec4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d902      	bls.n	800330c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	f000 bcd5 	b.w	8003cb6 <HAL_RCC_OscConfig+0xe02>
 800330c:	2302      	movs	r3, #2
 800330e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800331e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_RCC_OscConfig+0x488>
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	e013      	b.n	8003364 <HAL_RCC_OscConfig+0x4b0>
 800333c:	2302      	movs	r3, #2
 800333e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003354:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2202      	movs	r2, #2
 8003366:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800336a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800336e:	fa92 f2a2 	rbit	r2, r2
 8003372:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003376:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800337a:	fab2 f282 	clz	r2, r2
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f042 0220 	orr.w	r2, r2, #32
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	f002 021f 	and.w	r2, r2, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0af      	beq.n	80032f6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	21f8      	movs	r1, #248	; 0xf8
 80033a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80033ae:	fa91 f1a1 	rbit	r1, r1
 80033b2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80033b6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80033ba:	fab1 f181 	clz	r1, r1
 80033be:	b2c9      	uxtb	r1, r1
 80033c0:	408b      	lsls	r3, r1
 80033c2:	4950      	ldr	r1, [pc, #320]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
 80033c8:	e06a      	b.n	80034a0 <HAL_RCC_OscConfig+0x5ec>
 80033ca:	2301      	movs	r3, #1
 80033cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80033dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	461a      	mov	r2, r3
 80033f2:	2300      	movs	r3, #0
 80033f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe fd65 	bl	8001ec4 <HAL_GetTick>
 80033fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003400:	f7fe fd60 	bl	8001ec4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d902      	bls.n	8003416 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	f000 bc50 	b.w	8003cb6 <HAL_RCC_OscConfig+0xe02>
 8003416:	2302      	movs	r3, #2
 8003418:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d102      	bne.n	8003446 <HAL_RCC_OscConfig+0x592>
 8003440:	4b30      	ldr	r3, [pc, #192]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	e013      	b.n	800346e <HAL_RCC_OscConfig+0x5ba>
 8003446:	2302      	movs	r3, #2
 8003448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800345e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_RCC_OscConfig+0x650>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2202      	movs	r2, #2
 8003470:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003474:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003478:	fa92 f2a2 	rbit	r2, r2
 800347c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003480:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f042 0220 	orr.w	r2, r2, #32
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1af      	bne.n	8003400 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80da 	beq.w	8003664 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d069      	beq.n	800358e <HAL_RCC_OscConfig+0x6da>
 80034ba:	2301      	movs	r3, #1
 80034bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80034cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_OscConfig+0x654>)
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	461a      	mov	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fcee 	bl	8001ec4 <HAL_GetTick>
 80034e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ec:	e00e      	b.n	800350c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe fce9 	bl	8001ec4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d906      	bls.n	800350c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e3d9      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	10908120 	.word	0x10908120
 800350c:	2302      	movs	r3, #2
 800350e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800351e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003522:	2202      	movs	r2, #2
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800353a:	2202      	movs	r2, #2
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	fa93 f2a3 	rbit	r2, r3
 8003548:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800354c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	4ba5      	ldr	r3, [pc, #660]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003552:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003556:	2102      	movs	r1, #2
 8003558:	6019      	str	r1, [r3, #0]
 800355a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f1a3 	rbit	r1, r3
 8003564:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003568:	6019      	str	r1, [r3, #0]
  return result;
 800356a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0b0      	beq.n	80034ee <HAL_RCC_OscConfig+0x63a>
 800358c:	e06a      	b.n	8003664 <HAL_RCC_OscConfig+0x7b0>
 800358e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80035a4:	601a      	str	r2, [r3, #0]
  return result;
 80035a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80035aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b8c      	ldr	r3, [pc, #560]	; (80037e8 <HAL_RCC_OscConfig+0x934>)
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	461a      	mov	r2, r3
 80035bc:	2300      	movs	r3, #0
 80035be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fe fc80 	bl	8001ec4 <HAL_GetTick>
 80035c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	e009      	b.n	80035de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fe fc7b 	bl	8001ec4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e36b      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
 80035de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80035e2:	2202      	movs	r2, #2
 80035e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f2a3 	rbit	r2, r3
 80035f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80035fa:	2202      	movs	r2, #2
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	fa93 f2a3 	rbit	r2, r3
 8003608:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003612:	2202      	movs	r2, #2
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fa93 f2a3 	rbit	r2, r3
 8003620:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003624:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003626:	4b6f      	ldr	r3, [pc, #444]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800362e:	2102      	movs	r1, #2
 8003630:	6019      	str	r1, [r3, #0]
 8003632:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fa93 f1a3 	rbit	r1, r3
 800363c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003640:	6019      	str	r1, [r3, #0]
  return result;
 8003642:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1b2      	bne.n	80035ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8158 	beq.w	8003924 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b5a      	ldr	r3, [pc, #360]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d112      	bne.n	80036ac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	4b57      	ldr	r3, [pc, #348]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4a56      	ldr	r2, [pc, #344]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	61d3      	str	r3, [r2, #28]
 8003692:	4b54      	ldr	r3, [pc, #336]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	f107 0308 	add.w	r3, r7, #8
 80036a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	4b4f      	ldr	r3, [pc, #316]	; (80037ec <HAL_RCC_OscConfig+0x938>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11a      	bne.n	80036ee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b8:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <HAL_RCC_OscConfig+0x938>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4b      	ldr	r2, [pc, #300]	; (80037ec <HAL_RCC_OscConfig+0x938>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c4:	f7fe fbfe 	bl	8001ec4 <HAL_GetTick>
 80036c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	e009      	b.n	80036e2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fe fbf9 	bl	8001ec4 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e2e9      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b42      	ldr	r3, [pc, #264]	; (80037ec <HAL_RCC_OscConfig+0x938>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ef      	beq.n	80036ce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x852>
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6213      	str	r3, [r2, #32]
 8003704:	e02f      	b.n	8003766 <HAL_RCC_OscConfig+0x8b2>
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x876>
 8003710:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a33      	ldr	r2, [pc, #204]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a30      	ldr	r2, [pc, #192]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003722:	f023 0304 	bic.w	r3, r3, #4
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	e01d      	b.n	8003766 <HAL_RCC_OscConfig+0x8b2>
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b05      	cmp	r3, #5
 8003732:	d10c      	bne.n	800374e <HAL_RCC_OscConfig+0x89a>
 8003734:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4a2a      	ldr	r2, [pc, #168]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	6213      	str	r3, [r2, #32]
 8003740:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	e00b      	b.n	8003766 <HAL_RCC_OscConfig+0x8b2>
 800374e:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	6213      	str	r3, [r2, #32]
 800375a:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d06b      	beq.n	8003848 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003770:	f7fe fba8 	bl	8001ec4 <HAL_GetTick>
 8003774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	e00b      	b.n	8003792 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe fba3 	bl	8001ec4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e291      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
 8003792:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003796:	2202      	movs	r2, #2
 8003798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037ae:	2202      	movs	r2, #2
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	fa93 f2a3 	rbit	r2, r3
 80037bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80037c0:	601a      	str	r2, [r3, #0]
  return result;
 80037c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80037c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_OscConfig+0x93c>
 80037dc:	4b01      	ldr	r3, [pc, #4]	; (80037e4 <HAL_RCC_OscConfig+0x930>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	e014      	b.n	800380c <HAL_RCC_OscConfig+0x958>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	10908120 	.word	0x10908120
 80037ec:	40007000 	.word	0x40007000
 80037f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80037f4:	2202      	movs	r2, #2
 80037f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4bbb      	ldr	r3, [pc, #748]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003810:	2102      	movs	r1, #2
 8003812:	6011      	str	r1, [r2, #0]
 8003814:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	fa92 f1a2 	rbit	r1, r2
 800381e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003822:	6011      	str	r1, [r2, #0]
  return result;
 8003824:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d099      	beq.n	800377a <HAL_RCC_OscConfig+0x8c6>
 8003846:	e063      	b.n	8003910 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fe fb3c 	bl	8001ec4 <HAL_GetTick>
 800384c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003850:	e00b      	b.n	800386a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fb37 	bl	8001ec4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e225      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
 800386a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800386e:	2202      	movs	r2, #2
 8003870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	fa93 f2a3 	rbit	r2, r3
 800387c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003886:	2202      	movs	r2, #2
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	fa93 f2a3 	rbit	r2, r3
 8003894:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003898:	601a      	str	r2, [r3, #0]
  return result;
 800389a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800389e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f043 0302 	orr.w	r3, r3, #2
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d102      	bne.n	80038ba <HAL_RCC_OscConfig+0xa06>
 80038b4:	4b90      	ldr	r3, [pc, #576]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	e00d      	b.n	80038d6 <HAL_RCC_OscConfig+0xa22>
 80038ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038be:	2202      	movs	r2, #2
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80038da:	2102      	movs	r1, #2
 80038dc:	6011      	str	r1, [r2, #0]
 80038de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	fa92 f1a2 	rbit	r1, r2
 80038e8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80038ec:	6011      	str	r1, [r2, #0]
  return result;
 80038ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	fab2 f282 	clz	r2, r2
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	f002 021f 	and.w	r2, r2, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f202 	lsl.w	r2, r1, r2
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1a0      	bne.n	8003852 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003910:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003918:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4a76      	ldr	r2, [pc, #472]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 800391e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003922:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 81c2 	beq.w	8003cb4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003930:	4b71      	ldr	r3, [pc, #452]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	f000 819c 	beq.w	8003c76 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2b02      	cmp	r3, #2
 8003946:	f040 8114 	bne.w	8003b72 <HAL_RCC_OscConfig+0xcbe>
 800394a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800394e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003962:	601a      	str	r2, [r3, #0]
  return result;
 8003964:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003968:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003974:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	461a      	mov	r2, r3
 800397c:	2300      	movs	r3, #0
 800397e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe faa0 	bl	8001ec4 <HAL_GetTick>
 8003984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003988:	e009      	b.n	800399e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398a:	f7fe fa9b 	bl	8001ec4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e18b      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
 800399e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fa93 f2a3 	rbit	r2, r3
 80039b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80039b6:	601a      	str	r2, [r3, #0]
  return result;
 80039b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80039bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_OscConfig+0xb24>
 80039d2:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e01b      	b.n	8003a10 <HAL_RCC_OscConfig+0xb5c>
 80039d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fa93 f2a3 	rbit	r2, r3
 80039ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	fa93 f2a3 	rbit	r2, r3
 8003a06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a18:	6011      	str	r1, [r2, #0]
 8003a1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	fa92 f1a2 	rbit	r1, r2
 8003a24:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003a28:	6011      	str	r1, [r2, #0]
  return result;
 8003a2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	fab2 f282 	clz	r2, r2
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	f042 0220 	orr.w	r2, r2, #32
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f002 021f 	and.w	r2, r2, #31
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d19e      	bne.n	800398a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a5a:	1d3b      	adds	r3, r7, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	4925      	ldr	r1, [pc, #148]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
 8003a68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	fa93 f2a3 	rbit	r2, r3
 8003a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a80:	601a      	str	r2, [r3, #0]
  return result;
 8003a82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a86:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fa11 	bl	8001ec4 <HAL_GetTick>
 8003aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa6:	e009      	b.n	8003abc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe fa0c 	bl	8001ec4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0fc      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
 8003abc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ad4:	601a      	str	r2, [r3, #0]
  return result;
 8003ad6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ada:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0xc48>
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <HAL_RCC_OscConfig+0xc44>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	e01e      	b.n	8003b34 <HAL_RCC_OscConfig+0xc80>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	fa93 f2a3 	rbit	r2, r3
 8003b10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <HAL_RCC_OscConfig+0xe0c>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b3c:	6011      	str	r1, [r2, #0]
 8003b3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	fa92 f1a2 	rbit	r1, r2
 8003b48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b4c:	6011      	str	r1, [r2, #0]
  return result;
 8003b4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f002 021f 	and.w	r2, r2, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d09b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xbf4>
 8003b70:	e0a0      	b.n	8003cb4 <HAL_RCC_OscConfig+0xe00>
 8003b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	fa93 f2a3 	rbit	r2, r3
 8003b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b8a:	601a      	str	r2, [r3, #0]
  return result;
 8003b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f98c 	bl	8001ec4 <HAL_GetTick>
 8003bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb0:	e009      	b.n	8003bc6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe f987 	bl	8001ec4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e077      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
 8003bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	fa93 f2a3 	rbit	r2, r3
 8003bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bde:	601a      	str	r2, [r3, #0]
  return result;
 8003be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCC_OscConfig+0xd4c>
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_RCC_OscConfig+0xe0c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	e01b      	b.n	8003c38 <HAL_RCC_OscConfig+0xd84>
 8003c00:	f107 0320 	add.w	r3, r7, #32
 8003c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f107 0320 	add.w	r3, r7, #32
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f107 0318 	add.w	r3, r7, #24
 8003c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f107 0318 	add.w	r3, r7, #24
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	fa93 f2a3 	rbit	r2, r3
 8003c2e:	f107 0314 	add.w	r3, r7, #20
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_RCC_OscConfig+0xe0c>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f107 0210 	add.w	r2, r7, #16
 8003c3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	f107 0210 	add.w	r2, r7, #16
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	fa92 f1a2 	rbit	r1, r2
 8003c4c:	f107 020c 	add.w	r2, r7, #12
 8003c50:	6011      	str	r1, [r2, #0]
  return result;
 8003c52:	f107 020c 	add.w	r2, r7, #12
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	fab2 f282 	clz	r2, r2
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f042 0220 	orr.w	r2, r2, #32
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f002 021f 	and.w	r2, r2, #31
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d19e      	bne.n	8003bb2 <HAL_RCC_OscConfig+0xcfe>
 8003c74:	e01e      	b.n	8003cb4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e018      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_RCC_OscConfig+0xe0c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d108      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000

08003cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b09e      	sub	sp, #120	; 0x78
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e162      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b90      	ldr	r3, [pc, #576]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b8d      	ldr	r3, [pc, #564]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	498b      	ldr	r1, [pc, #556]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b89      	ldr	r3, [pc, #548]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e14a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b82      	ldr	r3, [pc, #520]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	497f      	ldr	r1, [pc, #508]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80dc 	beq.w	8003ef0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d13c      	bne.n	8003dba <HAL_RCC_ClockConfig+0xf6>
 8003d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xa6>
 8003d64:	4b6f      	ldr	r3, [pc, #444]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	e00f      	b.n	8003d8a <HAL_RCC_ClockConfig+0xc6>
 8003d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	667b      	str	r3, [r7, #100]	; 0x64
 8003d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d86:	4b67      	ldr	r3, [pc, #412]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d92:	fa92 f2a2 	rbit	r2, r2
 8003d96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f042 0220 	orr.w	r2, r2, #32
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f002 021f 	and.w	r2, r2, #31
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d17b      	bne.n	8003eae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0f3      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d13c      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x178>
 8003dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d102      	bne.n	8003dec <HAL_RCC_ClockConfig+0x128>
 8003de6:	4b4f      	ldr	r3, [pc, #316]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	e00f      	b.n	8003e0c <HAL_RCC_ClockConfig+0x148>
 8003dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	fa93 f3a3 	rbit	r3, r3
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8003e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e08:	4b46      	ldr	r3, [pc, #280]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e10:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e14:	fa92 f2a2 	rbit	r2, r2
 8003e18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1c:	fab2 f282 	clz	r2, r2
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	f042 0220 	orr.w	r2, r2, #32
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f002 021f 	and.w	r2, r2, #31
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d13a      	bne.n	8003eae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b2      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x2de>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d102      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x1a0>
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	e00d      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1bc>
 8003e64:	2302      	movs	r3, #2
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	2302      	movs	r3, #2
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2202      	movs	r2, #2
 8003e82:	61ba      	str	r2, [r7, #24]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	fa92 f2a2 	rbit	r2, r2
 8003e8a:	617a      	str	r2, [r7, #20]
  return result;
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	fab2 f282 	clz	r2, r2
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	f002 021f 	and.w	r2, r2, #31
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e079      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	491a      	ldr	r1, [pc, #104]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec0:	f7fe f800 	bl	8001ec4 <HAL_GetTick>
 8003ec4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fd fffc 	bl	8001ec4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e061      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d214      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 0207 	bic.w	r2, r3, #7
 8003f06:	4906      	ldr	r1, [pc, #24]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e040      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x2de>
 8003f20:	40022000 	.word	0x40022000
 8003f24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <HAL_RCC_ClockConfig+0x2e8>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	491a      	ldr	r1, [pc, #104]	; (8003fac <HAL_RCC_ClockConfig+0x2e8>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <HAL_RCC_ClockConfig+0x2e8>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4912      	ldr	r1, [pc, #72]	; (8003fac <HAL_RCC_ClockConfig+0x2e8>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f66:	f000 f829 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <HAL_RCC_ClockConfig+0x2e8>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f74:	22f0      	movs	r2, #240	; 0xf0
 8003f76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	fa92 f2a2 	rbit	r2, r2
 8003f7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	fab2 f282 	clz	r2, r2
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	40d3      	lsrs	r3, r2
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x2ec>)
 8003f8c:	5cd3      	ldrb	r3, [r2, r3]
 8003f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <HAL_RCC_ClockConfig+0x2f0>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCC_ClockConfig+0x2f4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd ff4e 	bl	8001e3c <HAL_InitTick>
  
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3778      	adds	r7, #120	; 0x78
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0800629c 	.word	0x0800629c
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	20000010 	.word	0x20000010

08003fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b08b      	sub	sp, #44	; 0x2c
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003fd6:	4b29      	ldr	r3, [pc, #164]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d002      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x30>
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x36>
 8003fea:	e03c      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fec:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fee:	623b      	str	r3, [r7, #32]
      break;
 8003ff0:	e03c      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ff8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ffc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	fa92 f2a2 	rbit	r2, r2
 8004004:	607a      	str	r2, [r7, #4]
  return result;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	fab2 f282 	clz	r2, r2
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	40d3      	lsrs	r3, r2
 8004010:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004012:	5cd3      	ldrb	r3, [r2, r3]
 8004014:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	220f      	movs	r2, #15
 8004020:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	fa92 f2a2 	rbit	r2, r2
 8004028:	60fa      	str	r2, [r7, #12]
  return result;
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	fab2 f282 	clz	r2, r2
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	40d3      	lsrs	r3, r2
 8004034:	4a14      	ldr	r2, [pc, #80]	; (8004088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004044:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	fbb2 f2f3 	udiv	r2, r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	e004      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <HAL_RCC_GetSysClockFreq+0xd0>)
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	623b      	str	r3, [r7, #32]
      break;
 8004064:	e002      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004068:	623b      	str	r3, [r7, #32]
      break;
 800406a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406c:	6a3b      	ldr	r3, [r7, #32]
}
 800406e:	4618      	mov	r0, r3
 8004070:	372c      	adds	r7, #44	; 0x2c
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	007a1200 	.word	0x007a1200
 8004084:	080062b4 	.word	0x080062b4
 8004088:	080062c4 	.word	0x080062c4
 800408c:	003d0900 	.word	0x003d0900

08004090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000000c 	.word	0x2000000c

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80040ae:	f7ff ffef 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b2:	4601      	mov	r1, r0
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	fa92 f2a2 	rbit	r2, r2
 80040c8:	603a      	str	r2, [r7, #0]
  return result;
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	40d3      	lsrs	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40021000 	.word	0x40021000
 80040e8:	080062ac 	.word	0x080062ac

080040ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80040f2:	f7ff ffcd 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040f6:	4601      	mov	r1, r0
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004100:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004104:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	fa92 f2a2 	rbit	r2, r2
 800410c:	603a      	str	r2, [r7, #0]
  return result;
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	fab2 f282 	clz	r2, r2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	40d3      	lsrs	r3, r2
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_RCC_GetPCLK2Freq+0x40>)
 800411a:	5cd3      	ldrb	r3, [r2, r3]
 800411c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	080062ac 	.word	0x080062ac

08004130 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b092      	sub	sp, #72	; 0x48
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80cd 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004154:	4b8e      	ldr	r3, [pc, #568]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10e      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b8b      	ldr	r3, [pc, #556]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	4a8a      	ldr	r2, [pc, #552]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	61d3      	str	r3, [r2, #28]
 800416c:	4b88      	ldr	r3, [pc, #544]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b85      	ldr	r3, [pc, #532]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d118      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b82      	ldr	r3, [pc, #520]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a81      	ldr	r2, [pc, #516]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004196:	f7fd fe95 	bl	8001ec4 <HAL_GetTick>
 800419a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	e008      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419e:	f7fd fe91 	bl	8001ec4 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d901      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0ea      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	4b78      	ldr	r3, [pc, #480]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041bc:	4b74      	ldr	r3, [pc, #464]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d07d      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d076      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041da:	4b6d      	ldr	r3, [pc, #436]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	4b66      	ldr	r3, [pc, #408]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	461a      	mov	r2, r3
 8004204:	2301      	movs	r3, #1
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	4b5d      	ldr	r3, [pc, #372]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	461a      	mov	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800422c:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004230:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d045      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fd fe42 	bl	8001ec4 <HAL_GetTick>
 8004240:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004242:	e00a      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fd fe3e 	bl	8001ec4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e095      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800425a:	2302      	movs	r3, #2
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	2302      	movs	r3, #2
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	61fb      	str	r3, [r7, #28]
  return result;
 8004272:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f043 0302 	orr.w	r3, r3, #2
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d102      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004288:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	e007      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800428e:	2302      	movs	r3, #2
 8004290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2202      	movs	r2, #2
 80042a0:	613a      	str	r2, [r7, #16]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	fa92 f2a2 	rbit	r2, r2
 80042a8:	60fa      	str	r2, [r7, #12]
  return result;
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	fab2 f282 	clz	r2, r2
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	f002 021f 	and.w	r2, r2, #31
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0bd      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042c8:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	492e      	ldr	r1, [pc, #184]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d105      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e2:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f023 0203 	bic.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4922      	ldr	r1, [pc, #136]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004308:	4313      	orrs	r3, r2
 800430a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f023 0210 	bic.w	r2, r3, #16
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	491a      	ldr	r1, [pc, #104]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	4313      	orrs	r3, r2
 8004328:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	4913      	ldr	r1, [pc, #76]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004344:	4313      	orrs	r3, r2
 8004346:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	490b      	ldr	r1, [pc, #44]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	4313      	orrs	r3, r2
 8004364:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004380:	4313      	orrs	r3, r2
 8004382:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3748      	adds	r7, #72	; 0x48
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
 8004394:	40007000 	.word	0x40007000
 8004398:	10908100 	.word	0x10908100

0800439c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e097      	b.n	80044e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fd fa9f 	bl	8001908 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80043e0:	f023 0307 	bic.w	r3, r3, #7
 80043e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f000 f907 	bl	8004604 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	4313      	orrs	r3, r2
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800443c:	f023 030c 	bic.w	r3, r3, #12
 8004440:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	4313      	orrs	r3, r2
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	031b      	lsls	r3, r3, #12
 800446c:	4313      	orrs	r3, r2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004482:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	4313      	orrs	r3, r2
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004500:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004508:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004510:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d110      	bne.n	800453a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d102      	bne.n	8004524 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800451e:	7b7b      	ldrb	r3, [r7, #13]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e069      	b.n	80045fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004538:	e031      	b.n	800459e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d110      	bne.n	8004562 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004540:	7bbb      	ldrb	r3, [r7, #14]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d102      	bne.n	800454c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004546:	7b3b      	ldrb	r3, [r7, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d001      	beq.n	8004550 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e055      	b.n	80045fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004560:	e01d      	b.n	800459e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d108      	bne.n	800457a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004568:	7bbb      	ldrb	r3, [r7, #14]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800456e:	7b7b      	ldrb	r3, [r7, #13]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d102      	bne.n	800457a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004574:	7b3b      	ldrb	r3, [r7, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e03e      	b.n	80045fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_TIM_Encoder_Start+0xc4>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d008      	beq.n	80045bc <HAL_TIM_Encoder_Start+0xd4>
 80045aa:	e00f      	b.n	80045cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2201      	movs	r2, #1
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f89d 	bl	80046f4 <TIM_CCxChannelCmd>
      break;
 80045ba:	e016      	b.n	80045ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	2104      	movs	r1, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f895 	bl	80046f4 <TIM_CCxChannelCmd>
      break;
 80045ca:	e00e      	b.n	80045ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2201      	movs	r2, #1
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f88d 	bl	80046f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2201      	movs	r2, #1
 80045e0:	2104      	movs	r1, #4
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f886 	bl	80046f4 <TIM_CCxChannelCmd>
      break;
 80045e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a32      	ldr	r2, [pc, #200]	; (80046e0 <TIM_Base_SetConfig+0xdc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_Base_SetConfig+0x28>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d003      	beq.n	800462c <TIM_Base_SetConfig+0x28>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a2f      	ldr	r2, [pc, #188]	; (80046e4 <TIM_Base_SetConfig+0xe0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <TIM_Base_SetConfig+0xdc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <TIM_Base_SetConfig+0x6a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d00f      	beq.n	800466e <TIM_Base_SetConfig+0x6a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a24      	ldr	r2, [pc, #144]	; (80046e4 <TIM_Base_SetConfig+0xe0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_Base_SetConfig+0x6a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <TIM_Base_SetConfig+0xe4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0x6a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <TIM_Base_SetConfig+0xe8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0x6a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <TIM_Base_SetConfig+0xec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d108      	bne.n	8004680 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <TIM_Base_SetConfig+0xdc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0xc0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <TIM_Base_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0xc0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <TIM_Base_SetConfig+0xe8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0xc0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <TIM_Base_SetConfig+0xec>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d103      	bne.n	80046cc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	615a      	str	r2, [r3, #20]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400
 80046f0:	40014800 	.word	0x40014800

080046f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2201      	movs	r2, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a1a      	ldr	r2, [r3, #32]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	43db      	mvns	r3, r3
 8004716:	401a      	ands	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004754:	2302      	movs	r3, #2
 8004756:	e054      	b.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a24      	ldr	r2, [pc, #144]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004788:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a17      	ldr	r2, [pc, #92]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d009      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a11      	ldr	r2, [pc, #68]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10c      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	40014000 	.word	0x40014000

0800481c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e040      	b.n	80048b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fd f924 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8c0 	bl	80049e0 <UART_SetConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e022      	b.n	80048b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9ea 	bl	8004c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa71 	bl	8004d90 <UART_CheckIdleState>
 80048ae:	4603      	mov	r3, r0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	f040 8082 	bne.w	80049d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_UART_Transmit+0x26>
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07a      	b.n	80049d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_UART_Transmit+0x38>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e073      	b.n	80049d8 <HAL_UART_Transmit+0x120>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2221      	movs	r2, #33	; 0x21
 8004904:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004906:	f7fd fadd 	bl	8001ec4 <HAL_GetTick>
 800490a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004924:	d108      	bne.n	8004938 <HAL_UART_Transmit+0x80>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e003      	b.n	8004940 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004948:	e02d      	b.n	80049a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fa64 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e039      	b.n	80049d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004976:	b292      	uxth	r2, r2
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	3302      	adds	r3, #2
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	e008      	b.n	8004994 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	b292      	uxth	r2, r2
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1cb      	bne.n	800494a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fa30 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e005      	b.n	80049d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b8a      	ldr	r3, [pc, #552]	; (8004c34 <UART_SetConfig+0x254>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	6979      	ldr	r1, [r7, #20]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a78      	ldr	r2, [pc, #480]	; (8004c38 <UART_SetConfig+0x258>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d120      	bne.n	8004a9e <UART_SetConfig+0xbe>
 8004a5c:	4b77      	ldr	r3, [pc, #476]	; (8004c3c <UART_SetConfig+0x25c>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d817      	bhi.n	8004a98 <UART_SetConfig+0xb8>
 8004a68:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <UART_SetConfig+0x90>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a8d 	.word	0x08004a8d
 8004a78:	08004a93 	.word	0x08004a93
 8004a7c:	08004a87 	.word	0x08004a87
 8004a80:	2300      	movs	r3, #0
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e01d      	b.n	8004ac2 <UART_SetConfig+0xe2>
 8004a86:	2302      	movs	r3, #2
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e01a      	b.n	8004ac2 <UART_SetConfig+0xe2>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e017      	b.n	8004ac2 <UART_SetConfig+0xe2>
 8004a92:	2308      	movs	r3, #8
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e014      	b.n	8004ac2 <UART_SetConfig+0xe2>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e011      	b.n	8004ac2 <UART_SetConfig+0xe2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a67      	ldr	r2, [pc, #412]	; (8004c40 <UART_SetConfig+0x260>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d102      	bne.n	8004aae <UART_SetConfig+0xce>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e009      	b.n	8004ac2 <UART_SetConfig+0xe2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a64      	ldr	r2, [pc, #400]	; (8004c44 <UART_SetConfig+0x264>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d102      	bne.n	8004abe <UART_SetConfig+0xde>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e001      	b.n	8004ac2 <UART_SetConfig+0xe2>
 8004abe:	2310      	movs	r3, #16
 8004ac0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aca:	d15b      	bne.n	8004b84 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004acc:	7ffb      	ldrb	r3, [r7, #31]
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d827      	bhi.n	8004b22 <UART_SetConfig+0x142>
 8004ad2:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0xf8>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	08004b23 	.word	0x08004b23
 8004ae8:	08004b13 	.word	0x08004b13
 8004aec:	08004b23 	.word	0x08004b23
 8004af0:	08004b23 	.word	0x08004b23
 8004af4:	08004b23 	.word	0x08004b23
 8004af8:	08004b1b 	.word	0x08004b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7ff fad4 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8004b00:	61b8      	str	r0, [r7, #24]
        break;
 8004b02:	e013      	b.n	8004b2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b04:	f7ff faf2 	bl	80040ec <HAL_RCC_GetPCLK2Freq>
 8004b08:	61b8      	str	r0, [r7, #24]
        break;
 8004b0a:	e00f      	b.n	8004b2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b0c:	4b4e      	ldr	r3, [pc, #312]	; (8004c48 <UART_SetConfig+0x268>)
 8004b0e:	61bb      	str	r3, [r7, #24]
        break;
 8004b10:	e00c      	b.n	8004b2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b12:	f7ff fa53 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8004b16:	61b8      	str	r0, [r7, #24]
        break;
 8004b18:	e008      	b.n	8004b2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1e:	61bb      	str	r3, [r7, #24]
        break;
 8004b20:	e004      	b.n	8004b2c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	77bb      	strb	r3, [r7, #30]
        break;
 8004b2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d074      	beq.n	8004c1c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	005a      	lsls	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	441a      	add	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b0f      	cmp	r3, #15
 8004b4e:	d916      	bls.n	8004b7e <UART_SetConfig+0x19e>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b56:	d212      	bcs.n	8004b7e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f023 030f 	bic.w	r3, r3, #15
 8004b60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	89fa      	ldrh	r2, [r7, #14]
 8004b7a:	60da      	str	r2, [r3, #12]
 8004b7c:	e04e      	b.n	8004c1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	77bb      	strb	r3, [r7, #30]
 8004b82:	e04b      	b.n	8004c1c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b84:	7ffb      	ldrb	r3, [r7, #31]
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d827      	bhi.n	8004bda <UART_SetConfig+0x1fa>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x1b0>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bdb 	.word	0x08004bdb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7ff fa78 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	61b8      	str	r0, [r7, #24]
        break;
 8004bba:	e013      	b.n	8004be4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7ff fa96 	bl	80040ec <HAL_RCC_GetPCLK2Freq>
 8004bc0:	61b8      	str	r0, [r7, #24]
        break;
 8004bc2:	e00f      	b.n	8004be4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <UART_SetConfig+0x268>)
 8004bc6:	61bb      	str	r3, [r7, #24]
        break;
 8004bc8:	e00c      	b.n	8004be4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7ff f9f7 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8004bce:	61b8      	str	r0, [r7, #24]
        break;
 8004bd0:	e008      	b.n	8004be4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e004      	b.n	8004be4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77bb      	strb	r3, [r7, #30]
        break;
 8004be2:	bf00      	nop
    }

    if (pclk != 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d018      	beq.n	8004c1c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	085a      	lsrs	r2, r3, #1
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	441a      	add	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d908      	bls.n	8004c18 <UART_SetConfig+0x238>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d204      	bcs.n	8004c18 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	e001      	b.n	8004c1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c28:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	efff69f3 	.word	0xefff69f3
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40004400 	.word	0x40004400
 8004c44:	40004800 	.word	0x40004800
 8004c48:	007a1200 	.word	0x007a1200

08004c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4a:	d10a      	bne.n	8004d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da0:	f7fd f890 	bl	8001ec4 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d10e      	bne.n	8004dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f82d 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e023      	b.n	8004e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d10e      	bne.n	8004dfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f817 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e00d      	b.n	8004e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e32:	e05e      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d05a      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fd f842 	bl	8001ec4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d11b      	bne.n	8004e8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e043      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02c      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea6:	d124      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ec0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e00f      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d091      	beq.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <__assert_func>:
 8004f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f1e:	4614      	mov	r4, r2
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <__assert_func+0x2c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4605      	mov	r5, r0
 8004f28:	68d8      	ldr	r0, [r3, #12]
 8004f2a:	b14c      	cbz	r4, 8004f40 <__assert_func+0x24>
 8004f2c:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <__assert_func+0x30>)
 8004f2e:	9100      	str	r1, [sp, #0]
 8004f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f34:	4906      	ldr	r1, [pc, #24]	; (8004f50 <__assert_func+0x34>)
 8004f36:	462b      	mov	r3, r5
 8004f38:	f000 f814 	bl	8004f64 <fiprintf>
 8004f3c:	f000 fbfe 	bl	800573c <abort>
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <__assert_func+0x38>)
 8004f42:	461c      	mov	r4, r3
 8004f44:	e7f3      	b.n	8004f2e <__assert_func+0x12>
 8004f46:	bf00      	nop
 8004f48:	20000018 	.word	0x20000018
 8004f4c:	080062d4 	.word	0x080062d4
 8004f50:	080062e1 	.word	0x080062e1
 8004f54:	0800630f 	.word	0x0800630f

08004f58 <__errno>:
 8004f58:	4b01      	ldr	r3, [pc, #4]	; (8004f60 <__errno+0x8>)
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000018 	.word	0x20000018

08004f64 <fiprintf>:
 8004f64:	b40e      	push	{r1, r2, r3}
 8004f66:	b503      	push	{r0, r1, lr}
 8004f68:	4601      	mov	r1, r0
 8004f6a:	ab03      	add	r3, sp, #12
 8004f6c:	4805      	ldr	r0, [pc, #20]	; (8004f84 <fiprintf+0x20>)
 8004f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	f000 f85d 	bl	8005034 <_vfiprintf_r>
 8004f7a:	b002      	add	sp, #8
 8004f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f80:	b003      	add	sp, #12
 8004f82:	4770      	bx	lr
 8004f84:	20000018 	.word	0x20000018

08004f88 <__libc_init_array>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4d0d      	ldr	r5, [pc, #52]	; (8004fc0 <__libc_init_array+0x38>)
 8004f8c:	4c0d      	ldr	r4, [pc, #52]	; (8004fc4 <__libc_init_array+0x3c>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	2600      	movs	r6, #0
 8004f94:	42a6      	cmp	r6, r4
 8004f96:	d109      	bne.n	8004fac <__libc_init_array+0x24>
 8004f98:	4d0b      	ldr	r5, [pc, #44]	; (8004fc8 <__libc_init_array+0x40>)
 8004f9a:	4c0c      	ldr	r4, [pc, #48]	; (8004fcc <__libc_init_array+0x44>)
 8004f9c:	f000 ffd0 	bl	8005f40 <_init>
 8004fa0:	1b64      	subs	r4, r4, r5
 8004fa2:	10a4      	asrs	r4, r4, #2
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	42a6      	cmp	r6, r4
 8004fa8:	d105      	bne.n	8004fb6 <__libc_init_array+0x2e>
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb0:	4798      	blx	r3
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7ee      	b.n	8004f94 <__libc_init_array+0xc>
 8004fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fba:	4798      	blx	r3
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	e7f2      	b.n	8004fa6 <__libc_init_array+0x1e>
 8004fc0:	080063a8 	.word	0x080063a8
 8004fc4:	080063a8 	.word	0x080063a8
 8004fc8:	080063a8 	.word	0x080063a8
 8004fcc:	080063ac 	.word	0x080063ac

08004fd0 <memset>:
 8004fd0:	4402      	add	r2, r0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d100      	bne.n	8004fda <memset+0xa>
 8004fd8:	4770      	bx	lr
 8004fda:	f803 1b01 	strb.w	r1, [r3], #1
 8004fde:	e7f9      	b.n	8004fd4 <memset+0x4>

08004fe0 <__sfputc_r>:
 8004fe0:	6893      	ldr	r3, [r2, #8]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	b410      	push	{r4}
 8004fe8:	6093      	str	r3, [r2, #8]
 8004fea:	da08      	bge.n	8004ffe <__sfputc_r+0x1e>
 8004fec:	6994      	ldr	r4, [r2, #24]
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	db01      	blt.n	8004ff6 <__sfputc_r+0x16>
 8004ff2:	290a      	cmp	r1, #10
 8004ff4:	d103      	bne.n	8004ffe <__sfputc_r+0x1e>
 8004ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ffa:	f000 badf 	b.w	80055bc <__swbuf_r>
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	1c58      	adds	r0, r3, #1
 8005002:	6010      	str	r0, [r2, #0]
 8005004:	7019      	strb	r1, [r3, #0]
 8005006:	4608      	mov	r0, r1
 8005008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800500c:	4770      	bx	lr

0800500e <__sfputs_r>:
 800500e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005010:	4606      	mov	r6, r0
 8005012:	460f      	mov	r7, r1
 8005014:	4614      	mov	r4, r2
 8005016:	18d5      	adds	r5, r2, r3
 8005018:	42ac      	cmp	r4, r5
 800501a:	d101      	bne.n	8005020 <__sfputs_r+0x12>
 800501c:	2000      	movs	r0, #0
 800501e:	e007      	b.n	8005030 <__sfputs_r+0x22>
 8005020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005024:	463a      	mov	r2, r7
 8005026:	4630      	mov	r0, r6
 8005028:	f7ff ffda 	bl	8004fe0 <__sfputc_r>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d1f3      	bne.n	8005018 <__sfputs_r+0xa>
 8005030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005034 <_vfiprintf_r>:
 8005034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005038:	460d      	mov	r5, r1
 800503a:	b09d      	sub	sp, #116	; 0x74
 800503c:	4614      	mov	r4, r2
 800503e:	4698      	mov	r8, r3
 8005040:	4606      	mov	r6, r0
 8005042:	b118      	cbz	r0, 800504c <_vfiprintf_r+0x18>
 8005044:	6983      	ldr	r3, [r0, #24]
 8005046:	b90b      	cbnz	r3, 800504c <_vfiprintf_r+0x18>
 8005048:	f000 fc9a 	bl	8005980 <__sinit>
 800504c:	4b89      	ldr	r3, [pc, #548]	; (8005274 <_vfiprintf_r+0x240>)
 800504e:	429d      	cmp	r5, r3
 8005050:	d11b      	bne.n	800508a <_vfiprintf_r+0x56>
 8005052:	6875      	ldr	r5, [r6, #4]
 8005054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005056:	07d9      	lsls	r1, r3, #31
 8005058:	d405      	bmi.n	8005066 <_vfiprintf_r+0x32>
 800505a:	89ab      	ldrh	r3, [r5, #12]
 800505c:	059a      	lsls	r2, r3, #22
 800505e:	d402      	bmi.n	8005066 <_vfiprintf_r+0x32>
 8005060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005062:	f000 fd2b 	bl	8005abc <__retarget_lock_acquire_recursive>
 8005066:	89ab      	ldrh	r3, [r5, #12]
 8005068:	071b      	lsls	r3, r3, #28
 800506a:	d501      	bpl.n	8005070 <_vfiprintf_r+0x3c>
 800506c:	692b      	ldr	r3, [r5, #16]
 800506e:	b9eb      	cbnz	r3, 80050ac <_vfiprintf_r+0x78>
 8005070:	4629      	mov	r1, r5
 8005072:	4630      	mov	r0, r6
 8005074:	f000 faf4 	bl	8005660 <__swsetup_r>
 8005078:	b1c0      	cbz	r0, 80050ac <_vfiprintf_r+0x78>
 800507a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800507c:	07dc      	lsls	r4, r3, #31
 800507e:	d50e      	bpl.n	800509e <_vfiprintf_r+0x6a>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	b01d      	add	sp, #116	; 0x74
 8005086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508a:	4b7b      	ldr	r3, [pc, #492]	; (8005278 <_vfiprintf_r+0x244>)
 800508c:	429d      	cmp	r5, r3
 800508e:	d101      	bne.n	8005094 <_vfiprintf_r+0x60>
 8005090:	68b5      	ldr	r5, [r6, #8]
 8005092:	e7df      	b.n	8005054 <_vfiprintf_r+0x20>
 8005094:	4b79      	ldr	r3, [pc, #484]	; (800527c <_vfiprintf_r+0x248>)
 8005096:	429d      	cmp	r5, r3
 8005098:	bf08      	it	eq
 800509a:	68f5      	ldreq	r5, [r6, #12]
 800509c:	e7da      	b.n	8005054 <_vfiprintf_r+0x20>
 800509e:	89ab      	ldrh	r3, [r5, #12]
 80050a0:	0598      	lsls	r0, r3, #22
 80050a2:	d4ed      	bmi.n	8005080 <_vfiprintf_r+0x4c>
 80050a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050a6:	f000 fd0a 	bl	8005abe <__retarget_lock_release_recursive>
 80050aa:	e7e9      	b.n	8005080 <_vfiprintf_r+0x4c>
 80050ac:	2300      	movs	r3, #0
 80050ae:	9309      	str	r3, [sp, #36]	; 0x24
 80050b0:	2320      	movs	r3, #32
 80050b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ba:	2330      	movs	r3, #48	; 0x30
 80050bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005280 <_vfiprintf_r+0x24c>
 80050c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050c4:	f04f 0901 	mov.w	r9, #1
 80050c8:	4623      	mov	r3, r4
 80050ca:	469a      	mov	sl, r3
 80050cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050d0:	b10a      	cbz	r2, 80050d6 <_vfiprintf_r+0xa2>
 80050d2:	2a25      	cmp	r2, #37	; 0x25
 80050d4:	d1f9      	bne.n	80050ca <_vfiprintf_r+0x96>
 80050d6:	ebba 0b04 	subs.w	fp, sl, r4
 80050da:	d00b      	beq.n	80050f4 <_vfiprintf_r+0xc0>
 80050dc:	465b      	mov	r3, fp
 80050de:	4622      	mov	r2, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	4630      	mov	r0, r6
 80050e4:	f7ff ff93 	bl	800500e <__sfputs_r>
 80050e8:	3001      	adds	r0, #1
 80050ea:	f000 80aa 	beq.w	8005242 <_vfiprintf_r+0x20e>
 80050ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f0:	445a      	add	r2, fp
 80050f2:	9209      	str	r2, [sp, #36]	; 0x24
 80050f4:	f89a 3000 	ldrb.w	r3, [sl]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80a2 	beq.w	8005242 <_vfiprintf_r+0x20e>
 80050fe:	2300      	movs	r3, #0
 8005100:	f04f 32ff 	mov.w	r2, #4294967295
 8005104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005108:	f10a 0a01 	add.w	sl, sl, #1
 800510c:	9304      	str	r3, [sp, #16]
 800510e:	9307      	str	r3, [sp, #28]
 8005110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005114:	931a      	str	r3, [sp, #104]	; 0x68
 8005116:	4654      	mov	r4, sl
 8005118:	2205      	movs	r2, #5
 800511a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511e:	4858      	ldr	r0, [pc, #352]	; (8005280 <_vfiprintf_r+0x24c>)
 8005120:	f7fb f856 	bl	80001d0 <memchr>
 8005124:	9a04      	ldr	r2, [sp, #16]
 8005126:	b9d8      	cbnz	r0, 8005160 <_vfiprintf_r+0x12c>
 8005128:	06d1      	lsls	r1, r2, #27
 800512a:	bf44      	itt	mi
 800512c:	2320      	movmi	r3, #32
 800512e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005132:	0713      	lsls	r3, r2, #28
 8005134:	bf44      	itt	mi
 8005136:	232b      	movmi	r3, #43	; 0x2b
 8005138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800513c:	f89a 3000 	ldrb.w	r3, [sl]
 8005140:	2b2a      	cmp	r3, #42	; 0x2a
 8005142:	d015      	beq.n	8005170 <_vfiprintf_r+0x13c>
 8005144:	9a07      	ldr	r2, [sp, #28]
 8005146:	4654      	mov	r4, sl
 8005148:	2000      	movs	r0, #0
 800514a:	f04f 0c0a 	mov.w	ip, #10
 800514e:	4621      	mov	r1, r4
 8005150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005154:	3b30      	subs	r3, #48	; 0x30
 8005156:	2b09      	cmp	r3, #9
 8005158:	d94e      	bls.n	80051f8 <_vfiprintf_r+0x1c4>
 800515a:	b1b0      	cbz	r0, 800518a <_vfiprintf_r+0x156>
 800515c:	9207      	str	r2, [sp, #28]
 800515e:	e014      	b.n	800518a <_vfiprintf_r+0x156>
 8005160:	eba0 0308 	sub.w	r3, r0, r8
 8005164:	fa09 f303 	lsl.w	r3, r9, r3
 8005168:	4313      	orrs	r3, r2
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	46a2      	mov	sl, r4
 800516e:	e7d2      	b.n	8005116 <_vfiprintf_r+0xe2>
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	1d19      	adds	r1, r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	9103      	str	r1, [sp, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	bfbb      	ittet	lt
 800517c:	425b      	neglt	r3, r3
 800517e:	f042 0202 	orrlt.w	r2, r2, #2
 8005182:	9307      	strge	r3, [sp, #28]
 8005184:	9307      	strlt	r3, [sp, #28]
 8005186:	bfb8      	it	lt
 8005188:	9204      	strlt	r2, [sp, #16]
 800518a:	7823      	ldrb	r3, [r4, #0]
 800518c:	2b2e      	cmp	r3, #46	; 0x2e
 800518e:	d10c      	bne.n	80051aa <_vfiprintf_r+0x176>
 8005190:	7863      	ldrb	r3, [r4, #1]
 8005192:	2b2a      	cmp	r3, #42	; 0x2a
 8005194:	d135      	bne.n	8005202 <_vfiprintf_r+0x1ce>
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	1d1a      	adds	r2, r3, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	9203      	str	r2, [sp, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bfb8      	it	lt
 80051a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80051a6:	3402      	adds	r4, #2
 80051a8:	9305      	str	r3, [sp, #20]
 80051aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005290 <_vfiprintf_r+0x25c>
 80051ae:	7821      	ldrb	r1, [r4, #0]
 80051b0:	2203      	movs	r2, #3
 80051b2:	4650      	mov	r0, sl
 80051b4:	f7fb f80c 	bl	80001d0 <memchr>
 80051b8:	b140      	cbz	r0, 80051cc <_vfiprintf_r+0x198>
 80051ba:	2340      	movs	r3, #64	; 0x40
 80051bc:	eba0 000a 	sub.w	r0, r0, sl
 80051c0:	fa03 f000 	lsl.w	r0, r3, r0
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	4303      	orrs	r3, r0
 80051c8:	3401      	adds	r4, #1
 80051ca:	9304      	str	r3, [sp, #16]
 80051cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d0:	482c      	ldr	r0, [pc, #176]	; (8005284 <_vfiprintf_r+0x250>)
 80051d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051d6:	2206      	movs	r2, #6
 80051d8:	f7fa fffa 	bl	80001d0 <memchr>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d03f      	beq.n	8005260 <_vfiprintf_r+0x22c>
 80051e0:	4b29      	ldr	r3, [pc, #164]	; (8005288 <_vfiprintf_r+0x254>)
 80051e2:	bb1b      	cbnz	r3, 800522c <_vfiprintf_r+0x1f8>
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	3307      	adds	r3, #7
 80051e8:	f023 0307 	bic.w	r3, r3, #7
 80051ec:	3308      	adds	r3, #8
 80051ee:	9303      	str	r3, [sp, #12]
 80051f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f2:	443b      	add	r3, r7
 80051f4:	9309      	str	r3, [sp, #36]	; 0x24
 80051f6:	e767      	b.n	80050c8 <_vfiprintf_r+0x94>
 80051f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051fc:	460c      	mov	r4, r1
 80051fe:	2001      	movs	r0, #1
 8005200:	e7a5      	b.n	800514e <_vfiprintf_r+0x11a>
 8005202:	2300      	movs	r3, #0
 8005204:	3401      	adds	r4, #1
 8005206:	9305      	str	r3, [sp, #20]
 8005208:	4619      	mov	r1, r3
 800520a:	f04f 0c0a 	mov.w	ip, #10
 800520e:	4620      	mov	r0, r4
 8005210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005214:	3a30      	subs	r2, #48	; 0x30
 8005216:	2a09      	cmp	r2, #9
 8005218:	d903      	bls.n	8005222 <_vfiprintf_r+0x1ee>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0c5      	beq.n	80051aa <_vfiprintf_r+0x176>
 800521e:	9105      	str	r1, [sp, #20]
 8005220:	e7c3      	b.n	80051aa <_vfiprintf_r+0x176>
 8005222:	fb0c 2101 	mla	r1, ip, r1, r2
 8005226:	4604      	mov	r4, r0
 8005228:	2301      	movs	r3, #1
 800522a:	e7f0      	b.n	800520e <_vfiprintf_r+0x1da>
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	462a      	mov	r2, r5
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <_vfiprintf_r+0x258>)
 8005234:	a904      	add	r1, sp, #16
 8005236:	4630      	mov	r0, r6
 8005238:	f3af 8000 	nop.w
 800523c:	4607      	mov	r7, r0
 800523e:	1c78      	adds	r0, r7, #1
 8005240:	d1d6      	bne.n	80051f0 <_vfiprintf_r+0x1bc>
 8005242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005244:	07d9      	lsls	r1, r3, #31
 8005246:	d405      	bmi.n	8005254 <_vfiprintf_r+0x220>
 8005248:	89ab      	ldrh	r3, [r5, #12]
 800524a:	059a      	lsls	r2, r3, #22
 800524c:	d402      	bmi.n	8005254 <_vfiprintf_r+0x220>
 800524e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005250:	f000 fc35 	bl	8005abe <__retarget_lock_release_recursive>
 8005254:	89ab      	ldrh	r3, [r5, #12]
 8005256:	065b      	lsls	r3, r3, #25
 8005258:	f53f af12 	bmi.w	8005080 <_vfiprintf_r+0x4c>
 800525c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800525e:	e711      	b.n	8005084 <_vfiprintf_r+0x50>
 8005260:	ab03      	add	r3, sp, #12
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	462a      	mov	r2, r5
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <_vfiprintf_r+0x258>)
 8005268:	a904      	add	r1, sp, #16
 800526a:	4630      	mov	r0, r6
 800526c:	f000 f880 	bl	8005370 <_printf_i>
 8005270:	e7e4      	b.n	800523c <_vfiprintf_r+0x208>
 8005272:	bf00      	nop
 8005274:	08006368 	.word	0x08006368
 8005278:	08006388 	.word	0x08006388
 800527c:	08006348 	.word	0x08006348
 8005280:	08006314 	.word	0x08006314
 8005284:	0800631e 	.word	0x0800631e
 8005288:	00000000 	.word	0x00000000
 800528c:	0800500f 	.word	0x0800500f
 8005290:	0800631a 	.word	0x0800631a

08005294 <_printf_common>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	4616      	mov	r6, r2
 800529a:	4699      	mov	r9, r3
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bfb8      	it	lt
 80052a8:	4613      	movlt	r3, r2
 80052aa:	6033      	str	r3, [r6, #0]
 80052ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b0:	4607      	mov	r7, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	b10a      	cbz	r2, 80052ba <_printf_common+0x26>
 80052b6:	3301      	adds	r3, #1
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	0699      	lsls	r1, r3, #26
 80052be:	bf42      	ittt	mi
 80052c0:	6833      	ldrmi	r3, [r6, #0]
 80052c2:	3302      	addmi	r3, #2
 80052c4:	6033      	strmi	r3, [r6, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	f015 0506 	ands.w	r5, r5, #6
 80052cc:	d106      	bne.n	80052dc <_printf_common+0x48>
 80052ce:	f104 0a19 	add.w	sl, r4, #25
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	6832      	ldr	r2, [r6, #0]
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dc26      	bgt.n	800532a <_printf_common+0x96>
 80052dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e0:	1e13      	subs	r3, r2, #0
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	bf18      	it	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	0692      	lsls	r2, r2, #26
 80052ea:	d42b      	bmi.n	8005344 <_printf_common+0xb0>
 80052ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f0:	4649      	mov	r1, r9
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d01e      	beq.n	8005338 <_printf_common+0xa4>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	68e5      	ldr	r5, [r4, #12]
 80052fe:	6832      	ldr	r2, [r6, #0]
 8005300:	f003 0306 	and.w	r3, r3, #6
 8005304:	2b04      	cmp	r3, #4
 8005306:	bf08      	it	eq
 8005308:	1aad      	subeq	r5, r5, r2
 800530a:	68a3      	ldr	r3, [r4, #8]
 800530c:	6922      	ldr	r2, [r4, #16]
 800530e:	bf0c      	ite	eq
 8005310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005314:	2500      	movne	r5, #0
 8005316:	4293      	cmp	r3, r2
 8005318:	bfc4      	itt	gt
 800531a:	1a9b      	subgt	r3, r3, r2
 800531c:	18ed      	addgt	r5, r5, r3
 800531e:	2600      	movs	r6, #0
 8005320:	341a      	adds	r4, #26
 8005322:	42b5      	cmp	r5, r6
 8005324:	d11a      	bne.n	800535c <_printf_common+0xc8>
 8005326:	2000      	movs	r0, #0
 8005328:	e008      	b.n	800533c <_printf_common+0xa8>
 800532a:	2301      	movs	r3, #1
 800532c:	4652      	mov	r2, sl
 800532e:	4649      	mov	r1, r9
 8005330:	4638      	mov	r0, r7
 8005332:	47c0      	blx	r8
 8005334:	3001      	adds	r0, #1
 8005336:	d103      	bne.n	8005340 <_printf_common+0xac>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	3501      	adds	r5, #1
 8005342:	e7c6      	b.n	80052d2 <_printf_common+0x3e>
 8005344:	18e1      	adds	r1, r4, r3
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	2030      	movs	r0, #48	; 0x30
 800534a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800534e:	4422      	add	r2, r4
 8005350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005358:	3302      	adds	r3, #2
 800535a:	e7c7      	b.n	80052ec <_printf_common+0x58>
 800535c:	2301      	movs	r3, #1
 800535e:	4622      	mov	r2, r4
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d0e6      	beq.n	8005338 <_printf_common+0xa4>
 800536a:	3601      	adds	r6, #1
 800536c:	e7d9      	b.n	8005322 <_printf_common+0x8e>
	...

08005370 <_printf_i>:
 8005370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	460c      	mov	r4, r1
 8005376:	4691      	mov	r9, r2
 8005378:	7e27      	ldrb	r7, [r4, #24]
 800537a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800537c:	2f78      	cmp	r7, #120	; 0x78
 800537e:	4680      	mov	r8, r0
 8005380:	469a      	mov	sl, r3
 8005382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005386:	d807      	bhi.n	8005398 <_printf_i+0x28>
 8005388:	2f62      	cmp	r7, #98	; 0x62
 800538a:	d80a      	bhi.n	80053a2 <_printf_i+0x32>
 800538c:	2f00      	cmp	r7, #0
 800538e:	f000 80d8 	beq.w	8005542 <_printf_i+0x1d2>
 8005392:	2f58      	cmp	r7, #88	; 0x58
 8005394:	f000 80a3 	beq.w	80054de <_printf_i+0x16e>
 8005398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800539c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a0:	e03a      	b.n	8005418 <_printf_i+0xa8>
 80053a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053a6:	2b15      	cmp	r3, #21
 80053a8:	d8f6      	bhi.n	8005398 <_printf_i+0x28>
 80053aa:	a001      	add	r0, pc, #4	; (adr r0, 80053b0 <_printf_i+0x40>)
 80053ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053b0:	08005409 	.word	0x08005409
 80053b4:	0800541d 	.word	0x0800541d
 80053b8:	08005399 	.word	0x08005399
 80053bc:	08005399 	.word	0x08005399
 80053c0:	08005399 	.word	0x08005399
 80053c4:	08005399 	.word	0x08005399
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	08005399 	.word	0x08005399
 80053d0:	08005399 	.word	0x08005399
 80053d4:	08005399 	.word	0x08005399
 80053d8:	08005399 	.word	0x08005399
 80053dc:	08005529 	.word	0x08005529
 80053e0:	0800544d 	.word	0x0800544d
 80053e4:	0800550b 	.word	0x0800550b
 80053e8:	08005399 	.word	0x08005399
 80053ec:	08005399 	.word	0x08005399
 80053f0:	0800554b 	.word	0x0800554b
 80053f4:	08005399 	.word	0x08005399
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	08005399 	.word	0x08005399
 8005400:	08005399 	.word	0x08005399
 8005404:	08005513 	.word	0x08005513
 8005408:	680b      	ldr	r3, [r1, #0]
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	600a      	str	r2, [r1, #0]
 8005410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005418:	2301      	movs	r3, #1
 800541a:	e0a3      	b.n	8005564 <_printf_i+0x1f4>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	6808      	ldr	r0, [r1, #0]
 8005420:	062e      	lsls	r6, r5, #24
 8005422:	f100 0304 	add.w	r3, r0, #4
 8005426:	d50a      	bpl.n	800543e <_printf_i+0xce>
 8005428:	6805      	ldr	r5, [r0, #0]
 800542a:	600b      	str	r3, [r1, #0]
 800542c:	2d00      	cmp	r5, #0
 800542e:	da03      	bge.n	8005438 <_printf_i+0xc8>
 8005430:	232d      	movs	r3, #45	; 0x2d
 8005432:	426d      	negs	r5, r5
 8005434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005438:	485e      	ldr	r0, [pc, #376]	; (80055b4 <_printf_i+0x244>)
 800543a:	230a      	movs	r3, #10
 800543c:	e019      	b.n	8005472 <_printf_i+0x102>
 800543e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005442:	6805      	ldr	r5, [r0, #0]
 8005444:	600b      	str	r3, [r1, #0]
 8005446:	bf18      	it	ne
 8005448:	b22d      	sxthne	r5, r5
 800544a:	e7ef      	b.n	800542c <_printf_i+0xbc>
 800544c:	680b      	ldr	r3, [r1, #0]
 800544e:	6825      	ldr	r5, [r4, #0]
 8005450:	1d18      	adds	r0, r3, #4
 8005452:	6008      	str	r0, [r1, #0]
 8005454:	0628      	lsls	r0, r5, #24
 8005456:	d501      	bpl.n	800545c <_printf_i+0xec>
 8005458:	681d      	ldr	r5, [r3, #0]
 800545a:	e002      	b.n	8005462 <_printf_i+0xf2>
 800545c:	0669      	lsls	r1, r5, #25
 800545e:	d5fb      	bpl.n	8005458 <_printf_i+0xe8>
 8005460:	881d      	ldrh	r5, [r3, #0]
 8005462:	4854      	ldr	r0, [pc, #336]	; (80055b4 <_printf_i+0x244>)
 8005464:	2f6f      	cmp	r7, #111	; 0x6f
 8005466:	bf0c      	ite	eq
 8005468:	2308      	moveq	r3, #8
 800546a:	230a      	movne	r3, #10
 800546c:	2100      	movs	r1, #0
 800546e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005472:	6866      	ldr	r6, [r4, #4]
 8005474:	60a6      	str	r6, [r4, #8]
 8005476:	2e00      	cmp	r6, #0
 8005478:	bfa2      	ittt	ge
 800547a:	6821      	ldrge	r1, [r4, #0]
 800547c:	f021 0104 	bicge.w	r1, r1, #4
 8005480:	6021      	strge	r1, [r4, #0]
 8005482:	b90d      	cbnz	r5, 8005488 <_printf_i+0x118>
 8005484:	2e00      	cmp	r6, #0
 8005486:	d04d      	beq.n	8005524 <_printf_i+0x1b4>
 8005488:	4616      	mov	r6, r2
 800548a:	fbb5 f1f3 	udiv	r1, r5, r3
 800548e:	fb03 5711 	mls	r7, r3, r1, r5
 8005492:	5dc7      	ldrb	r7, [r0, r7]
 8005494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005498:	462f      	mov	r7, r5
 800549a:	42bb      	cmp	r3, r7
 800549c:	460d      	mov	r5, r1
 800549e:	d9f4      	bls.n	800548a <_printf_i+0x11a>
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d10b      	bne.n	80054bc <_printf_i+0x14c>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	07df      	lsls	r7, r3, #31
 80054a8:	d508      	bpl.n	80054bc <_printf_i+0x14c>
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	6861      	ldr	r1, [r4, #4]
 80054ae:	4299      	cmp	r1, r3
 80054b0:	bfde      	ittt	le
 80054b2:	2330      	movle	r3, #48	; 0x30
 80054b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054bc:	1b92      	subs	r2, r2, r6
 80054be:	6122      	str	r2, [r4, #16]
 80054c0:	f8cd a000 	str.w	sl, [sp]
 80054c4:	464b      	mov	r3, r9
 80054c6:	aa03      	add	r2, sp, #12
 80054c8:	4621      	mov	r1, r4
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7ff fee2 	bl	8005294 <_printf_common>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d14c      	bne.n	800556e <_printf_i+0x1fe>
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	b004      	add	sp, #16
 80054da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054de:	4835      	ldr	r0, [pc, #212]	; (80055b4 <_printf_i+0x244>)
 80054e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	680e      	ldr	r6, [r1, #0]
 80054e8:	061f      	lsls	r7, r3, #24
 80054ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80054ee:	600e      	str	r6, [r1, #0]
 80054f0:	d514      	bpl.n	800551c <_printf_i+0x1ac>
 80054f2:	07d9      	lsls	r1, r3, #31
 80054f4:	bf44      	itt	mi
 80054f6:	f043 0320 	orrmi.w	r3, r3, #32
 80054fa:	6023      	strmi	r3, [r4, #0]
 80054fc:	b91d      	cbnz	r5, 8005506 <_printf_i+0x196>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f023 0320 	bic.w	r3, r3, #32
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	2310      	movs	r3, #16
 8005508:	e7b0      	b.n	800546c <_printf_i+0xfc>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f043 0320 	orr.w	r3, r3, #32
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	2378      	movs	r3, #120	; 0x78
 8005514:	4828      	ldr	r0, [pc, #160]	; (80055b8 <_printf_i+0x248>)
 8005516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800551a:	e7e3      	b.n	80054e4 <_printf_i+0x174>
 800551c:	065e      	lsls	r6, r3, #25
 800551e:	bf48      	it	mi
 8005520:	b2ad      	uxthmi	r5, r5
 8005522:	e7e6      	b.n	80054f2 <_printf_i+0x182>
 8005524:	4616      	mov	r6, r2
 8005526:	e7bb      	b.n	80054a0 <_printf_i+0x130>
 8005528:	680b      	ldr	r3, [r1, #0]
 800552a:	6826      	ldr	r6, [r4, #0]
 800552c:	6960      	ldr	r0, [r4, #20]
 800552e:	1d1d      	adds	r5, r3, #4
 8005530:	600d      	str	r5, [r1, #0]
 8005532:	0635      	lsls	r5, r6, #24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	d501      	bpl.n	800553c <_printf_i+0x1cc>
 8005538:	6018      	str	r0, [r3, #0]
 800553a:	e002      	b.n	8005542 <_printf_i+0x1d2>
 800553c:	0671      	lsls	r1, r6, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0x1c8>
 8005540:	8018      	strh	r0, [r3, #0]
 8005542:	2300      	movs	r3, #0
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	4616      	mov	r6, r2
 8005548:	e7ba      	b.n	80054c0 <_printf_i+0x150>
 800554a:	680b      	ldr	r3, [r1, #0]
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	600a      	str	r2, [r1, #0]
 8005550:	681e      	ldr	r6, [r3, #0]
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	2100      	movs	r1, #0
 8005556:	4630      	mov	r0, r6
 8005558:	f7fa fe3a 	bl	80001d0 <memchr>
 800555c:	b108      	cbz	r0, 8005562 <_printf_i+0x1f2>
 800555e:	1b80      	subs	r0, r0, r6
 8005560:	6060      	str	r0, [r4, #4]
 8005562:	6863      	ldr	r3, [r4, #4]
 8005564:	6123      	str	r3, [r4, #16]
 8005566:	2300      	movs	r3, #0
 8005568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556c:	e7a8      	b.n	80054c0 <_printf_i+0x150>
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	4632      	mov	r2, r6
 8005572:	4649      	mov	r1, r9
 8005574:	4640      	mov	r0, r8
 8005576:	47d0      	blx	sl
 8005578:	3001      	adds	r0, #1
 800557a:	d0ab      	beq.n	80054d4 <_printf_i+0x164>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	079b      	lsls	r3, r3, #30
 8005580:	d413      	bmi.n	80055aa <_printf_i+0x23a>
 8005582:	68e0      	ldr	r0, [r4, #12]
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	4298      	cmp	r0, r3
 8005588:	bfb8      	it	lt
 800558a:	4618      	movlt	r0, r3
 800558c:	e7a4      	b.n	80054d8 <_printf_i+0x168>
 800558e:	2301      	movs	r3, #1
 8005590:	4632      	mov	r2, r6
 8005592:	4649      	mov	r1, r9
 8005594:	4640      	mov	r0, r8
 8005596:	47d0      	blx	sl
 8005598:	3001      	adds	r0, #1
 800559a:	d09b      	beq.n	80054d4 <_printf_i+0x164>
 800559c:	3501      	adds	r5, #1
 800559e:	68e3      	ldr	r3, [r4, #12]
 80055a0:	9903      	ldr	r1, [sp, #12]
 80055a2:	1a5b      	subs	r3, r3, r1
 80055a4:	42ab      	cmp	r3, r5
 80055a6:	dcf2      	bgt.n	800558e <_printf_i+0x21e>
 80055a8:	e7eb      	b.n	8005582 <_printf_i+0x212>
 80055aa:	2500      	movs	r5, #0
 80055ac:	f104 0619 	add.w	r6, r4, #25
 80055b0:	e7f5      	b.n	800559e <_printf_i+0x22e>
 80055b2:	bf00      	nop
 80055b4:	08006325 	.word	0x08006325
 80055b8:	08006336 	.word	0x08006336

080055bc <__swbuf_r>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	460e      	mov	r6, r1
 80055c0:	4614      	mov	r4, r2
 80055c2:	4605      	mov	r5, r0
 80055c4:	b118      	cbz	r0, 80055ce <__swbuf_r+0x12>
 80055c6:	6983      	ldr	r3, [r0, #24]
 80055c8:	b90b      	cbnz	r3, 80055ce <__swbuf_r+0x12>
 80055ca:	f000 f9d9 	bl	8005980 <__sinit>
 80055ce:	4b21      	ldr	r3, [pc, #132]	; (8005654 <__swbuf_r+0x98>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	d12b      	bne.n	800562c <__swbuf_r+0x70>
 80055d4:	686c      	ldr	r4, [r5, #4]
 80055d6:	69a3      	ldr	r3, [r4, #24]
 80055d8:	60a3      	str	r3, [r4, #8]
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	071a      	lsls	r2, r3, #28
 80055de:	d52f      	bpl.n	8005640 <__swbuf_r+0x84>
 80055e0:	6923      	ldr	r3, [r4, #16]
 80055e2:	b36b      	cbz	r3, 8005640 <__swbuf_r+0x84>
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	1ac0      	subs	r0, r0, r3
 80055ea:	6963      	ldr	r3, [r4, #20]
 80055ec:	b2f6      	uxtb	r6, r6
 80055ee:	4283      	cmp	r3, r0
 80055f0:	4637      	mov	r7, r6
 80055f2:	dc04      	bgt.n	80055fe <__swbuf_r+0x42>
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 f92e 	bl	8005858 <_fflush_r>
 80055fc:	bb30      	cbnz	r0, 800564c <__swbuf_r+0x90>
 80055fe:	68a3      	ldr	r3, [r4, #8]
 8005600:	3b01      	subs	r3, #1
 8005602:	60a3      	str	r3, [r4, #8]
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	6022      	str	r2, [r4, #0]
 800560a:	701e      	strb	r6, [r3, #0]
 800560c:	6963      	ldr	r3, [r4, #20]
 800560e:	3001      	adds	r0, #1
 8005610:	4283      	cmp	r3, r0
 8005612:	d004      	beq.n	800561e <__swbuf_r+0x62>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	07db      	lsls	r3, r3, #31
 8005618:	d506      	bpl.n	8005628 <__swbuf_r+0x6c>
 800561a:	2e0a      	cmp	r6, #10
 800561c:	d104      	bne.n	8005628 <__swbuf_r+0x6c>
 800561e:	4621      	mov	r1, r4
 8005620:	4628      	mov	r0, r5
 8005622:	f000 f919 	bl	8005858 <_fflush_r>
 8005626:	b988      	cbnz	r0, 800564c <__swbuf_r+0x90>
 8005628:	4638      	mov	r0, r7
 800562a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <__swbuf_r+0x9c>)
 800562e:	429c      	cmp	r4, r3
 8005630:	d101      	bne.n	8005636 <__swbuf_r+0x7a>
 8005632:	68ac      	ldr	r4, [r5, #8]
 8005634:	e7cf      	b.n	80055d6 <__swbuf_r+0x1a>
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <__swbuf_r+0xa0>)
 8005638:	429c      	cmp	r4, r3
 800563a:	bf08      	it	eq
 800563c:	68ec      	ldreq	r4, [r5, #12]
 800563e:	e7ca      	b.n	80055d6 <__swbuf_r+0x1a>
 8005640:	4621      	mov	r1, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 f80c 	bl	8005660 <__swsetup_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	d0cb      	beq.n	80055e4 <__swbuf_r+0x28>
 800564c:	f04f 37ff 	mov.w	r7, #4294967295
 8005650:	e7ea      	b.n	8005628 <__swbuf_r+0x6c>
 8005652:	bf00      	nop
 8005654:	08006368 	.word	0x08006368
 8005658:	08006388 	.word	0x08006388
 800565c:	08006348 	.word	0x08006348

08005660 <__swsetup_r>:
 8005660:	4b32      	ldr	r3, [pc, #200]	; (800572c <__swsetup_r+0xcc>)
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	4606      	mov	r6, r0
 8005668:	460c      	mov	r4, r1
 800566a:	b125      	cbz	r5, 8005676 <__swsetup_r+0x16>
 800566c:	69ab      	ldr	r3, [r5, #24]
 800566e:	b913      	cbnz	r3, 8005676 <__swsetup_r+0x16>
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f985 	bl	8005980 <__sinit>
 8005676:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <__swsetup_r+0xd0>)
 8005678:	429c      	cmp	r4, r3
 800567a:	d10f      	bne.n	800569c <__swsetup_r+0x3c>
 800567c:	686c      	ldr	r4, [r5, #4]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005684:	0719      	lsls	r1, r3, #28
 8005686:	d42c      	bmi.n	80056e2 <__swsetup_r+0x82>
 8005688:	06dd      	lsls	r5, r3, #27
 800568a:	d411      	bmi.n	80056b0 <__swsetup_r+0x50>
 800568c:	2309      	movs	r3, #9
 800568e:	6033      	str	r3, [r6, #0]
 8005690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	f04f 30ff 	mov.w	r0, #4294967295
 800569a:	e03e      	b.n	800571a <__swsetup_r+0xba>
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <__swsetup_r+0xd4>)
 800569e:	429c      	cmp	r4, r3
 80056a0:	d101      	bne.n	80056a6 <__swsetup_r+0x46>
 80056a2:	68ac      	ldr	r4, [r5, #8]
 80056a4:	e7eb      	b.n	800567e <__swsetup_r+0x1e>
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <__swsetup_r+0xd8>)
 80056a8:	429c      	cmp	r4, r3
 80056aa:	bf08      	it	eq
 80056ac:	68ec      	ldreq	r4, [r5, #12]
 80056ae:	e7e6      	b.n	800567e <__swsetup_r+0x1e>
 80056b0:	0758      	lsls	r0, r3, #29
 80056b2:	d512      	bpl.n	80056da <__swsetup_r+0x7a>
 80056b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b6:	b141      	cbz	r1, 80056ca <__swsetup_r+0x6a>
 80056b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056bc:	4299      	cmp	r1, r3
 80056be:	d002      	beq.n	80056c6 <__swsetup_r+0x66>
 80056c0:	4630      	mov	r0, r6
 80056c2:	f000 fa61 	bl	8005b88 <_free_r>
 80056c6:	2300      	movs	r3, #0
 80056c8:	6363      	str	r3, [r4, #52]	; 0x34
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056d0:	81a3      	strh	r3, [r4, #12]
 80056d2:	2300      	movs	r3, #0
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f043 0308 	orr.w	r3, r3, #8
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	b94b      	cbnz	r3, 80056fa <__swsetup_r+0x9a>
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f0:	d003      	beq.n	80056fa <__swsetup_r+0x9a>
 80056f2:	4621      	mov	r1, r4
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 fa07 	bl	8005b08 <__smakebuf_r>
 80056fa:	89a0      	ldrh	r0, [r4, #12]
 80056fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005700:	f010 0301 	ands.w	r3, r0, #1
 8005704:	d00a      	beq.n	800571c <__swsetup_r+0xbc>
 8005706:	2300      	movs	r3, #0
 8005708:	60a3      	str	r3, [r4, #8]
 800570a:	6963      	ldr	r3, [r4, #20]
 800570c:	425b      	negs	r3, r3
 800570e:	61a3      	str	r3, [r4, #24]
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	b943      	cbnz	r3, 8005726 <__swsetup_r+0xc6>
 8005714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005718:	d1ba      	bne.n	8005690 <__swsetup_r+0x30>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	0781      	lsls	r1, r0, #30
 800571e:	bf58      	it	pl
 8005720:	6963      	ldrpl	r3, [r4, #20]
 8005722:	60a3      	str	r3, [r4, #8]
 8005724:	e7f4      	b.n	8005710 <__swsetup_r+0xb0>
 8005726:	2000      	movs	r0, #0
 8005728:	e7f7      	b.n	800571a <__swsetup_r+0xba>
 800572a:	bf00      	nop
 800572c:	20000018 	.word	0x20000018
 8005730:	08006368 	.word	0x08006368
 8005734:	08006388 	.word	0x08006388
 8005738:	08006348 	.word	0x08006348

0800573c <abort>:
 800573c:	b508      	push	{r3, lr}
 800573e:	2006      	movs	r0, #6
 8005740:	f000 fb04 	bl	8005d4c <raise>
 8005744:	2001      	movs	r0, #1
 8005746:	f7fc fa79 	bl	8001c3c <_exit>
	...

0800574c <__sflush_r>:
 800574c:	898a      	ldrh	r2, [r1, #12]
 800574e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005752:	4605      	mov	r5, r0
 8005754:	0710      	lsls	r0, r2, #28
 8005756:	460c      	mov	r4, r1
 8005758:	d458      	bmi.n	800580c <__sflush_r+0xc0>
 800575a:	684b      	ldr	r3, [r1, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	dc05      	bgt.n	800576c <__sflush_r+0x20>
 8005760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	dc02      	bgt.n	800576c <__sflush_r+0x20>
 8005766:	2000      	movs	r0, #0
 8005768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800576e:	2e00      	cmp	r6, #0
 8005770:	d0f9      	beq.n	8005766 <__sflush_r+0x1a>
 8005772:	2300      	movs	r3, #0
 8005774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005778:	682f      	ldr	r7, [r5, #0]
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	d032      	beq.n	80057e4 <__sflush_r+0x98>
 800577e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	075a      	lsls	r2, r3, #29
 8005784:	d505      	bpl.n	8005792 <__sflush_r+0x46>
 8005786:	6863      	ldr	r3, [r4, #4]
 8005788:	1ac0      	subs	r0, r0, r3
 800578a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800578c:	b10b      	cbz	r3, 8005792 <__sflush_r+0x46>
 800578e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005790:	1ac0      	subs	r0, r0, r3
 8005792:	2300      	movs	r3, #0
 8005794:	4602      	mov	r2, r0
 8005796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005798:	6a21      	ldr	r1, [r4, #32]
 800579a:	4628      	mov	r0, r5
 800579c:	47b0      	blx	r6
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	d106      	bne.n	80057b2 <__sflush_r+0x66>
 80057a4:	6829      	ldr	r1, [r5, #0]
 80057a6:	291d      	cmp	r1, #29
 80057a8:	d82c      	bhi.n	8005804 <__sflush_r+0xb8>
 80057aa:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <__sflush_r+0x108>)
 80057ac:	40ca      	lsrs	r2, r1
 80057ae:	07d6      	lsls	r6, r2, #31
 80057b0:	d528      	bpl.n	8005804 <__sflush_r+0xb8>
 80057b2:	2200      	movs	r2, #0
 80057b4:	6062      	str	r2, [r4, #4]
 80057b6:	04d9      	lsls	r1, r3, #19
 80057b8:	6922      	ldr	r2, [r4, #16]
 80057ba:	6022      	str	r2, [r4, #0]
 80057bc:	d504      	bpl.n	80057c8 <__sflush_r+0x7c>
 80057be:	1c42      	adds	r2, r0, #1
 80057c0:	d101      	bne.n	80057c6 <__sflush_r+0x7a>
 80057c2:	682b      	ldr	r3, [r5, #0]
 80057c4:	b903      	cbnz	r3, 80057c8 <__sflush_r+0x7c>
 80057c6:	6560      	str	r0, [r4, #84]	; 0x54
 80057c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ca:	602f      	str	r7, [r5, #0]
 80057cc:	2900      	cmp	r1, #0
 80057ce:	d0ca      	beq.n	8005766 <__sflush_r+0x1a>
 80057d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d4:	4299      	cmp	r1, r3
 80057d6:	d002      	beq.n	80057de <__sflush_r+0x92>
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 f9d5 	bl	8005b88 <_free_r>
 80057de:	2000      	movs	r0, #0
 80057e0:	6360      	str	r0, [r4, #52]	; 0x34
 80057e2:	e7c1      	b.n	8005768 <__sflush_r+0x1c>
 80057e4:	6a21      	ldr	r1, [r4, #32]
 80057e6:	2301      	movs	r3, #1
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	1c41      	adds	r1, r0, #1
 80057ee:	d1c7      	bne.n	8005780 <__sflush_r+0x34>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0c4      	beq.n	8005780 <__sflush_r+0x34>
 80057f6:	2b1d      	cmp	r3, #29
 80057f8:	d001      	beq.n	80057fe <__sflush_r+0xb2>
 80057fa:	2b16      	cmp	r3, #22
 80057fc:	d101      	bne.n	8005802 <__sflush_r+0xb6>
 80057fe:	602f      	str	r7, [r5, #0]
 8005800:	e7b1      	b.n	8005766 <__sflush_r+0x1a>
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	e7ad      	b.n	8005768 <__sflush_r+0x1c>
 800580c:	690f      	ldr	r7, [r1, #16]
 800580e:	2f00      	cmp	r7, #0
 8005810:	d0a9      	beq.n	8005766 <__sflush_r+0x1a>
 8005812:	0793      	lsls	r3, r2, #30
 8005814:	680e      	ldr	r6, [r1, #0]
 8005816:	bf08      	it	eq
 8005818:	694b      	ldreq	r3, [r1, #20]
 800581a:	600f      	str	r7, [r1, #0]
 800581c:	bf18      	it	ne
 800581e:	2300      	movne	r3, #0
 8005820:	eba6 0807 	sub.w	r8, r6, r7
 8005824:	608b      	str	r3, [r1, #8]
 8005826:	f1b8 0f00 	cmp.w	r8, #0
 800582a:	dd9c      	ble.n	8005766 <__sflush_r+0x1a>
 800582c:	6a21      	ldr	r1, [r4, #32]
 800582e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005830:	4643      	mov	r3, r8
 8005832:	463a      	mov	r2, r7
 8005834:	4628      	mov	r0, r5
 8005836:	47b0      	blx	r6
 8005838:	2800      	cmp	r0, #0
 800583a:	dc06      	bgt.n	800584a <__sflush_r+0xfe>
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e78e      	b.n	8005768 <__sflush_r+0x1c>
 800584a:	4407      	add	r7, r0
 800584c:	eba8 0800 	sub.w	r8, r8, r0
 8005850:	e7e9      	b.n	8005826 <__sflush_r+0xda>
 8005852:	bf00      	nop
 8005854:	20400001 	.word	0x20400001

08005858 <_fflush_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	4605      	mov	r5, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b913      	cbnz	r3, 8005868 <_fflush_r+0x10>
 8005862:	2500      	movs	r5, #0
 8005864:	4628      	mov	r0, r5
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	b118      	cbz	r0, 8005872 <_fflush_r+0x1a>
 800586a:	6983      	ldr	r3, [r0, #24]
 800586c:	b90b      	cbnz	r3, 8005872 <_fflush_r+0x1a>
 800586e:	f000 f887 	bl	8005980 <__sinit>
 8005872:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <_fflush_r+0x6c>)
 8005874:	429c      	cmp	r4, r3
 8005876:	d11b      	bne.n	80058b0 <_fflush_r+0x58>
 8005878:	686c      	ldr	r4, [r5, #4]
 800587a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0ef      	beq.n	8005862 <_fflush_r+0xa>
 8005882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005884:	07d0      	lsls	r0, r2, #31
 8005886:	d404      	bmi.n	8005892 <_fflush_r+0x3a>
 8005888:	0599      	lsls	r1, r3, #22
 800588a:	d402      	bmi.n	8005892 <_fflush_r+0x3a>
 800588c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588e:	f000 f915 	bl	8005abc <__retarget_lock_acquire_recursive>
 8005892:	4628      	mov	r0, r5
 8005894:	4621      	mov	r1, r4
 8005896:	f7ff ff59 	bl	800574c <__sflush_r>
 800589a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800589c:	07da      	lsls	r2, r3, #31
 800589e:	4605      	mov	r5, r0
 80058a0:	d4e0      	bmi.n	8005864 <_fflush_r+0xc>
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	059b      	lsls	r3, r3, #22
 80058a6:	d4dd      	bmi.n	8005864 <_fflush_r+0xc>
 80058a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058aa:	f000 f908 	bl	8005abe <__retarget_lock_release_recursive>
 80058ae:	e7d9      	b.n	8005864 <_fflush_r+0xc>
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <_fflush_r+0x70>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	d101      	bne.n	80058ba <_fflush_r+0x62>
 80058b6:	68ac      	ldr	r4, [r5, #8]
 80058b8:	e7df      	b.n	800587a <_fflush_r+0x22>
 80058ba:	4b04      	ldr	r3, [pc, #16]	; (80058cc <_fflush_r+0x74>)
 80058bc:	429c      	cmp	r4, r3
 80058be:	bf08      	it	eq
 80058c0:	68ec      	ldreq	r4, [r5, #12]
 80058c2:	e7da      	b.n	800587a <_fflush_r+0x22>
 80058c4:	08006368 	.word	0x08006368
 80058c8:	08006388 	.word	0x08006388
 80058cc:	08006348 	.word	0x08006348

080058d0 <std>:
 80058d0:	2300      	movs	r3, #0
 80058d2:	b510      	push	{r4, lr}
 80058d4:	4604      	mov	r4, r0
 80058d6:	e9c0 3300 	strd	r3, r3, [r0]
 80058da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058de:	6083      	str	r3, [r0, #8]
 80058e0:	8181      	strh	r1, [r0, #12]
 80058e2:	6643      	str	r3, [r0, #100]	; 0x64
 80058e4:	81c2      	strh	r2, [r0, #14]
 80058e6:	6183      	str	r3, [r0, #24]
 80058e8:	4619      	mov	r1, r3
 80058ea:	2208      	movs	r2, #8
 80058ec:	305c      	adds	r0, #92	; 0x5c
 80058ee:	f7ff fb6f 	bl	8004fd0 <memset>
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <std+0x38>)
 80058f4:	6263      	str	r3, [r4, #36]	; 0x24
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <std+0x3c>)
 80058f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <std+0x40>)
 80058fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <std+0x44>)
 8005900:	6224      	str	r4, [r4, #32]
 8005902:	6323      	str	r3, [r4, #48]	; 0x30
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	08005d85 	.word	0x08005d85
 800590c:	08005da7 	.word	0x08005da7
 8005910:	08005ddf 	.word	0x08005ddf
 8005914:	08005e03 	.word	0x08005e03

08005918 <_cleanup_r>:
 8005918:	4901      	ldr	r1, [pc, #4]	; (8005920 <_cleanup_r+0x8>)
 800591a:	f000 b8af 	b.w	8005a7c <_fwalk_reent>
 800591e:	bf00      	nop
 8005920:	08005859 	.word	0x08005859

08005924 <__sfmoreglue>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	1e4a      	subs	r2, r1, #1
 8005928:	2568      	movs	r5, #104	; 0x68
 800592a:	4355      	muls	r5, r2
 800592c:	460e      	mov	r6, r1
 800592e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005932:	f000 f979 	bl	8005c28 <_malloc_r>
 8005936:	4604      	mov	r4, r0
 8005938:	b140      	cbz	r0, 800594c <__sfmoreglue+0x28>
 800593a:	2100      	movs	r1, #0
 800593c:	e9c0 1600 	strd	r1, r6, [r0]
 8005940:	300c      	adds	r0, #12
 8005942:	60a0      	str	r0, [r4, #8]
 8005944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005948:	f7ff fb42 	bl	8004fd0 <memset>
 800594c:	4620      	mov	r0, r4
 800594e:	bd70      	pop	{r4, r5, r6, pc}

08005950 <__sfp_lock_acquire>:
 8005950:	4801      	ldr	r0, [pc, #4]	; (8005958 <__sfp_lock_acquire+0x8>)
 8005952:	f000 b8b3 	b.w	8005abc <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	2000028c 	.word	0x2000028c

0800595c <__sfp_lock_release>:
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <__sfp_lock_release+0x8>)
 800595e:	f000 b8ae 	b.w	8005abe <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	2000028c 	.word	0x2000028c

08005968 <__sinit_lock_acquire>:
 8005968:	4801      	ldr	r0, [pc, #4]	; (8005970 <__sinit_lock_acquire+0x8>)
 800596a:	f000 b8a7 	b.w	8005abc <__retarget_lock_acquire_recursive>
 800596e:	bf00      	nop
 8005970:	20000287 	.word	0x20000287

08005974 <__sinit_lock_release>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__sinit_lock_release+0x8>)
 8005976:	f000 b8a2 	b.w	8005abe <__retarget_lock_release_recursive>
 800597a:	bf00      	nop
 800597c:	20000287 	.word	0x20000287

08005980 <__sinit>:
 8005980:	b510      	push	{r4, lr}
 8005982:	4604      	mov	r4, r0
 8005984:	f7ff fff0 	bl	8005968 <__sinit_lock_acquire>
 8005988:	69a3      	ldr	r3, [r4, #24]
 800598a:	b11b      	cbz	r3, 8005994 <__sinit+0x14>
 800598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005990:	f7ff bff0 	b.w	8005974 <__sinit_lock_release>
 8005994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005998:	6523      	str	r3, [r4, #80]	; 0x50
 800599a:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <__sinit+0x68>)
 800599c:	4a13      	ldr	r2, [pc, #76]	; (80059ec <__sinit+0x6c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80059a2:	42a3      	cmp	r3, r4
 80059a4:	bf04      	itt	eq
 80059a6:	2301      	moveq	r3, #1
 80059a8:	61a3      	streq	r3, [r4, #24]
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 f820 	bl	80059f0 <__sfp>
 80059b0:	6060      	str	r0, [r4, #4]
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 f81c 	bl	80059f0 <__sfp>
 80059b8:	60a0      	str	r0, [r4, #8]
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 f818 	bl	80059f0 <__sfp>
 80059c0:	2200      	movs	r2, #0
 80059c2:	60e0      	str	r0, [r4, #12]
 80059c4:	2104      	movs	r1, #4
 80059c6:	6860      	ldr	r0, [r4, #4]
 80059c8:	f7ff ff82 	bl	80058d0 <std>
 80059cc:	68a0      	ldr	r0, [r4, #8]
 80059ce:	2201      	movs	r2, #1
 80059d0:	2109      	movs	r1, #9
 80059d2:	f7ff ff7d 	bl	80058d0 <std>
 80059d6:	68e0      	ldr	r0, [r4, #12]
 80059d8:	2202      	movs	r2, #2
 80059da:	2112      	movs	r1, #18
 80059dc:	f7ff ff78 	bl	80058d0 <std>
 80059e0:	2301      	movs	r3, #1
 80059e2:	61a3      	str	r3, [r4, #24]
 80059e4:	e7d2      	b.n	800598c <__sinit+0xc>
 80059e6:	bf00      	nop
 80059e8:	08006310 	.word	0x08006310
 80059ec:	08005919 	.word	0x08005919

080059f0 <__sfp>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	4607      	mov	r7, r0
 80059f4:	f7ff ffac 	bl	8005950 <__sfp_lock_acquire>
 80059f8:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <__sfp+0x84>)
 80059fa:	681e      	ldr	r6, [r3, #0]
 80059fc:	69b3      	ldr	r3, [r6, #24]
 80059fe:	b913      	cbnz	r3, 8005a06 <__sfp+0x16>
 8005a00:	4630      	mov	r0, r6
 8005a02:	f7ff ffbd 	bl	8005980 <__sinit>
 8005a06:	3648      	adds	r6, #72	; 0x48
 8005a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	d503      	bpl.n	8005a18 <__sfp+0x28>
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	b30b      	cbz	r3, 8005a58 <__sfp+0x68>
 8005a14:	6836      	ldr	r6, [r6, #0]
 8005a16:	e7f7      	b.n	8005a08 <__sfp+0x18>
 8005a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a1c:	b9d5      	cbnz	r5, 8005a54 <__sfp+0x64>
 8005a1e:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <__sfp+0x88>)
 8005a20:	60e3      	str	r3, [r4, #12]
 8005a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a26:	6665      	str	r5, [r4, #100]	; 0x64
 8005a28:	f000 f847 	bl	8005aba <__retarget_lock_init_recursive>
 8005a2c:	f7ff ff96 	bl	800595c <__sfp_lock_release>
 8005a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a38:	6025      	str	r5, [r4, #0]
 8005a3a:	61a5      	str	r5, [r4, #24]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a44:	f7ff fac4 	bl	8004fd0 <memset>
 8005a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a50:	4620      	mov	r0, r4
 8005a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a54:	3468      	adds	r4, #104	; 0x68
 8005a56:	e7d9      	b.n	8005a0c <__sfp+0x1c>
 8005a58:	2104      	movs	r1, #4
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f7ff ff62 	bl	8005924 <__sfmoreglue>
 8005a60:	4604      	mov	r4, r0
 8005a62:	6030      	str	r0, [r6, #0]
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d1d5      	bne.n	8005a14 <__sfp+0x24>
 8005a68:	f7ff ff78 	bl	800595c <__sfp_lock_release>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	e7ee      	b.n	8005a50 <__sfp+0x60>
 8005a72:	bf00      	nop
 8005a74:	08006310 	.word	0x08006310
 8005a78:	ffff0001 	.word	0xffff0001

08005a7c <_fwalk_reent>:
 8005a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a80:	4606      	mov	r6, r0
 8005a82:	4688      	mov	r8, r1
 8005a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a88:	2700      	movs	r7, #0
 8005a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8005a92:	d505      	bpl.n	8005aa0 <_fwalk_reent+0x24>
 8005a94:	6824      	ldr	r4, [r4, #0]
 8005a96:	2c00      	cmp	r4, #0
 8005a98:	d1f7      	bne.n	8005a8a <_fwalk_reent+0xe>
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa0:	89ab      	ldrh	r3, [r5, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d907      	bls.n	8005ab6 <_fwalk_reent+0x3a>
 8005aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	d003      	beq.n	8005ab6 <_fwalk_reent+0x3a>
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	47c0      	blx	r8
 8005ab4:	4307      	orrs	r7, r0
 8005ab6:	3568      	adds	r5, #104	; 0x68
 8005ab8:	e7e9      	b.n	8005a8e <_fwalk_reent+0x12>

08005aba <__retarget_lock_init_recursive>:
 8005aba:	4770      	bx	lr

08005abc <__retarget_lock_acquire_recursive>:
 8005abc:	4770      	bx	lr

08005abe <__retarget_lock_release_recursive>:
 8005abe:	4770      	bx	lr

08005ac0 <__swhatbuf_r>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	460e      	mov	r6, r1
 8005ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	b096      	sub	sp, #88	; 0x58
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	da07      	bge.n	8005ae2 <__swhatbuf_r+0x22>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	89b3      	ldrh	r3, [r6, #12]
 8005ad8:	061a      	lsls	r2, r3, #24
 8005ada:	d410      	bmi.n	8005afe <__swhatbuf_r+0x3e>
 8005adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ae0:	e00e      	b.n	8005b00 <__swhatbuf_r+0x40>
 8005ae2:	466a      	mov	r2, sp
 8005ae4:	f000 f9b4 	bl	8005e50 <_fstat_r>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	dbf2      	blt.n	8005ad2 <__swhatbuf_r+0x12>
 8005aec:	9a01      	ldr	r2, [sp, #4]
 8005aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005af2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005af6:	425a      	negs	r2, r3
 8005af8:	415a      	adcs	r2, r3
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	e7ee      	b.n	8005adc <__swhatbuf_r+0x1c>
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	2000      	movs	r0, #0
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	b016      	add	sp, #88	; 0x58
 8005b06:	bd70      	pop	{r4, r5, r6, pc}

08005b08 <__smakebuf_r>:
 8005b08:	898b      	ldrh	r3, [r1, #12]
 8005b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b0c:	079d      	lsls	r5, r3, #30
 8005b0e:	4606      	mov	r6, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	d507      	bpl.n	8005b24 <__smakebuf_r+0x1c>
 8005b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	6163      	str	r3, [r4, #20]
 8005b20:	b002      	add	sp, #8
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	ab01      	add	r3, sp, #4
 8005b26:	466a      	mov	r2, sp
 8005b28:	f7ff ffca 	bl	8005ac0 <__swhatbuf_r>
 8005b2c:	9900      	ldr	r1, [sp, #0]
 8005b2e:	4605      	mov	r5, r0
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 f879 	bl	8005c28 <_malloc_r>
 8005b36:	b948      	cbnz	r0, 8005b4c <__smakebuf_r+0x44>
 8005b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b3c:	059a      	lsls	r2, r3, #22
 8005b3e:	d4ef      	bmi.n	8005b20 <__smakebuf_r+0x18>
 8005b40:	f023 0303 	bic.w	r3, r3, #3
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	81a3      	strh	r3, [r4, #12]
 8005b4a:	e7e3      	b.n	8005b14 <__smakebuf_r+0xc>
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <__smakebuf_r+0x7c>)
 8005b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	6020      	str	r0, [r4, #0]
 8005b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	9b00      	ldr	r3, [sp, #0]
 8005b5c:	6163      	str	r3, [r4, #20]
 8005b5e:	9b01      	ldr	r3, [sp, #4]
 8005b60:	6120      	str	r0, [r4, #16]
 8005b62:	b15b      	cbz	r3, 8005b7c <__smakebuf_r+0x74>
 8005b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f000 f983 	bl	8005e74 <_isatty_r>
 8005b6e:	b128      	cbz	r0, 8005b7c <__smakebuf_r+0x74>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	89a0      	ldrh	r0, [r4, #12]
 8005b7e:	4305      	orrs	r5, r0
 8005b80:	81a5      	strh	r5, [r4, #12]
 8005b82:	e7cd      	b.n	8005b20 <__smakebuf_r+0x18>
 8005b84:	08005919 	.word	0x08005919

08005b88 <_free_r>:
 8005b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b8a:	2900      	cmp	r1, #0
 8005b8c:	d048      	beq.n	8005c20 <_free_r+0x98>
 8005b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b92:	9001      	str	r0, [sp, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f1a1 0404 	sub.w	r4, r1, #4
 8005b9a:	bfb8      	it	lt
 8005b9c:	18e4      	addlt	r4, r4, r3
 8005b9e:	f000 f98b 	bl	8005eb8 <__malloc_lock>
 8005ba2:	4a20      	ldr	r2, [pc, #128]	; (8005c24 <_free_r+0x9c>)
 8005ba4:	9801      	ldr	r0, [sp, #4]
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	4615      	mov	r5, r2
 8005baa:	b933      	cbnz	r3, 8005bba <_free_r+0x32>
 8005bac:	6063      	str	r3, [r4, #4]
 8005bae:	6014      	str	r4, [r2, #0]
 8005bb0:	b003      	add	sp, #12
 8005bb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bb6:	f000 b985 	b.w	8005ec4 <__malloc_unlock>
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	d90b      	bls.n	8005bd6 <_free_r+0x4e>
 8005bbe:	6821      	ldr	r1, [r4, #0]
 8005bc0:	1862      	adds	r2, r4, r1
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bf04      	itt	eq
 8005bc6:	681a      	ldreq	r2, [r3, #0]
 8005bc8:	685b      	ldreq	r3, [r3, #4]
 8005bca:	6063      	str	r3, [r4, #4]
 8005bcc:	bf04      	itt	eq
 8005bce:	1852      	addeq	r2, r2, r1
 8005bd0:	6022      	streq	r2, [r4, #0]
 8005bd2:	602c      	str	r4, [r5, #0]
 8005bd4:	e7ec      	b.n	8005bb0 <_free_r+0x28>
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b10b      	cbz	r3, 8005be0 <_free_r+0x58>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d9fa      	bls.n	8005bd6 <_free_r+0x4e>
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	1855      	adds	r5, r2, r1
 8005be4:	42a5      	cmp	r5, r4
 8005be6:	d10b      	bne.n	8005c00 <_free_r+0x78>
 8005be8:	6824      	ldr	r4, [r4, #0]
 8005bea:	4421      	add	r1, r4
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	d1dd      	bne.n	8005bb0 <_free_r+0x28>
 8005bf4:	681c      	ldr	r4, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	4421      	add	r1, r4
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	e7d7      	b.n	8005bb0 <_free_r+0x28>
 8005c00:	d902      	bls.n	8005c08 <_free_r+0x80>
 8005c02:	230c      	movs	r3, #12
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	e7d3      	b.n	8005bb0 <_free_r+0x28>
 8005c08:	6825      	ldr	r5, [r4, #0]
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf04      	itt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	bf04      	itt	eq
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	6054      	str	r4, [r2, #4]
 8005c1e:	e7c7      	b.n	8005bb0 <_free_r+0x28>
 8005c20:	b003      	add	sp, #12
 8005c22:	bd30      	pop	{r4, r5, pc}
 8005c24:	200000a8 	.word	0x200000a8

08005c28 <_malloc_r>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	1ccd      	adds	r5, r1, #3
 8005c2c:	f025 0503 	bic.w	r5, r5, #3
 8005c30:	3508      	adds	r5, #8
 8005c32:	2d0c      	cmp	r5, #12
 8005c34:	bf38      	it	cc
 8005c36:	250c      	movcc	r5, #12
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	db01      	blt.n	8005c42 <_malloc_r+0x1a>
 8005c3e:	42a9      	cmp	r1, r5
 8005c40:	d903      	bls.n	8005c4a <_malloc_r+0x22>
 8005c42:	230c      	movs	r3, #12
 8005c44:	6033      	str	r3, [r6, #0]
 8005c46:	2000      	movs	r0, #0
 8005c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4a:	f000 f935 	bl	8005eb8 <__malloc_lock>
 8005c4e:	4921      	ldr	r1, [pc, #132]	; (8005cd4 <_malloc_r+0xac>)
 8005c50:	680a      	ldr	r2, [r1, #0]
 8005c52:	4614      	mov	r4, r2
 8005c54:	b99c      	cbnz	r4, 8005c7e <_malloc_r+0x56>
 8005c56:	4f20      	ldr	r7, [pc, #128]	; (8005cd8 <_malloc_r+0xb0>)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	b923      	cbnz	r3, 8005c66 <_malloc_r+0x3e>
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f000 f83c 	bl	8005cdc <_sbrk_r>
 8005c64:	6038      	str	r0, [r7, #0]
 8005c66:	4629      	mov	r1, r5
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 f837 	bl	8005cdc <_sbrk_r>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	d123      	bne.n	8005cba <_malloc_r+0x92>
 8005c72:	230c      	movs	r3, #12
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	4630      	mov	r0, r6
 8005c78:	f000 f924 	bl	8005ec4 <__malloc_unlock>
 8005c7c:	e7e3      	b.n	8005c46 <_malloc_r+0x1e>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	1b5b      	subs	r3, r3, r5
 8005c82:	d417      	bmi.n	8005cb4 <_malloc_r+0x8c>
 8005c84:	2b0b      	cmp	r3, #11
 8005c86:	d903      	bls.n	8005c90 <_malloc_r+0x68>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	441c      	add	r4, r3
 8005c8c:	6025      	str	r5, [r4, #0]
 8005c8e:	e004      	b.n	8005c9a <_malloc_r+0x72>
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	42a2      	cmp	r2, r4
 8005c94:	bf0c      	ite	eq
 8005c96:	600b      	streq	r3, [r1, #0]
 8005c98:	6053      	strne	r3, [r2, #4]
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f912 	bl	8005ec4 <__malloc_unlock>
 8005ca0:	f104 000b 	add.w	r0, r4, #11
 8005ca4:	1d23      	adds	r3, r4, #4
 8005ca6:	f020 0007 	bic.w	r0, r0, #7
 8005caa:	1ac2      	subs	r2, r0, r3
 8005cac:	d0cc      	beq.n	8005c48 <_malloc_r+0x20>
 8005cae:	1a1b      	subs	r3, r3, r0
 8005cb0:	50a3      	str	r3, [r4, r2]
 8005cb2:	e7c9      	b.n	8005c48 <_malloc_r+0x20>
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	6864      	ldr	r4, [r4, #4]
 8005cb8:	e7cc      	b.n	8005c54 <_malloc_r+0x2c>
 8005cba:	1cc4      	adds	r4, r0, #3
 8005cbc:	f024 0403 	bic.w	r4, r4, #3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d0e3      	beq.n	8005c8c <_malloc_r+0x64>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f000 f808 	bl	8005cdc <_sbrk_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d1dd      	bne.n	8005c8c <_malloc_r+0x64>
 8005cd0:	e7cf      	b.n	8005c72 <_malloc_r+0x4a>
 8005cd2:	bf00      	nop
 8005cd4:	200000a8 	.word	0x200000a8
 8005cd8:	200000ac 	.word	0x200000ac

08005cdc <_sbrk_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d06      	ldr	r5, [pc, #24]	; (8005cf8 <_sbrk_r+0x1c>)
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	f7fc f820 	bl	8001d2c <_sbrk>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_sbrk_r+0x1a>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_sbrk_r+0x1a>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	20000290 	.word	0x20000290

08005cfc <_raise_r>:
 8005cfc:	291f      	cmp	r1, #31
 8005cfe:	b538      	push	{r3, r4, r5, lr}
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	d904      	bls.n	8005d10 <_raise_r+0x14>
 8005d06:	2316      	movs	r3, #22
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d12:	b112      	cbz	r2, 8005d1a <_raise_r+0x1e>
 8005d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d18:	b94b      	cbnz	r3, 8005d2e <_raise_r+0x32>
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 f830 	bl	8005d80 <_getpid_r>
 8005d20:	462a      	mov	r2, r5
 8005d22:	4601      	mov	r1, r0
 8005d24:	4620      	mov	r0, r4
 8005d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d2a:	f000 b817 	b.w	8005d5c <_kill_r>
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d00a      	beq.n	8005d48 <_raise_r+0x4c>
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	d103      	bne.n	8005d3e <_raise_r+0x42>
 8005d36:	2316      	movs	r3, #22
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7e7      	b.n	8005d0e <_raise_r+0x12>
 8005d3e:	2400      	movs	r4, #0
 8005d40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d44:	4628      	mov	r0, r5
 8005d46:	4798      	blx	r3
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e7e0      	b.n	8005d0e <_raise_r+0x12>

08005d4c <raise>:
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <raise+0xc>)
 8005d4e:	4601      	mov	r1, r0
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f7ff bfd3 	b.w	8005cfc <_raise_r>
 8005d56:	bf00      	nop
 8005d58:	20000018 	.word	0x20000018

08005d5c <_kill_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d07      	ldr	r5, [pc, #28]	; (8005d7c <_kill_r+0x20>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	602b      	str	r3, [r5, #0]
 8005d6a:	f7fb ff57 	bl	8001c1c <_kill>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	d102      	bne.n	8005d78 <_kill_r+0x1c>
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	b103      	cbz	r3, 8005d78 <_kill_r+0x1c>
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000290 	.word	0x20000290

08005d80 <_getpid_r>:
 8005d80:	f7fb bf44 	b.w	8001c0c <_getpid>

08005d84 <__sread>:
 8005d84:	b510      	push	{r4, lr}
 8005d86:	460c      	mov	r4, r1
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	f000 f8a0 	bl	8005ed0 <_read_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	bfab      	itete	ge
 8005d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d96:	89a3      	ldrhlt	r3, [r4, #12]
 8005d98:	181b      	addge	r3, r3, r0
 8005d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d9e:	bfac      	ite	ge
 8005da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005da2:	81a3      	strhlt	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__swrite>:
 8005da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005daa:	461f      	mov	r7, r3
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	05db      	lsls	r3, r3, #23
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	4616      	mov	r6, r2
 8005db6:	d505      	bpl.n	8005dc4 <__swrite+0x1e>
 8005db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f000 f868 	bl	8005e94 <_lseek_r>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	f000 b817 	b.w	8005e0c <_write_r>

08005dde <__sseek>:
 8005dde:	b510      	push	{r4, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de6:	f000 f855 	bl	8005e94 <_lseek_r>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	bf15      	itete	ne
 8005df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dfa:	81a3      	strheq	r3, [r4, #12]
 8005dfc:	bf18      	it	ne
 8005dfe:	81a3      	strhne	r3, [r4, #12]
 8005e00:	bd10      	pop	{r4, pc}

08005e02 <__sclose>:
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 b813 	b.w	8005e30 <_close_r>
	...

08005e0c <_write_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	; (8005e2c <_write_r+0x20>)
 8005e10:	4604      	mov	r4, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7fb ff35 	bl	8001c8a <_write>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_write_r+0x1e>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_write_r+0x1e>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20000290 	.word	0x20000290

08005e30 <_close_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d06      	ldr	r5, [pc, #24]	; (8005e4c <_close_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fb ff41 	bl	8001cc2 <_close>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_close_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_close_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	20000290 	.word	0x20000290

08005e50 <_fstat_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	; (8005e70 <_fstat_r+0x20>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f7fb ff3c 	bl	8001cda <_fstat>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d102      	bne.n	8005e6c <_fstat_r+0x1c>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b103      	cbz	r3, 8005e6c <_fstat_r+0x1c>
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000290 	.word	0x20000290

08005e74 <_isatty_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d06      	ldr	r5, [pc, #24]	; (8005e90 <_isatty_r+0x1c>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	f7fb ff3b 	bl	8001cfa <_isatty>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_isatty_r+0x1a>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_isatty_r+0x1a>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	20000290 	.word	0x20000290

08005e94 <_lseek_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d07      	ldr	r5, [pc, #28]	; (8005eb4 <_lseek_r+0x20>)
 8005e98:	4604      	mov	r4, r0
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	602a      	str	r2, [r5, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f7fb ff34 	bl	8001d10 <_lseek>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_lseek_r+0x1e>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_lseek_r+0x1e>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	20000290 	.word	0x20000290

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	; (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f7ff bdff 	b.w	8005abc <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	20000288 	.word	0x20000288

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	; (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f7ff bdfa 	b.w	8005abe <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	20000288 	.word	0x20000288

08005ed0 <_read_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d07      	ldr	r5, [pc, #28]	; (8005ef0 <_read_r+0x20>)
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	4611      	mov	r1, r2
 8005eda:	2200      	movs	r2, #0
 8005edc:	602a      	str	r2, [r5, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f7fb feb6 	bl	8001c50 <_read>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_read_r+0x1e>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_read_r+0x1e>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20000290 	.word	0x20000290

08005ef4 <roundf>:
 8005ef4:	ee10 0a10 	vmov	r0, s0
 8005ef8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005efc:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8005f00:	2a16      	cmp	r2, #22
 8005f02:	dc15      	bgt.n	8005f30 <roundf+0x3c>
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	da08      	bge.n	8005f1a <roundf+0x26>
 8005f08:	3201      	adds	r2, #1
 8005f0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005f0e:	d101      	bne.n	8005f14 <roundf+0x20>
 8005f10:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005f14:	ee00 3a10 	vmov	s0, r3
 8005f18:	4770      	bx	lr
 8005f1a:	4908      	ldr	r1, [pc, #32]	; (8005f3c <roundf+0x48>)
 8005f1c:	4111      	asrs	r1, r2
 8005f1e:	4208      	tst	r0, r1
 8005f20:	d0fa      	beq.n	8005f18 <roundf+0x24>
 8005f22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f26:	4113      	asrs	r3, r2
 8005f28:	4403      	add	r3, r0
 8005f2a:	ea23 0301 	bic.w	r3, r3, r1
 8005f2e:	e7f1      	b.n	8005f14 <roundf+0x20>
 8005f30:	2a80      	cmp	r2, #128	; 0x80
 8005f32:	d1f1      	bne.n	8005f18 <roundf+0x24>
 8005f34:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	007fffff 	.word	0x007fffff

08005f40 <_init>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	bf00      	nop
 8005f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f46:	bc08      	pop	{r3}
 8005f48:	469e      	mov	lr, r3
 8005f4a:	4770      	bx	lr

08005f4c <_fini>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr
