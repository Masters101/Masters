
Support_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08008350  08008350  00018350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab8  08008ab8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008ab8  08008ab8  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ab8  08008ab8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001e8  08008ca8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08008ca8  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013366  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273e  00000000  00000000  0003357e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00035cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00036cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219a2  00000000  00000000  00037be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130de  00000000  00000000  0005958a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4e09  00000000  00000000  0006c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005584  00000000  00000000  001314c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008338 	.word	0x08008338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008338 	.word	0x08008338

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <Set_Motor_Parameters>:

#include "Motor_Control.h"
#include "math.h"

void Set_Motor_Parameters(uint8_t DIR) // SET MOTOR PARAMETERS --> NEED TO ADD PWM
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	if (DIR == FORWARD)
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d116      	bne.n	8000c86 <Set_Motor_Parameters+0x3e>
	{
		// Left Motor
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1); // dir1_L = PC9
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000c60:	f001 fe76 	bl	8002950 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0); // dir2_L = PC8
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000c6c:	f001 fe70 	bl	8002950 <HAL_GPIO_WritePin>

		// Right Motor
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0); // dir1_R = PC7
 8000c70:	2200      	movs	r2, #0
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000c76:	f001 fe6b 	bl	8002950 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1); // dir2_R = PC6
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000c80:	f001 fe66 	bl	8002950 <HAL_GPIO_WritePin>

		// Right Motor
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1); // dir1_R = PC7
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0); // dir2_R = PC6
	}
}
 8000c84:	e018      	b.n	8000cb8 <Set_Motor_Parameters+0x70>
	else if(DIR == BACKWARD)
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d115      	bne.n	8000cb8 <Set_Motor_Parameters+0x70>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0); // dir1_L = PC9
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c92:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000c94:	f001 fe5c 	bl	8002950 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1); // dir2_L = PC8
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000ca0:	f001 fe56 	bl	8002950 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1); // dir1_R = PC7
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000caa:	f001 fe51 	bl	8002950 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0); // dir2_R = PC6
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <Set_Motor_Parameters+0x78>)
 8000cb4:	f001 fe4c 	bl	8002950 <HAL_GPIO_WritePin>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <Read_Encoder_Top>:

float Read_Encoder_Top(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
	uint32_t myEnc_top;
	int16_t count1 = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	81fb      	strh	r3, [r7, #14]
	float current_pos_top;

	// TOP ENCODER
	myEnc_top = (TIM1 -> CNT);
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <Read_Encoder_Top+0x88>)
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	60bb      	str	r3, [r7, #8]
	count1 = (int16_t) myEnc_top/4;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	da00      	bge.n	8000ce2 <Read_Encoder_Top+0x1a>
 8000ce0:	3303      	adds	r3, #3
 8000ce2:	109b      	asrs	r3, r3, #2
 8000ce4:	81fb      	strh	r3, [r7, #14]
	current_pos_top = count1*((2*M_PI)/PPR)*RAD*Pulley;
 8000ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_i2d>
 8000cf0:	a313      	add	r3, pc, #76	; (adr r3, 8000d40 <Read_Encoder_Top+0x78>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fc7f 	bl	80005f8 <__aeabi_dmul>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	a311      	add	r3, pc, #68	; (adr r3, 8000d48 <Read_Encoder_Top+0x80>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fc76 	bl	80005f8 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <Read_Encoder_Top+0x8c>)
 8000d1a:	f7ff fc6d 	bl	80005f8 <__aeabi_dmul>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff ff3f 	bl	8000ba8 <__aeabi_d2f>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	607b      	str	r3, [r7, #4]

	return current_pos_top;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	ee07 3a90 	vmov	s15, r3
}
 8000d34:	eeb0 0a67 	vmov.f32	s0, s15
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	b68b71c3 	.word	0xb68b71c3
 8000d44:	3f79bc65 	.word	0x3f79bc65
 8000d48:	25e3ea4b 	.word	0x25e3ea4b
 8000d4c:	3fefeb28 	.word	0x3fefeb28
 8000d50:	40012c00 	.word	0x40012c00
 8000d54:	402f0000 	.word	0x402f0000

08000d58 <Read_Encoder_Left>:

float Read_Encoder_Left(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
	uint32_t myEnc_Left;
	float current_pos_left;
	int16_t count = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	81fb      	strh	r3, [r7, #14]

	// LEFT MOTOR ENCODER
	myEnc_Left = (TIM2 -> CNT);
 8000d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	60bb      	str	r3, [r7, #8]
	count = (int16_t) myEnc_Left/4;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da00      	bge.n	8000d74 <Read_Encoder_Left+0x1c>
 8000d72:	3303      	adds	r3, #3
 8000d74:	109b      	asrs	r3, r3, #2
 8000d76:	81fb      	strh	r3, [r7, #14]
	current_pos_left =  count*((2*M_PI)/PPR)*RAD*Radius;
 8000d78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbd1 	bl	8000524 <__aeabi_i2d>
 8000d82:	a314      	add	r3, pc, #80	; (adr r3, 8000dd4 <Read_Encoder_Left+0x7c>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fc36 	bl	80005f8 <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	a311      	add	r3, pc, #68	; (adr r3, 8000ddc <Read_Encoder_Left+0x84>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fc2d 	bl	80005f8 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <Read_Encoder_Left+0x78>)
 8000dac:	f7ff fc24 	bl	80005f8 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff fef6 	bl	8000ba8 <__aeabi_d2f>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	607b      	str	r3, [r7, #4]

	return current_pos_left;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	ee07 3a90 	vmov	s15, r3
}
 8000dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40590000 	.word	0x40590000
 8000dd4:	b68b71c3 	.word	0xb68b71c3
 8000dd8:	3f79bc65 	.word	0x3f79bc65
 8000ddc:	25e3ea4b 	.word	0x25e3ea4b
 8000de0:	3fefeb28 	.word	0x3fefeb28
 8000de4:	00000000 	.word	0x00000000

08000de8 <Read_Encoder_Right>:

float Read_Encoder_Right(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
	uint32_t myEnc_Right;
	int16_t count2 = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	81fb      	strh	r3, [r7, #14]
	float current_pos_right;

	// RIGHT MOTOR ENCODER
	myEnc_Right = (TIM3 -> CNT);
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <Read_Encoder_Right+0x88>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	60bb      	str	r3, [r7, #8]
	count2 = (int16_t) myEnc_Right/4;
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da00      	bge.n	8000e02 <Read_Encoder_Right+0x1a>
 8000e00:	3303      	adds	r3, #3
 8000e02:	109b      	asrs	r3, r3, #2
 8000e04:	81fb      	strh	r3, [r7, #14]
	current_pos_right = count2*((2*M_PI)/PPR)*RAD*Radius;
 8000e06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb8a 	bl	8000524 <__aeabi_i2d>
 8000e10:	a313      	add	r3, pc, #76	; (adr r3, 8000e60 <Read_Encoder_Right+0x78>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fbef 	bl	80005f8 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	a311      	add	r3, pc, #68	; (adr r3, 8000e68 <Read_Encoder_Right+0x80>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fbe6 	bl	80005f8 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <Read_Encoder_Right+0x8c>)
 8000e3a:	f7ff fbdd 	bl	80005f8 <__aeabi_dmul>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff feaf 	bl	8000ba8 <__aeabi_d2f>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	607b      	str	r3, [r7, #4]

	return current_pos_right;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	ee07 3a90 	vmov	s15, r3
}
 8000e54:	eeb0 0a67 	vmov.f32	s0, s15
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	b68b71c3 	.word	0xb68b71c3
 8000e64:	3f79bc65 	.word	0x3f79bc65
 8000e68:	25e3ea4b 	.word	0x25e3ea4b
 8000e6c:	3fefeb28 	.word	0x3fefeb28
 8000e70:	40000400 	.word	0x40000400
 8000e74:	40590000 	.word	0x40590000

08000e78 <Kill_Motors>:

void Kill_Motors(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <Kill_Motors+0x34>)
 8000e82:	f001 fd65 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	4808      	ldr	r0, [pc, #32]	; (8000eac <Kill_Motors+0x34>)
 8000e8c:	f001 fd60 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <Kill_Motors+0x34>)
 8000e98:	f001 fd5a 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <Kill_Motors+0x34>)
 8000ea4:	f001 fd54 	bl	8002950 <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	48000800 	.word	0x48000800

08000eb0 <pca9685_init>:
		3248, 3284, 3320, 3356, 3393, 3430, 3467, 3504, 3542, 3579, 3617, 3656, 3694, 3733, 3773, 3812, 3852, 3892,
		3932, 3973, 4013, 4055, 4095
};

void pca9685_init(pca9685_handle_t *handle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle != NULL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <pca9685_init+0x1c>
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <pca9685_init+0xb0>)
 8000ec2:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <pca9685_init+0xb4>)
 8000ec4:	2138      	movs	r1, #56	; 0x38
 8000ec6:	4828      	ldr	r0, [pc, #160]	; (8000f68 <pca9685_init+0xb8>)
 8000ec8:	f004 fb4a 	bl	8005560 <__assert_func>

	// Mode registers set to default values(Auto-Increment, Sleep, Open-Drain);
	uint8_t mode1_reg_default_value = 0b00110000u;
 8000ecc:	2330      	movs	r3, #48	; 0x30
 8000ece:	77bb      	strb	r3, [r7, #30]
	uint8_t mode2_reg_default_value = 0b00000000u;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	77fb      	strb	r3, [r7, #31]

	if (handle->inverted)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	799b      	ldrb	r3, [r3, #6]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <pca9685_init+0x34>
	{
		mode2_reg_default_value |= 0b00010000u;
 8000edc:	7ffb      	ldrb	r3, [r7, #31]
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	77fb      	strb	r3, [r7, #31]
	}

	uint8_t init_data1[] = { PCA9685_REGISTER_MODE1, mode1_reg_default_value};
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	773b      	strb	r3, [r7, #28]
 8000ee8:	7fbb      	ldrb	r3, [r7, #30]
 8000eea:	777b      	strb	r3, [r7, #29]
	uint8_t init_data2[] = { PCA9685_REGISTER_MODE2, mode2_reg_default_value};
 8000eec:	2301      	movs	r3, #1
 8000eee:	763b      	strb	r3, [r7, #24]
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
 8000ef2:	767b      	strb	r3, [r7, #25]

	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, init_data1, 2, PCA9685_I2C_TIMEOUT);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	8899      	ldrh	r1, [r3, #4]
 8000efc:	f107 021c 	add.w	r2, r7, #28
 8000f00:	2301      	movs	r3, #1
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2302      	movs	r3, #2
 8000f06:	f001 fded 	bl	8002ae4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, init_data2, 2, PCA9685_I2C_TIMEOUT);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	8899      	ldrh	r1, [r3, #4]
 8000f12:	f107 0218 	add.w	r2, r7, #24
 8000f16:	2301      	movs	r3, #1
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f001 fde2 	bl	8002ae4 <HAL_I2C_Master_Transmit>

	uint8_t startup_data[4] = {0x00, 0x00, 0x00, 0x10};
 8000f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f24:	617b      	str	r3, [r7, #20]
	uint8_t transfer[5];
	transfer[0] = PCA9685_REGISTER_ALL_LED_ON_L;
 8000f26:	23fa      	movs	r3, #250	; 0xfa
 8000f28:	733b      	strb	r3, [r7, #12]
 8000f2a:	697b      	ldr	r3, [r7, #20]

	memcpy(&transfer[1], startup_data, 4);
 8000f2c:	f8c7 300d 	str.w	r3, [r7, #13]

	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer, sizeof(startup_data) + 1, PCA9685_I2C_TIMEOUT);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	8899      	ldrh	r1, [r3, #4]
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2305      	movs	r3, #5
 8000f42:	f001 fdcf 	bl	8002ae4 <HAL_I2C_Master_Transmit>

	pca9685_set_pwm_frequency(handle, 1000);
 8000f46:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000f6c <pca9685_init+0xbc>
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f88a 	bl	8001064 <pca9685_set_pwm_frequency>
	pca9685_wakeup(handle);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f839 	bl	8000fc8 <pca9685_wakeup>
}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08008350 	.word	0x08008350
 8000f64:	08008630 	.word	0x08008630
 8000f68:	0800836c 	.word	0x0800836c
 8000f6c:	447a0000 	.word	0x447a0000

08000f70 <pca9685_sleep>:

static void pca9685_sleep(pca9685_handle_t *handle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	6078      	str	r0, [r7, #4]
	uint8_t mode1_reg;

	//if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &PCA9685_REGISTER_MODE1, 1, PCA9685_I2C_TIMEOUT) != HAL_OK)
	//{
	HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, &mode1_reg, 1, PCA9685_I2C_TIMEOUT);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	8899      	ldrh	r1, [r3, #4]
 8000f80:	f107 020f 	add.w	r2, r7, #15
 8000f84:	2301      	movs	r3, #1
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f001 fe9f 	bl	8002ccc <HAL_I2C_Master_Receive>
	//}

	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73fb      	strb	r3, [r7, #15]
	PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]

	uint8_t data[2] = {PCA9685_REGISTER_MODE1_SLEEP, mode1_reg};
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	733b      	strb	r3, [r7, #12]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	8899      	ldrh	r1, [r3, #4]
 8000fb2:	f107 020c 	add.w	r2, r7, #12
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f001 fd92 	bl	8002ae4 <HAL_I2C_Master_Transmit>
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <pca9685_wakeup>:

void pca9685_wakeup(pca9685_handle_t *handle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
	uint8_t mode1_reg;
	//if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &PCA9685_REGISTER_MODE1, 1, PCA9685_I2C_TIMEOUT) != HAL_OK)
	//{
	HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, &mode1_reg, 1, PCA9685_I2C_TIMEOUT);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	8899      	ldrh	r1, [r3, #4]
 8000fd8:	f107 020e 	add.w	r2, r7, #14
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f001 fe73 	bl	8002ccc <HAL_I2C_Master_Receive>
	//}

	bool restart_required = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]

	// Clear the restart bit for now and clear the sleep bit
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73bb      	strb	r3, [r7, #14]
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	f023 0310 	bic.w	r3, r3, #16
 8001006:	b2db      	uxtb	r3, r3
 8001008:	73bb      	strb	r3, [r7, #14]

	uint8_t data[2] = {PCA9685_REGISTER_MODE1_SLEEP, mode1_reg};
 800100a:	2310      	movs	r3, #16
 800100c:	733b      	strb	r3, [r7, #12]
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	8899      	ldrh	r1, [r3, #4]
 800101a:	f107 020c 	add.w	r2, r7, #12
 800101e:	2301      	movs	r3, #1
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2302      	movs	r3, #2
 8001024:	f001 fd5e 	bl	8002ae4 <HAL_I2C_Master_Transmit>

	if(restart_required)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <pca9685_wakeup+0x94>
	{
		HAL_Delay(1); // Oscillator requires at least 500us to stabilize
 800102e:	2001      	movs	r0, #1
 8001030:	f001 f9ce 	bl	80023d0 <HAL_Delay>
		PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73bb      	strb	r3, [r7, #14]
		uint8_t data[2] = {PCA9685_REGISTER_MODE1_SLEEP, mode1_reg};
 800103e:	2310      	movs	r3, #16
 8001040:	723b      	strb	r3, [r7, #8]
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	8899      	ldrh	r1, [r3, #4]
 800104e:	f107 0208 	add.w	r2, r7, #8
 8001052:	2301      	movs	r3, #1
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2302      	movs	r3, #2
 8001058:	f001 fd44 	bl	8002ae4 <HAL_I2C_Master_Transmit>
	}
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <pca9685_set_pwm_frequency>:

void pca9685_set_pwm_frequency(pca9685_handle_t *handle, float frequency)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	ed87 0a02 	vstr	s0, [r7, #8]
	assert(frequency >= 24);
 8001070:	edd7 7a02 	vldr	s15, [r7, #8]
 8001074:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	da05      	bge.n	800108e <pca9685_set_pwm_frequency+0x2a>
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <pca9685_set_pwm_frequency+0xac>)
 8001084:	4a23      	ldr	r2, [pc, #140]	; (8001114 <pca9685_set_pwm_frequency+0xb0>)
 8001086:	2181      	movs	r1, #129	; 0x81
 8001088:	4823      	ldr	r0, [pc, #140]	; (8001118 <pca9685_set_pwm_frequency+0xb4>)
 800108a:	f004 fa69 	bl	8005560 <__assert_func>
	assert(frequency <= 1526);
 800108e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001092:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800111c <pca9685_set_pwm_frequency+0xb8>
 8001096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d905      	bls.n	80010ac <pca9685_set_pwm_frequency+0x48>
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <pca9685_set_pwm_frequency+0xbc>)
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <pca9685_set_pwm_frequency+0xb0>)
 80010a4:	2182      	movs	r1, #130	; 0x82
 80010a6:	481c      	ldr	r0, [pc, #112]	; (8001118 <pca9685_set_pwm_frequency+0xb4>)
 80010a8:	f004 fa5a 	bl	8005560 <__assert_func>

	// Calculate the prescaler value (datasheet page 25)
	uint8_t prescaler = (uint8_t)roundf(25000000.0f / (4096 * frequency)) - 1;
 80010ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001124 <pca9685_set_pwm_frequency+0xc0>
 80010b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001128 <pca9685_set_pwm_frequency+0xc4>
 80010bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	f007 f912 	bl	80082ec <roundf>
 80010c8:	eef0 7a40 	vmov.f32	s15, s0
 80010cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80010d4:	793b      	ldrb	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	3b01      	subs	r3, #1
 80010da:	75fb      	strb	r3, [r7, #23]

	pca9685_sleep(handle); //must be in sleep mode to change frequency
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff ff47 	bl	8000f70 <pca9685_sleep>
	uint8_t prescaler_data[2] = {PCA9685_REGISTER_PRESCALER, prescaler};
 80010e2:	23fe      	movs	r3, #254	; 0xfe
 80010e4:	753b      	strb	r3, [r7, #20]
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, prescaler_data, 2, PCA9685_I2C_TIMEOUT); //write new prescaler
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8899      	ldrh	r1, [r3, #4]
 80010f2:	f107 0214 	add.w	r2, r7, #20
 80010f6:	2301      	movs	r3, #1
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2302      	movs	r3, #2
 80010fc:	f001 fcf2 	bl	8002ae4 <HAL_I2C_Master_Transmit>

	pca9685_wakeup(handle);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff ff61 	bl	8000fc8 <pca9685_wakeup>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	0800838c 	.word	0x0800838c
 8001114:	08008640 	.word	0x08008640
 8001118:	0800836c 	.word	0x0800836c
 800111c:	44bec000 	.word	0x44bec000
 8001120:	0800839c 	.word	0x0800839c
 8001124:	45800000 	.word	0x45800000
 8001128:	4bbebc20 	.word	0x4bbebc20

0800112c <pca9685_set_pwm_channel_times>:

void pca9685_set_pwm_channel_times(pca9685_handle_t *handle, unsigned channel, unsigned on_time, unsigned off_time)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af02      	add	r7, sp, #8
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
	assert(channel >= 0);
	assert(channel < 16);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d905      	bls.n	800114c <pca9685_set_pwm_channel_times+0x20>
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <pca9685_set_pwm_channel_times+0x98>)
 8001142:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <pca9685_set_pwm_channel_times+0x9c>)
 8001144:	2191      	movs	r1, #145	; 0x91
 8001146:	4821      	ldr	r0, [pc, #132]	; (80011cc <pca9685_set_pwm_channel_times+0xa0>)
 8001148:	f004 fa0a 	bl	8005560 <__assert_func>

	assert(on_time >= 0);
	assert(on_time <= 4096);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001152:	d905      	bls.n	8001160 <pca9685_set_pwm_channel_times+0x34>
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <pca9685_set_pwm_channel_times+0xa4>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <pca9685_set_pwm_channel_times+0x9c>)
 8001158:	2194      	movs	r1, #148	; 0x94
 800115a:	481c      	ldr	r0, [pc, #112]	; (80011cc <pca9685_set_pwm_channel_times+0xa0>)
 800115c:	f004 fa00 	bl	8005560 <__assert_func>

	assert(off_time >= 0);
	assert(off_time <= 4096);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001166:	d905      	bls.n	8001174 <pca9685_set_pwm_channel_times+0x48>
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <pca9685_set_pwm_channel_times+0xa8>)
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <pca9685_set_pwm_channel_times+0x9c>)
 800116c:	2197      	movs	r1, #151	; 0x97
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <pca9685_set_pwm_channel_times+0xa0>)
 8001170:	f004 f9f6 	bl	8005560 <__assert_func>

	uint8_t data_pwm[4] = { on_time, on_time >> 8u, off_time, off_time >> 8u };
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	773b      	strb	r3, [r7, #28]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b2db      	uxtb	r3, r3
 8001180:	777b      	strb	r3, [r7, #29]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	77bb      	strb	r3, [r7, #30]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	b2db      	uxtb	r3, r3
 800118e:	77fb      	strb	r3, [r7, #31]
	uint8_t transfer_pwm[5];
	transfer_pwm[0] =  PCA9685_REGISTER_LED0_ON_L + channel * 4;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3306      	adds	r3, #6
 800119a:	b2db      	uxtb	r3, r3
 800119c:	753b      	strb	r3, [r7, #20]
 800119e:	69fb      	ldr	r3, [r7, #28]
	memcpy(&transfer_pwm[1], data_pwm, sizeof(data_pwm));
 80011a0:	f8c7 3015 	str.w	r3, [r7, #21]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer_pwm, sizeof(data_pwm) + 1, PCA9685_I2C_TIMEOUT);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8899      	ldrh	r1, [r3, #4]
 80011ac:	f107 0214 	add.w	r2, r7, #20
 80011b0:	2301      	movs	r3, #1
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2305      	movs	r3, #5
 80011b6:	f001 fc95 	bl	8002ae4 <HAL_I2C_Master_Transmit>
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	080083b0 	.word	0x080083b0
 80011c8:	0800865c 	.word	0x0800865c
 80011cc:	0800836c 	.word	0x0800836c
 80011d0:	080083c0 	.word	0x080083c0
 80011d4:	080083d0 	.word	0x080083d0

080011d8 <pca9685_set_channel_duty_cycle>:

void pca9685_set_channel_duty_cycle(pca9685_handle_t *handle, unsigned channel, float duty_cycle, bool logarithmic)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	70fb      	strb	r3, [r7, #3]
	assert(duty_cycle >= 0.0);
 80011ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	da05      	bge.n	8001204 <pca9685_set_channel_duty_cycle+0x2c>
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <pca9685_set_channel_duty_cycle+0x110>)
 80011fa:	4a3c      	ldr	r2, [pc, #240]	; (80012ec <pca9685_set_channel_duty_cycle+0x114>)
 80011fc:	21a2      	movs	r1, #162	; 0xa2
 80011fe:	483c      	ldr	r0, [pc, #240]	; (80012f0 <pca9685_set_channel_duty_cycle+0x118>)
 8001200:	f004 f9ae 	bl	8005560 <__assert_func>
	assert(duty_cycle <= 1.0);
 8001204:	edd7 7a01 	vldr	s15, [r7, #4]
 8001208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d905      	bls.n	8001222 <pca9685_set_channel_duty_cycle+0x4a>
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <pca9685_set_channel_duty_cycle+0x11c>)
 8001218:	4a34      	ldr	r2, [pc, #208]	; (80012ec <pca9685_set_channel_duty_cycle+0x114>)
 800121a:	21a3      	movs	r1, #163	; 0xa3
 800121c:	4834      	ldr	r0, [pc, #208]	; (80012f0 <pca9685_set_channel_duty_cycle+0x118>)
 800121e:	f004 f99f 	bl	8005560 <__assert_func>

	if (duty_cycle == 0.0)
 8001222:	edd7 7a01 	vldr	s15, [r7, #4]
 8001226:	eef5 7a40 	vcmp.f32	s15, #0.0
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	d107      	bne.n	8001240 <pca9685_set_channel_duty_cycle+0x68>
	{
		pca9685_set_pwm_channel_times(handle, channel, 0, 4096); // Special value for always off
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	2200      	movs	r2, #0
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff ff77 	bl	800112c <pca9685_set_pwm_channel_times>
			unsigned off_time = (on_time + required_on_time) & 0xfffu;

			pca9685_set_pwm_channel_times(handle, channel, on_time, off_time);
	}

	}
 800123e:	e04e      	b.n	80012de <pca9685_set_channel_duty_cycle+0x106>
	else if (duty_cycle == 1.0)
 8001240:	edd7 7a01 	vldr	s15, [r7, #4]
 8001244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001248:	eef4 7a47 	vcmp.f32	s15, s14
 800124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001250:	d107      	bne.n	8001262 <pca9685_set_channel_duty_cycle+0x8a>
		pca9685_set_pwm_channel_times(handle, channel, 4096, 0); // Special value for always on
 8001252:	2300      	movs	r3, #0
 8001254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff ff66 	bl	800112c <pca9685_set_pwm_channel_times>
	}
 8001260:	e03d      	b.n	80012de <pca9685_set_channel_duty_cycle+0x106>
			if (logarithmic)
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d014      	beq.n	8001292 <pca9685_set_channel_duty_cycle+0xba>
				required_on_time = CIEL_8_12[(unsigned)roundf(255 * duty_cycle)];
 8001268:	edd7 7a01 	vldr	s15, [r7, #4]
 800126c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80012f8 <pca9685_set_channel_duty_cycle+0x120>
 8001270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	f007 f838 	bl	80082ec <roundf>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	ee17 2a90 	vmov	r2, s15
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <pca9685_set_channel_duty_cycle+0x124>)
 800128a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	e010      	b.n	80012b4 <pca9685_set_channel_duty_cycle+0xdc>
				required_on_time = (unsigned)roundf(4095 * duty_cycle);
 8001292:	edd7 7a01 	vldr	s15, [r7, #4]
 8001296:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001300 <pca9685_set_channel_duty_cycle+0x128>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f007 f823 	bl	80082ec <roundf>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	61fb      	str	r3, [r7, #28]
			unsigned on_time = (channel == 0) ? 0 : (channel * 256) - 1;
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <pca9685_set_channel_duty_cycle+0xea>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	3b01      	subs	r3, #1
 80012c0:	e000      	b.n	80012c4 <pca9685_set_channel_duty_cycle+0xec>
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
			unsigned off_time = (on_time + required_on_time) & 0xfffu;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d0:	617b      	str	r3, [r7, #20]
			pca9685_set_pwm_channel_times(handle, channel, on_time, off_time);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7ff ff27 	bl	800112c <pca9685_set_pwm_channel_times>
	}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	080083e4 	.word	0x080083e4
 80012ec:	0800867c 	.word	0x0800867c
 80012f0:	0800836c 	.word	0x0800836c
 80012f4:	080083f8 	.word	0x080083f8
 80012f8:	437f0000 	.word	0x437f0000
 80012fc:	08008430 	.word	0x08008430
 8001300:	457ff000 	.word	0x457ff000

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b096      	sub	sp, #88	; 0x58
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   	Mode = idle;
 800130a:	4b94      	ldr	r3, [pc, #592]	; (800155c <main+0x258>)
 800130c:	2202      	movs	r2, #2
 800130e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 fff8 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 fa60 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f000 fc34 	bl	8001b84 <MX_GPIO_Init>
  MX_TIM1_Init();
 800131c:	f000 fafe 	bl	800191c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001320:	f000 fb56 	bl	80019d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001324:	f000 fba8 	bl	8001a78 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001328:	f000 fab8 	bl	800189c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800132c:	f000 fbfa 	bl	8001b24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	uint8_t student[] = {'C','O','N','N','E','C','T','E','D'};
 8001330:	4a8b      	ldr	r2, [pc, #556]	; (8001560 <main+0x25c>)
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	ca07      	ldmia	r2, {r0, r1, r2}
 8001338:	c303      	stmia	r3!, {r0, r1}
 800133a:	701a      	strb	r2, [r3, #0]
	uint8_t ON[] = {'O','N','_','M','O','D','E'};
 800133c:	4a89      	ldr	r2, [pc, #548]	; (8001564 <main+0x260>)
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001346:	6018      	str	r0, [r3, #0]
 8001348:	3304      	adds	r3, #4
 800134a:	8019      	strh	r1, [r3, #0]
 800134c:	3302      	adds	r3, #2
 800134e:	0c0a      	lsrs	r2, r1, #16
 8001350:	701a      	strb	r2, [r3, #0]
	uint8_t OFF[] = {'O','F','F','_','M','O','D','E'};
 8001352:	4a85      	ldr	r2, [pc, #532]	; (8001568 <main+0x264>)
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135c:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart2, student, 9, 100);
 8001360:	f107 0120 	add.w	r1, r7, #32
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	2209      	movs	r2, #9
 8001368:	4880      	ldr	r0, [pc, #512]	; (800156c <main+0x268>)
 800136a:	f003 fdc7 	bl	8004efc <HAL_UART_Transmit>

	volatile uint8_t Kp = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
	volatile uint8_t Ki = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	73bb      	strb	r3, [r7, #14]
	volatile uint8_t Kd = 1;
 8001376:	2301      	movs	r3, #1
 8001378:	737b      	strb	r3, [r7, #13]
	float Error1;
	float Error2;
	float Error_Integral1 = 0;
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	657b      	str	r3, [r7, #84]	; 0x54
	float Previous_Error1 = 0;
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	653b      	str	r3, [r7, #80]	; 0x50
	float Error_Integral2 =0;
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float Previous_Error2 = 0;
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	64bb      	str	r3, [r7, #72]	; 0x48
	float Error_Derivative1 = 0;
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
	float Error_Derivative2 = 0;
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	643b      	str	r3, [r7, #64]	; 0x40

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ON_BUTTON == 1)
 800139e:	4b74      	ldr	r3, [pc, #464]	; (8001570 <main+0x26c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d119      	bne.n	80013dc <main+0xd8>
	  {
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 80013a8:	2102      	movs	r1, #2
 80013aa:	4872      	ldr	r0, [pc, #456]	; (8001574 <main+0x270>)
 80013ac:	f001 fab8 	bl	8002920 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d112      	bne.n	80013dc <main+0xd8>
		  {
			  Mode = ON_MODE;
 80013b6:	4b69      	ldr	r3, [pc, #420]	; (800155c <main+0x258>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f001 fac4 	bl	8002950 <HAL_GPIO_WritePin>
			  ON_BUTTON = 0;
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <main+0x26c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
   			  HAL_UART_Transmit(&huart2, ON, 7, 100);
 80013ce:	f107 0118 	add.w	r1, r7, #24
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	2207      	movs	r2, #7
 80013d6:	4865      	ldr	r0, [pc, #404]	; (800156c <main+0x268>)
 80013d8:	f003 fd90 	bl	8004efc <HAL_UART_Transmit>
		  }
	  }

	  if(OFF_BUTTON == 1)
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <main+0x274>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d11e      	bne.n	8001424 <main+0x120>
	  {
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1)
 80013e6:	2104      	movs	r1, #4
 80013e8:	4862      	ldr	r0, [pc, #392]	; (8001574 <main+0x270>)
 80013ea:	f001 fa99 	bl	8002920 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d117      	bne.n	8001424 <main+0x120>
		  {
			  Mode = OFF_MODE;
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <main+0x258>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f001 faa5 	bl	8002950 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	2140      	movs	r1, #64	; 0x40
 800140a:	485c      	ldr	r0, [pc, #368]	; (800157c <main+0x278>)
 800140c:	f001 faa0 	bl	8002950 <HAL_GPIO_WritePin>
			  OFF_BUTTON = 0;
 8001410:	4b59      	ldr	r3, [pc, #356]	; (8001578 <main+0x274>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, OFF, 8, 100);
 8001416:	f107 0110 	add.w	r1, r7, #16
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	2208      	movs	r2, #8
 800141e:	4853      	ldr	r0, [pc, #332]	; (800156c <main+0x268>)
 8001420:	f003 fd6c 	bl	8004efc <HAL_UART_Transmit>
		  }
	  }


	  switch(Mode){
 8001424:	4b4d      	ldr	r3, [pc, #308]	; (800155c <main+0x258>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	f000 81b7 	beq.w	800179e <main+0x49a>
 8001430:	2b02      	cmp	r3, #2
 8001432:	dcb4      	bgt.n	800139e <main+0x9a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <main+0x13c>
 8001438:	2b01      	cmp	r3, #1
 800143a:	f000 8193 	beq.w	8001764 <main+0x460>
 800143e:	e1af      	b.n	80017a0 <main+0x49c>

	  case ON_MODE:
	  {

		// Start Encoder Timer
		HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001440:	213c      	movs	r1, #60	; 0x3c
 8001442:	484f      	ldr	r0, [pc, #316]	; (8001580 <main+0x27c>)
 8001444:	f003 faca 	bl	80049dc <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001448:	213c      	movs	r1, #60	; 0x3c
 800144a:	484e      	ldr	r0, [pc, #312]	; (8001584 <main+0x280>)
 800144c:	f003 fac6 	bl	80049dc <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001450:	213c      	movs	r1, #60	; 0x3c
 8001452:	484d      	ldr	r0, [pc, #308]	; (8001588 <main+0x284>)
 8001454:	f003 fac2 	bl	80049dc <HAL_TIM_Encoder_Start>

	  	// Initialize and Startup PWM Driver
	  	pca9685_init(&handle);
 8001458:	484c      	ldr	r0, [pc, #304]	; (800158c <main+0x288>)
 800145a:	f7ff fd29 	bl	8000eb0 <pca9685_init>
	  	pca9685_set_pwm_frequency(&handle, 1000.0f);
 800145e:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001590 <main+0x28c>
 8001462:	484a      	ldr	r0, [pc, #296]	; (800158c <main+0x288>)
 8001464:	f7ff fdfe 	bl	8001064 <pca9685_set_pwm_frequency>
	  	pca9685_set_pwm_channel_times(&handle,0,4096,0); // Duty cycle of 0%
 8001468:	2300      	movs	r3, #0
 800146a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800146e:	2100      	movs	r1, #0
 8001470:	4846      	ldr	r0, [pc, #280]	; (800158c <main+0x288>)
 8001472:	f7ff fe5b 	bl	800112c <pca9685_set_pwm_channel_times>
	  	pca9685_set_pwm_channel_times(&handle,1,4096,0); // Duty cycle of 0%
 8001476:	2300      	movs	r3, #0
 8001478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800147c:	2101      	movs	r1, #1
 800147e:	4843      	ldr	r0, [pc, #268]	; (800158c <main+0x288>)
 8001480:	f7ff fe54 	bl	800112c <pca9685_set_pwm_channel_times>
	  	pca9685_set_channel_duty_cycle(&handle,0,0.0f,false);
 8001484:	2200      	movs	r2, #0
 8001486:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001594 <main+0x290>
 800148a:	2100      	movs	r1, #0
 800148c:	483f      	ldr	r0, [pc, #252]	; (800158c <main+0x288>)
 800148e:	f7ff fea3 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  	pca9685_set_channel_duty_cycle(&handle,1,0.0f,false);
 8001492:	2200      	movs	r2, #0
 8001494:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8001594 <main+0x290>
 8001498:	2101      	movs	r1, #1
 800149a:	483c      	ldr	r0, [pc, #240]	; (800158c <main+0x288>)
 800149c:	f7ff fe9c 	bl	80011d8 <pca9685_set_channel_duty_cycle>

	  	// Read Encoder Values
	  	char left_enc_buffer[8];
	  	current_pos_top = Read_Encoder_Top();
 80014a0:	f7ff fc12 	bl	8000cc8 <Read_Encoder_Top>
 80014a4:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	  	current_pos_left = Read_Encoder_Left();
 80014a8:	f7ff fc56 	bl	8000d58 <Read_Encoder_Left>
 80014ac:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	  	current_pos_right = Read_Encoder_Right();
 80014b0:	f7ff fc9a 	bl	8000de8 <Read_Encoder_Right>
 80014b4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

	  	sprintf(left_enc_buffer, "\n%.5f", current_pos_top);
 80014b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014ba:	f7ff f845 	bl	8000548 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	1d38      	adds	r0, r7, #4
 80014c4:	4934      	ldr	r1, [pc, #208]	; (8001598 <main+0x294>)
 80014c6:	f004 fe71 	bl	80061ac <siprintf>
	  	HAL_UART_Transmit(&huart2, left_enc_buffer, sizeof(left_enc_buffer), 100);
 80014ca:	1d39      	adds	r1, r7, #4
 80014cc:	2364      	movs	r3, #100	; 0x64
 80014ce:	2208      	movs	r2, #8
 80014d0:	4826      	ldr	r0, [pc, #152]	; (800156c <main+0x268>)
 80014d2:	f003 fd13 	bl	8004efc <HAL_UART_Transmit>

	  	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	///////////////////////////////////////////////// CONTROL LOOP ///////////////////////////////////////////////////

	  	// Proportional Error (Relative Position)
	  	Error1 = current_pos_top - current_pos_left;
 80014d6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  	//Error2 = Error1;
	  	Error2 = current_pos_top - current_pos_right;
 80014e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	  	// To void integral wind-up, restrict integral error to reasonable values
		//Integral Error
	  	Error_Integral1 = Error_Integral1 + Error1;
 80014f6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80014fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	  	//Error_Integral2 = Error_Integral1;
	  	Error_Integral2 = Error_Integral2 + Error2;
 8001506:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800150a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001512:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	  	if (Error_Integral1 > 50)
 8001516:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800151a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80015a4 <main+0x2a0>
 800151e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	dd02      	ble.n	800152e <main+0x22a>
	  	{
	  		Error_Integral1 = 50;  // Recommended in Tutorial
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <main+0x298>)
 800152a:	657b      	str	r3, [r7, #84]	; 0x54
 800152c:	e00a      	b.n	8001544 <main+0x240>
	  	}
	  	else if (Error_Integral1 < 50)
 800152e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001532:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80015a4 <main+0x2a0>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d501      	bpl.n	8001544 <main+0x240>
	  	{
	  		Error_Integral1 = -50;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <main+0x29c>)
 8001542:	657b      	str	r3, [r7, #84]	; 0x54
	  	}

	  	if(Error_Integral2 > 50)
 8001544:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001548:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80015a4 <main+0x2a0>
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd28      	ble.n	80015a8 <main+0x2a4>
	  	{
	  		Error_Integral2 = 50;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <main+0x298>)
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800155a:	e030      	b.n	80015be <main+0x2ba>
 800155c:	200002b8 	.word	0x200002b8
 8001560:	08008414 	.word	0x08008414
 8001564:	08008420 	.word	0x08008420
 8001568:	08008428 	.word	0x08008428
 800156c:	20000358 	.word	0x20000358
 8001570:	200003dd 	.word	0x200003dd
 8001574:	48000800 	.word	0x48000800
 8001578:	200003dc 	.word	0x200003dc
 800157c:	48000400 	.word	0x48000400
 8001580:	200002c0 	.word	0x200002c0
 8001584:	2000030c 	.word	0x2000030c
 8001588:	2000026c 	.word	0x2000026c
 800158c:	20000004 	.word	0x20000004
 8001590:	447a0000 	.word	0x447a0000
 8001594:	00000000 	.word	0x00000000
 8001598:	0800840c 	.word	0x0800840c
 800159c:	42480000 	.word	0x42480000
 80015a0:	c2480000 	.word	0xc2480000
 80015a4:	42480000 	.word	0x42480000
	  	}
	  	else if (Error_Integral2 < 50)
 80015a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80015ac:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80015a4 <main+0x2a0>
 80015b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	d501      	bpl.n	80015be <main+0x2ba>
		{
			Error_Integral2 = -50;
 80015ba:	4b7a      	ldr	r3, [pc, #488]	; (80017a4 <main+0x4a0>)
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

	  	// Derivative Error
	  	Error_Derivative1 = Error1 - Previous_Error1;
 80015be:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80015c2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80015c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  	Previous_Error1 = Error1;
 80015ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d0:	653b      	str	r3, [r7, #80]	; 0x50

	  	Error_Derivative2 = Error2 - Previous_Error2;
 80015d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015de:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  	Previous_Error2 = Error2;
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48

	  	// PID OUTPUT
	  	PID_Output1 = (Kp*Error1)+(Ki*Error_Integral1)+(Kd*Error_Derivative1); // Map to PWM Signal
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001606:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001612:	7b7b      	ldrb	r3, [r7, #13]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800161e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <main+0x4a4>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
	  	PID_Output2 = (Kp*Error2)+(Ki*Error_Integral2)+(Kd*Error_Derivative2); // Map to PWM Signal
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001650:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001668:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800166c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <main+0x4a8>)
 8001676:	edc3 7a00 	vstr	s15, [r3]

	  	if(current_pos_top <= Setpoint)
 800167a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800167e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	d813      	bhi.n	80016b0 <main+0x3ac>
	  	{
	  		Set_Motor_Parameters(Forward);
 8001688:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <main+0x4ac>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fada 	bl	8000c48 <Set_Motor_Parameters>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 8001694:	2200      	movs	r2, #0
 8001696:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80017b4 <main+0x4b0>
 800169a:	2100      	movs	r1, #0
 800169c:	4846      	ldr	r0, [pc, #280]	; (80017b8 <main+0x4b4>)
 800169e:	f7ff fd9b 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  		pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 80016a2:	2200      	movs	r2, #0
 80016a4:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80017b4 <main+0x4b0>
 80016a8:	2101      	movs	r1, #1
 80016aa:	4843      	ldr	r0, [pc, #268]	; (80017b8 <main+0x4b4>)
 80016ac:	f7ff fd94 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  	}

	  	if(current_pos_top > Setpoint)
 80016b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	dd13      	ble.n	80016e6 <main+0x3e2>
	  	{
	  		Set_Motor_Parameters(Backward);
 80016be:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <main+0x4b8>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fabf 	bl	8000c48 <Set_Motor_Parameters>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 80016ca:	2200      	movs	r2, #0
 80016cc:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80017b4 <main+0x4b0>
 80016d0:	2100      	movs	r1, #0
 80016d2:	4839      	ldr	r0, [pc, #228]	; (80017b8 <main+0x4b4>)
 80016d4:	f7ff fd80 	bl	80011d8 <pca9685_set_channel_duty_cycle>
			pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); // NEED TO SEND NEW DUTY CYCLE
 80016d8:	2200      	movs	r2, #0
 80016da:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80017b4 <main+0x4b0>
 80016de:	2101      	movs	r1, #1
 80016e0:	4835      	ldr	r0, [pc, #212]	; (80017b8 <main+0x4b4>)
 80016e2:	f7ff fd79 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  	}

	  	if(current_pos_top >= Max_Len)
 80016e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016ea:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80017c0 <main+0x4bc>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	db15      	blt.n	8001724 <main+0x420>
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);  // Trigger Relay if max rail length exceeded
 80016f8:	2201      	movs	r2, #1
 80016fa:	2104      	movs	r1, #4
 80016fc:	4831      	ldr	r0, [pc, #196]	; (80017c4 <main+0x4c0>)
 80016fe:	f001 f927 	bl	8002950 <HAL_GPIO_WritePin>
	  		Kill_Motors();
 8001702:	f7ff fbb9 	bl	8000e78 <Kill_Motors>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001706:	2200      	movs	r2, #0
 8001708:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80017b4 <main+0x4b0>
 800170c:	2100      	movs	r1, #0
 800170e:	482a      	ldr	r0, [pc, #168]	; (80017b8 <main+0x4b4>)
 8001710:	f7ff fd62 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  		pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001714:	2200      	movs	r2, #0
 8001716:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80017b4 <main+0x4b0>
 800171a:	2101      	movs	r1, #1
 800171c:	4826      	ldr	r0, [pc, #152]	; (80017b8 <main+0x4b4>)
 800171e:	f7ff fd5b 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  		while(1)
 8001722:	e7fe      	b.n	8001722 <main+0x41e>
	  		{
	  			// Do Nothing
	  		}
	  	}

	  	if(current_pos_top <= Min_Len)
 8001724:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001728:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80017c8 <main+0x4c4>
 800172c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d900      	bls.n	8001738 <main+0x434>
	  		{
	  			// Do Nothing
	  		}
	  	}

	  	break;
 8001736:	e033      	b.n	80017a0 <main+0x49c>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);  // Trigger Relay if min rail length exceeded
 8001738:	2201      	movs	r2, #1
 800173a:	2104      	movs	r1, #4
 800173c:	4821      	ldr	r0, [pc, #132]	; (80017c4 <main+0x4c0>)
 800173e:	f001 f907 	bl	8002950 <HAL_GPIO_WritePin>
	  		Kill_Motors();
 8001742:	f7ff fb99 	bl	8000e78 <Kill_Motors>
	  		pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001746:	2200      	movs	r2, #0
 8001748:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80017b4 <main+0x4b0>
 800174c:	2100      	movs	r1, #0
 800174e:	481a      	ldr	r0, [pc, #104]	; (80017b8 <main+0x4b4>)
 8001750:	f7ff fd42 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  		pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001754:	2200      	movs	r2, #0
 8001756:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80017b4 <main+0x4b0>
 800175a:	2101      	movs	r1, #1
 800175c:	4816      	ldr	r0, [pc, #88]	; (80017b8 <main+0x4b4>)
 800175e:	f7ff fd3b 	bl	80011d8 <pca9685_set_channel_duty_cycle>
	  		while(1)
 8001762:	e7fe      	b.n	8001762 <main+0x45e>
	  }

	  case OFF_MODE:
	  {
		  Kill_Motors();
 8001764:	f7ff fb88 	bl	8000e78 <Kill_Motors>
		  pca9685_set_channel_duty_cycle(&handle,0,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001768:	2200      	movs	r2, #0
 800176a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80017b4 <main+0x4b0>
 800176e:	2100      	movs	r1, #0
 8001770:	4811      	ldr	r0, [pc, #68]	; (80017b8 <main+0x4b4>)
 8001772:	f7ff fd31 	bl	80011d8 <pca9685_set_channel_duty_cycle>
		  pca9685_set_channel_duty_cycle(&handle,1,0.0f,false); //SET DUTY CYCLE TO ZERO
 8001776:	2200      	movs	r2, #0
 8001778:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80017b4 <main+0x4b0>
 800177c:	2101      	movs	r1, #1
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <main+0x4b4>)
 8001780:	f7ff fd2a 	bl	80011d8 <pca9685_set_channel_duty_cycle>

		  // Switch Encoder Timers Off
		  HAL_TIM_Encoder_Stop(&htim1,TIM_CHANNEL_ALL);
 8001784:	213c      	movs	r1, #60	; 0x3c
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <main+0x4c8>)
 8001788:	f003 f9b6 	bl	8004af8 <HAL_TIM_Encoder_Stop>
		  HAL_TIM_Encoder_Stop(&htim2,TIM_CHANNEL_ALL);
 800178c:	213c      	movs	r1, #60	; 0x3c
 800178e:	4810      	ldr	r0, [pc, #64]	; (80017d0 <main+0x4cc>)
 8001790:	f003 f9b2 	bl	8004af8 <HAL_TIM_Encoder_Stop>
		  HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 8001794:	213c      	movs	r1, #60	; 0x3c
 8001796:	480f      	ldr	r0, [pc, #60]	; (80017d4 <main+0x4d0>)
 8001798:	f003 f9ae 	bl	8004af8 <HAL_TIM_Encoder_Stop>

		  while(1)
 800179c:	e7fe      	b.n	800179c <main+0x498>
	  	break;
 800179e:	bf00      	nop
	  if(ON_BUTTON == 1)
 80017a0:	e5fd      	b.n	800139e <main+0x9a>
 80017a2:	bf00      	nop
 80017a4:	c2480000 	.word	0xc2480000
 80017a8:	200002bc 	.word	0x200002bc
 80017ac:	2000021c 	.word	0x2000021c
 80017b0:	20000000 	.word	0x20000000
 80017b4:	00000000 	.word	0x00000000
 80017b8:	20000004 	.word	0x20000004
 80017bc:	20000204 	.word	0x20000204
 80017c0:	43a28000 	.word	0x43a28000
 80017c4:	48000800 	.word	0x48000800
 80017c8:	c3a28000 	.word	0xc3a28000
 80017cc:	200002c0 	.word	0x200002c0
 80017d0:	2000030c 	.word	0x2000030c
 80017d4:	2000026c 	.word	0x2000026c

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b096      	sub	sp, #88	; 0x58
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e2:	2228      	movs	r2, #40	; 0x28
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 ff14 	bl	8005614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800180e:	2303      	movs	r3, #3
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800181c:	2301      	movs	r3, #1
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001820:	2310      	movs	r3, #16
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001824:	2302      	movs	r3, #2
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800182e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001832:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fdb5 	bl	80033a8 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001844:	f000 fa4e 	bl	8001ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001848:	230f      	movs	r3, #15
 800184a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184c:	2302      	movs	r3, #2
 800184e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	2102      	movs	r1, #2
 8001864:	4618      	mov	r0, r3
 8001866:	f002 fca7 	bl	80041b8 <HAL_RCC_ClockConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001870:	f000 fa38 	bl	8001ce4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8001874:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001878:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fecd 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001890:	f000 fa28 	bl	8001ce4 <Error_Handler>
  }
}
 8001894:	bf00      	nop
 8001896:	3758      	adds	r7, #88	; 0x58
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_I2C1_Init+0x74>)
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <MX_I2C1_Init+0x78>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_I2C1_Init+0x74>)
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <MX_I2C1_Init+0x7c>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_I2C1_Init+0x74>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_I2C1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_I2C1_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_I2C1_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_I2C1_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d6:	480e      	ldr	r0, [pc, #56]	; (8001910 <MX_I2C1_Init+0x74>)
 80018d8:	f001 f875 	bl	80029c6 <HAL_I2C_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018e2:	f000 f9ff 	bl	8001ce4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <MX_I2C1_Init+0x74>)
 80018ea:	f001 fcc5 	bl	8003278 <HAL_I2CEx_ConfigAnalogFilter>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018f4:	f000 f9f6 	bl	8001ce4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_I2C1_Init+0x74>)
 80018fc:	f001 fd07 	bl	800330e <HAL_I2CEx_ConfigDigitalFilter>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001906:	f000 f9ed 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000220 	.word	0x20000220
 8001914:	40005400 	.word	0x40005400
 8001918:	2000090e 	.word	0x2000090e

0800191c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2224      	movs	r2, #36	; 0x24
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fe72 	bl	8005614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <MX_TIM1_Init+0xac>)
 800193c:	4a23      	ldr	r2, [pc, #140]	; (80019cc <MX_TIM1_Init+0xb0>)
 800193e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <MX_TIM1_Init+0xac>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_TIM1_Init+0xac>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <MX_TIM1_Init+0xac>)
 800194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <MX_TIM1_Init+0xac>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_TIM1_Init+0xac>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <MX_TIM1_Init+0xac>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001966:	2303      	movs	r3, #3
 8001968:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800196e:	2301      	movs	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001976:	230a      	movs	r3, #10
 8001978:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800197e:	2301      	movs	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001986:	230a      	movs	r3, #10
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_TIM1_Init+0xac>)
 8001992:	f002 ff7d 	bl	8004890 <HAL_TIM_Encoder_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800199c:	f000 f9a2 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_TIM1_Init+0xac>)
 80019b2:	f003 f9e7 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80019bc:	f000 f992 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3730      	adds	r7, #48	; 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002c0 	.word	0x200002c0
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fe18 	bl	8005614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_TIM2_Init+0xa4>)
 80019f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_TIM2_Init+0xa4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_TIM2_Init+0xa4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_TIM2_Init+0xa4>)
 8001a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_TIM2_Init+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_TIM2_Init+0xa4>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a16:	2303      	movs	r3, #3
 8001a18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10 ;
 8001a26:	230a      	movs	r3, #10
 8001a28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM2_Init+0xa4>)
 8001a42:	f002 ff25 	bl	8004890 <HAL_TIM_Encoder_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a4c:	f000 f94a 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM2_Init+0xa4>)
 8001a5e:	f003 f991 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a68:	f000 f93c 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3730      	adds	r7, #48	; 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000030c 	.word	0x2000030c

08001a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fdc4 	bl	8005614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001a98:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <MX_TIM3_Init+0xa8>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001abc:	2303      	movs	r3, #3
 8001abe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001acc:	230a      	movs	r3, #10
 8001ace:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001adc:	230a      	movs	r3, #10
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001ae8:	f002 fed2 	bl	8004890 <HAL_TIM_Encoder_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001af2:	f000 f8f7 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001afe:	463b      	mov	r3, r7
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM3_Init+0xa4>)
 8001b04:	f003 f93e 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b0e:	f000 f8e9 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3730      	adds	r7, #48	; 0x30
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000026c 	.word	0x2000026c
 8001b20:	40000400 	.word	0x40000400

08001b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <MX_USART2_UART_Init+0x5c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b68:	f003 f97a 	bl	8004e60 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b72:	f000 f8b7 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000358 	.word	0x20000358
 8001b80:	40004400 	.word	0x40004400

08001b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ba4:	6153      	str	r3, [r2, #20]
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb2:	4b48      	ldr	r3, [pc, #288]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4a47      	ldr	r2, [pc, #284]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bbc:	6153      	str	r3, [r2, #20]
 8001bbe:	4b45      	ldr	r3, [pc, #276]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4a41      	ldr	r2, [pc, #260]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6153      	str	r3, [r2, #20]
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	4a3b      	ldr	r2, [pc, #236]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6153      	str	r3, [r2, #20]
 8001bee:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	21a0      	movs	r1, #160	; 0xa0
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c02:	f000 fea5 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c0c:	4832      	ldr	r0, [pc, #200]	; (8001cd8 <MX_GPIO_Init+0x154>)
 8001c0e:	f000 fe9f 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	4831      	ldr	r0, [pc, #196]	; (8001cdc <MX_GPIO_Init+0x158>)
 8001c18:	f000 fe9a 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <MX_GPIO_Init+0x15c>)
 8001c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	482a      	ldr	r0, [pc, #168]	; (8001cd8 <MX_GPIO_Init+0x154>)
 8001c30:	f000 fd04 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c34:	2320      	movs	r3, #32
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f000 fcf5 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f000 fce6 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c70:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <MX_GPIO_Init+0x154>)
 8001c8a:	f000 fcd7 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <MX_GPIO_Init+0x158>)
 8001ca6:	f000 fcc9 	bl	800263c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2007      	movs	r0, #7
 8001cb0:	f000 fc8d 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cb4:	2007      	movs	r0, #7
 8001cb6:	f000 fca6 	bl	8002606 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2008      	movs	r0, #8
 8001cc0:	f000 fc85 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001cc4:	2008      	movs	r0, #8
 8001cc6:	f000 fc9e 	bl	8002606 <HAL_NVIC_EnableIRQ>

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	10110000 	.word	0x10110000

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cec:	e7fe      	b.n	8001cec <Error_Handler+0x8>
	...

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_MspInit+0x44>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_MspInit+0x44>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6193      	str	r3, [r2, #24]
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_MspInit+0x44>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x44>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x44>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x44>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_I2C_MspInit+0xb8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d145      	bne.n	8001de6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6153      	str	r3, [r2, #20]
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6153      	str	r3, [r2, #20]
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d90:	2312      	movs	r3, #18
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001daa:	f000 fc47 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db2:	2312      	movs	r3, #18
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480b      	ldr	r0, [pc, #44]	; (8001df8 <HAL_I2C_MspInit+0xc0>)
 8001dca:	f000 fc37 	bl	800263c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_I2C_MspInit+0xbc>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	; 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40005400 	.word	0x40005400
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000400 	.word	0x48000400

08001dfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a55      	ldr	r2, [pc, #340]	; (8001f70 <HAL_TIM_Encoder_MspInit+0x174>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d146      	bne.n	8001eac <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1e:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4a54      	ldr	r2, [pc, #336]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4a4e      	ldr	r2, [pc, #312]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e40:	6153      	str	r3, [r2, #20]
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4a48      	ldr	r2, [pc, #288]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	6153      	str	r3, [r2, #20]
 8001e5a:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e66:	2301      	movs	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e76:	2302      	movs	r3, #2
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	4619      	mov	r1, r3
 8001e80:	483d      	ldr	r0, [pc, #244]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001e82:	f000 fbdb 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e98:	2306      	movs	r3, #6
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea6:	f000 fbc9 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eaa:	e05c      	b.n	8001f66 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb4:	d129      	bne.n	8001f0a <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	6153      	str	r3, [r2, #20]
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f000 fb9a 	bl	800263c <HAL_GPIO_Init>
}
 8001f08:	e02d      	b.n	8001f66 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM3)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x180>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d128      	bne.n	8001f66 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	61d3      	str	r3, [r2, #28]
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f36:	6153      	str	r3, [r2, #20]
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x178>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f44:	2350      	movs	r3, #80	; 0x50
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f54:	2302      	movs	r3, #2
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f000 fb6b 	bl	800263c <HAL_GPIO_Init>
}
 8001f66:	bf00      	nop
 8001f68:	3738      	adds	r7, #56	; 0x38
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	40000400 	.word	0x40000400

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_UART_MspInit+0x7c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d128      	bne.n	8001ff4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_UART_MspInit+0x80>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a16      	ldr	r2, [pc, #88]	; (8002000 <HAL_UART_MspInit+0x80>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_UART_MspInit+0x80>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_UART_MspInit+0x80>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_UART_MspInit+0x80>)
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	6153      	str	r3, [r2, #20]
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_UART_MspInit+0x80>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff0:	f000 fb24 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40004400 	.word	0x40004400
 8002000:	40021000 	.word	0x40021000

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <NMI_Handler+0x4>

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 f99e 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	interrupt_time = HAL_GetTick();
 800205c:	f000 f9ac 	bl	80023b8 <HAL_GetTick>
 8002060:	4603      	mov	r3, r0
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <EXTI1_IRQHandler+0x44>)
 8002064:	6013      	str	r3, [r2, #0]
	if((interrupt_time - last_interrupt) > 10)  // Debounce for 10ms
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <EXTI1_IRQHandler+0x44>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <EXTI1_IRQHandler+0x48>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b0a      	cmp	r3, #10
 8002072:	d90d      	bls.n	8002090 <EXTI1_IRQHandler+0x38>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 8002074:	2102      	movs	r1, #2
 8002076:	480b      	ldr	r0, [pc, #44]	; (80020a4 <EXTI1_IRQHandler+0x4c>)
 8002078:	f000 fc52 	bl	8002920 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <EXTI1_IRQHandler+0x30>
		{
			ON_BUTTON = 1;
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <EXTI1_IRQHandler+0x50>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
		}
		last_interrupt = interrupt_time;
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <EXTI1_IRQHandler+0x44>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <EXTI1_IRQHandler+0x48>)
 800208e:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002090:	2002      	movs	r0, #2
 8002092:	f000 fc75 	bl	8002980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000020c 	.word	0x2000020c
 80020a0:	20000208 	.word	0x20000208
 80020a4:	48000800 	.word	0x48000800
 80020a8:	200003dd 	.word	0x200003dd

080020ac <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and touch sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
	interrupt_time = HAL_GetTick();
 80020b0:	f000 f982 	bl	80023b8 <HAL_GetTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <EXTI2_TSC_IRQHandler+0x44>)
 80020b8:	6013      	str	r3, [r2, #0]
	if((interrupt_time - last_interrupt) > 10)  // Debounce for 10ms
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <EXTI2_TSC_IRQHandler+0x44>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <EXTI2_TSC_IRQHandler+0x48>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b0a      	cmp	r3, #10
 80020c6:	d90d      	bls.n	80020e4 <EXTI2_TSC_IRQHandler+0x38>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1)
 80020c8:	2104      	movs	r1, #4
 80020ca:	480b      	ldr	r0, [pc, #44]	; (80020f8 <EXTI2_TSC_IRQHandler+0x4c>)
 80020cc:	f000 fc28 	bl	8002920 <HAL_GPIO_ReadPin>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d102      	bne.n	80020dc <EXTI2_TSC_IRQHandler+0x30>
		{
			OFF_BUTTON = 1;
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <EXTI2_TSC_IRQHandler+0x50>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
		}
		last_interrupt = interrupt_time;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <EXTI2_TSC_IRQHandler+0x44>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <EXTI2_TSC_IRQHandler+0x48>)
 80020e2:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80020e4:	2004      	movs	r0, #4
 80020e6:	f000 fc4b 	bl	8002980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000020c 	.word	0x2000020c
 80020f4:	20000208 	.word	0x20000208
 80020f8:	48000800 	.word	0x48000800
 80020fc:	200003dc 	.word	0x200003dc

08002100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_kill>:

int _kill(int pid, int sig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800211a:	f003 fa3f 	bl	800559c <__errno>
 800211e:	4603      	mov	r3, r0
 8002120:	2216      	movs	r2, #22
 8002122:	601a      	str	r2, [r3, #0]
	return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_exit>:

void _exit (int status)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffe7 	bl	8002110 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002142:	e7fe      	b.n	8002142 <_exit+0x12>

08002144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e00a      	b.n	800216c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002156:	f3af 8000 	nop.w
 800215a:	4601      	mov	r1, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf0      	blt.n	8002156 <_read+0x12>
	}

return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e009      	b.n	80021a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf1      	blt.n	8002190 <_write+0x12>
	}
	return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_close>:

int _close(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	605a      	str	r2, [r3, #4]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_isatty>:

int _isatty(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return 1;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f003 f9a4 	bl	800559c <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20003000 	.word	0x20003000
 8002280:	00000400 	.word	0x00000400
 8002284:	20000210 	.word	0x20000210
 8002288:	200003f8 	.word	0x200003f8

0800228c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <LoopForever+0x6>)
  ldr r1, =_edata
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <LoopForever+0xe>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022cc:	4c0b      	ldr	r4, [pc, #44]	; (80022fc <LoopForever+0x16>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022da:	f7ff ffd7 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022de:	f003 f975 	bl	80055cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022e2:	f7ff f80f 	bl	8001304 <main>

080022e6 <LoopForever>:

LoopForever:
    b LoopForever
 80022e6:	e7fe      	b.n	80022e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80022f4:	08008ac0 	.word	0x08008ac0
  ldr r2, =_sbss
 80022f8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022fc:	200003f4 	.word	0x200003f4

08002300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC1_2_IRQHandler>
	...

08002304 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_Init+0x28>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_Init+0x28>)
 800230e:	f043 0310 	orr.w	r3, r3, #16
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 f94f 	bl	80025b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f808 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff fce6 	bl	8001cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000

08002330 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_InitTick+0x54>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_InitTick+0x58>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f967 	bl	8002622 <HAL_SYSTICK_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00e      	b.n	800237c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d80a      	bhi.n	800237a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f000 f92f 	bl	80025ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <HAL_InitTick+0x5c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000000c 	.word	0x2000000c
 8002388:	20000014 	.word	0x20000014
 800238c:	20000010 	.word	0x20000010

08002390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_IncTick+0x20>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_IncTick+0x24>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_IncTick+0x24>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000014 	.word	0x20000014
 80023b4:	200003e0 	.word	0x200003e0

080023b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_GetTick+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	200003e0 	.word	0x200003e0

080023d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffde 	bl	80023b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000014 	.word	0x20000014

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <__NVIC_EnableIRQ+0x38>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002584:	d301      	bcc.n	800258a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002586:	2301      	movs	r3, #1
 8002588:	e00f      	b.n	80025aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <SysTick_Config+0x40>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002592:	210f      	movs	r1, #15
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f7ff ff8e 	bl	80024b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <SysTick_Config+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <SysTick_Config+0x40>)
 80025a4:	2207      	movs	r2, #7
 80025a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e010 	.word	0xe000e010

080025b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff29 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e0:	f7ff ff3e 	bl	8002460 <__NVIC_GetPriorityGrouping>
 80025e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f7ff ff8e 	bl	800250c <NVIC_EncodePriority>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff5d 	bl	80024b8 <__NVIC_SetPriority>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff31 	bl	800247c <__NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffa2 	bl	8002574 <SysTick_Config>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264a:	e14e      	b.n	80028ea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8140 	beq.w	80028e4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d00b      	beq.n	8002684 <HAL_GPIO_Init+0x48>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002678:	2b11      	cmp	r3, #17
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b12      	cmp	r3, #18
 8002682:	d130      	bne.n	80026e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ba:	2201      	movs	r2, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0201 	and.w	r2, r3, #1
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0xea>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b12      	cmp	r3, #18
 8002724:	d123      	bne.n	800276e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	6939      	ldr	r1, [r7, #16]
 800276a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0203 	and.w	r2, r3, #3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 809a 	beq.w	80028e4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b0:	4b55      	ldr	r3, [pc, #340]	; (8002908 <HAL_GPIO_Init+0x2cc>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4a54      	ldr	r2, [pc, #336]	; (8002908 <HAL_GPIO_Init+0x2cc>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6193      	str	r3, [r2, #24]
 80027bc:	4b52      	ldr	r3, [pc, #328]	; (8002908 <HAL_GPIO_Init+0x2cc>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027c8:	4a50      	ldr	r2, [pc, #320]	; (800290c <HAL_GPIO_Init+0x2d0>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027f2:	d013      	beq.n	800281c <HAL_GPIO_Init+0x1e0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a46      	ldr	r2, [pc, #280]	; (8002910 <HAL_GPIO_Init+0x2d4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00d      	beq.n	8002818 <HAL_GPIO_Init+0x1dc>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a45      	ldr	r2, [pc, #276]	; (8002914 <HAL_GPIO_Init+0x2d8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d007      	beq.n	8002814 <HAL_GPIO_Init+0x1d8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a44      	ldr	r2, [pc, #272]	; (8002918 <HAL_GPIO_Init+0x2dc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_GPIO_Init+0x1d4>
 800280c:	2303      	movs	r3, #3
 800280e:	e006      	b.n	800281e <HAL_GPIO_Init+0x1e2>
 8002810:	2305      	movs	r3, #5
 8002812:	e004      	b.n	800281e <HAL_GPIO_Init+0x1e2>
 8002814:	2302      	movs	r3, #2
 8002816:	e002      	b.n	800281e <HAL_GPIO_Init+0x1e2>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_GPIO_Init+0x1e2>
 800281c:	2300      	movs	r3, #0
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	f002 0203 	and.w	r2, r2, #3
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	4093      	lsls	r3, r2
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800282e:	4937      	ldr	r1, [pc, #220]	; (800290c <HAL_GPIO_Init+0x2d0>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283c:	4b37      	ldr	r3, [pc, #220]	; (800291c <HAL_GPIO_Init+0x2e0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002860:	4a2e      	ldr	r2, [pc, #184]	; (800291c <HAL_GPIO_Init+0x2e0>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_GPIO_Init+0x2e0>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_GPIO_Init+0x2e0>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_GPIO_Init+0x2e0>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028b4:	4a19      	ldr	r2, [pc, #100]	; (800291c <HAL_GPIO_Init+0x2e0>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_GPIO_Init+0x2e0>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028de:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_GPIO_Init+0x2e0>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f aea9 	bne.w	800264c <HAL_GPIO_Init+0x10>
  }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000
 800290c:	40010000 	.word	0x40010000
 8002910:	48000400 	.word	0x48000400
 8002914:	48000800 	.word	0x48000800
 8002918:	48000c00 	.word	0x48000c00
 800291c:	40010400 	.word	0x40010400

08002920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800296c:	e002      	b.n	8002974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002996:	4a05      	ldr	r2, [pc, #20]	; (80029ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f806 	bl	80029b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40010400 	.word	0x40010400

080029b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e081      	b.n	8002adc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff f9a3 	bl	8001d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2224      	movs	r2, #36	; 0x24
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	e006      	b.n	8002a4e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d104      	bne.n	8002a60 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a72:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	ea42 0103 	orr.w	r1, r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	021a      	lsls	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69d9      	ldr	r1, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	817b      	strh	r3, [r7, #10]
 8002af4:	4613      	mov	r3, r2
 8002af6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 80da 	bne.w	8002cba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2C_Master_Transmit+0x30>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0d3      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1d8>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b1c:	f7ff fc4c 	bl	80023b8 <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2319      	movs	r3, #25
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f9e6 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0be      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2221      	movs	r2, #33	; 0x21
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	893a      	ldrh	r2, [r7, #8]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2bff      	cmp	r3, #255	; 0xff
 8002b6e:	d90e      	bls.n	8002b8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	4b51      	ldr	r3, [pc, #324]	; (8002cc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fb48 	bl	800321c <I2C_TransferConfig>
 8002b8c:	e06c      	b.n	8002c68 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	4b48      	ldr	r3, [pc, #288]	; (8002cc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fb37 	bl	800321c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002bae:	e05b      	b.n	8002c68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	6a39      	ldr	r1, [r7, #32]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f9e3 	bl	8002f80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e07b      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d034      	beq.n	8002c68 <HAL_I2C_Master_Transmit+0x184>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d130      	bne.n	8002c68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f975 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e04d      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2bff      	cmp	r3, #255	; 0xff
 8002c28:	d90e      	bls.n	8002c48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 faeb 	bl	800321c <I2C_TransferConfig>
 8002c46:	e00f      	b.n	8002c68 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fada 	bl	800321c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d19e      	bne.n	8002bb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f9c2 	bl	8003000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e01a      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	80002000 	.word	0x80002000
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	460b      	mov	r3, r1
 8002cda:	817b      	strh	r3, [r7, #10]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	f040 80db 	bne.w	8002ea4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Receive+0x30>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0d4      	b.n	8002ea6 <HAL_I2C_Master_Receive+0x1da>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d04:	f7ff fb58 	bl	80023b8 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2319      	movs	r3, #25
 8002d10:	2201      	movs	r2, #1
 8002d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8f2 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0bf      	b.n	8002ea6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2222      	movs	r2, #34	; 0x22
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2210      	movs	r2, #16
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	893a      	ldrh	r2, [r7, #8]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2bff      	cmp	r3, #255	; 0xff
 8002d56:	d90e      	bls.n	8002d76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	22ff      	movs	r2, #255	; 0xff
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <HAL_I2C_Master_Receive+0x1e4>)
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa54 	bl	800321c <I2C_TransferConfig>
 8002d74:	e06d      	b.n	8002e52 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	8979      	ldrh	r1, [r7, #10]
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_I2C_Master_Receive+0x1e4>)
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fa43 	bl	800321c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d96:	e05c      	b.n	8002e52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6a39      	ldr	r1, [r7, #32]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f96b 	bl	8003078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e07c      	b.n	8002ea6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d034      	beq.n	8002e52 <HAL_I2C_Master_Receive+0x186>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d130      	bne.n	8002e52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f880 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e04d      	b.n	8002ea6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2bff      	cmp	r3, #255	; 0xff
 8002e12:	d90e      	bls.n	8002e32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	22ff      	movs	r2, #255	; 0xff
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	8979      	ldrh	r1, [r7, #10]
 8002e22:	2300      	movs	r3, #0
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f9f6 	bl	800321c <I2C_TransferConfig>
 8002e30:	e00f      	b.n	8002e52 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	8979      	ldrh	r1, [r7, #10]
 8002e44:	2300      	movs	r3, #0
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f9e5 	bl	800321c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d19d      	bne.n	8002d98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	6a39      	ldr	r1, [r7, #32]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f8cd 	bl	8003000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e01a      	b.n	8002ea6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2220      	movs	r2, #32
 8002e76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_I2C_Master_Receive+0x1e8>)
 8002e84:	400b      	ands	r3, r1
 8002e86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	80002400 	.word	0x80002400
 8002eb4:	fe00e800 	.word	0xfe00e800

08002eb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d103      	bne.n	8002ed6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d007      	beq.n	8002ef4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	619a      	str	r2, [r3, #24]
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f10:	e022      	b.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d01e      	beq.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7ff fa4d 	bl	80023b8 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d113      	bne.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e00f      	b.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d0cd      	beq.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f8c:	e02c      	b.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f8dc 	bl	8003150 <I2C_IsAcknowledgeFailed>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e02a      	b.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d01e      	beq.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7ff fa05 	bl	80023b8 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d113      	bne.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d1cb      	bne.n	8002f8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300c:	e028      	b.n	8003060 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f89c 	bl	8003150 <I2C_IsAcknowledgeFailed>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e026      	b.n	8003070 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7ff f9c9 	bl	80023b8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d113      	bne.n	8003060 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e007      	b.n	8003070 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b20      	cmp	r3, #32
 800306c:	d1cf      	bne.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003084:	e055      	b.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f860 	bl	8003150 <I2C_IsAcknowledgeFailed>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e053      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d129      	bne.n	80030fc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d105      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e03f      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2220      	movs	r2, #32
 80030c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80030d6:	400b      	ands	r3, r1
 80030d8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e022      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7ff f95c 	bl	80023b8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	429a      	cmp	r2, r3
 800310a:	d302      	bcc.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e007      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d1a2      	bne.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b10      	cmp	r3, #16
 8003168:	d151      	bne.n	800320e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800316a:	e022      	b.n	80031b2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d01e      	beq.n	80031b2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7ff f920 	bl	80023b8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <I2C_IsAcknowledgeFailed+0x3a>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e02e      	b.n	8003210 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d1d5      	bne.n	800316c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2210      	movs	r2, #16
 80031c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2220      	movs	r2, #32
 80031ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fe71 	bl	8002eb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <I2C_IsAcknowledgeFailed+0xc8>)
 80031e2:	400b      	ands	r3, r1
 80031e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	4613      	mov	r3, r2
 800322c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	0d5b      	lsrs	r3, r3, #21
 8003238:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <I2C_TransferConfig+0x58>)
 800323e:	430b      	orrs	r3, r1
 8003240:	43db      	mvns	r3, r3
 8003242:	ea02 0103 	and.w	r1, r2, r3
 8003246:	897b      	ldrh	r3, [r7, #10]
 8003248:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800324c:	7a7b      	ldrb	r3, [r7, #9]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	431a      	orrs	r2, r3
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	03ff63ff 	.word	0x03ff63ff

08003278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b20      	cmp	r3, #32
 800328c:	d138      	bne.n	8003300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003298:	2302      	movs	r3, #2
 800329a:	e032      	b.n	8003302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b20      	cmp	r3, #32
 8003322:	d139      	bne.n	8003398 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800332e:	2302      	movs	r3, #2
 8003330:	e033      	b.n	800339a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2224      	movs	r2, #36	; 0x24
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003360:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f000 bef4 	b.w	80041aa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 816a 	beq.w	80036a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033d2:	4bb3      	ldr	r3, [pc, #716]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d00c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033de:	4bb0      	ldr	r3, [pc, #704]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d159      	bne.n	800349e <HAL_RCC_OscConfig+0xf6>
 80033ea:	4bad      	ldr	r3, [pc, #692]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f6:	d152      	bne.n	800349e <HAL_RCC_OscConfig+0xf6>
 80033f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800340c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <HAL_RCC_OscConfig+0x82>
 8003424:	4b9e      	ldr	r3, [pc, #632]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	e015      	b.n	8003456 <HAL_RCC_OscConfig+0xae>
 800342a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800343e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003442:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003446:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003452:	4b93      	ldr	r3, [pc, #588]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800345a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800345e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003462:	fa92 f2a2 	rbit	r2, r2
 8003466:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800346a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800346e:	fab2 f282 	clz	r2, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f042 0220 	orr.w	r2, r2, #32
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	f002 021f 	and.w	r2, r2, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 810c 	beq.w	80036a4 <HAL_RCC_OscConfig+0x2fc>
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8106 	bne.w	80036a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f000 be86 	b.w	80041aa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x110>
 80034aa:	4b7d      	ldr	r3, [pc, #500]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7c      	ldr	r2, [pc, #496]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e030      	b.n	800351a <HAL_RCC_OscConfig+0x172>
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x134>
 80034c2:	4b77      	ldr	r3, [pc, #476]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a76      	ldr	r2, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b74      	ldr	r3, [pc, #464]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a73      	ldr	r2, [pc, #460]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01e      	b.n	800351a <HAL_RCC_OscConfig+0x172>
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e6:	d10c      	bne.n	8003502 <HAL_RCC_OscConfig+0x15a>
 80034e8:	4b6d      	ldr	r3, [pc, #436]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6c      	ldr	r2, [pc, #432]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a69      	ldr	r2, [pc, #420]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	e00b      	b.n	800351a <HAL_RCC_OscConfig+0x172>
 8003502:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a66      	ldr	r2, [pc, #408]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b64      	ldr	r3, [pc, #400]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a63      	ldr	r2, [pc, #396]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800351a:	4b61      	ldr	r3, [pc, #388]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f023 020f 	bic.w	r2, r3, #15
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	495d      	ldr	r1, [pc, #372]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d059      	beq.n	80035ec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe ff3e 	bl	80023b8 <HAL_GetTick>
 800353c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003542:	f7fe ff39 	bl	80023b8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d902      	bls.n	8003558 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	f000 be29 	b.w	80041aa <HAL_RCC_OscConfig+0xe02>
 8003558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800356c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d102      	bne.n	800358a <HAL_RCC_OscConfig+0x1e2>
 8003584:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x20e>
 800358a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800358e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800359e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80035c2:	fa92 f2a2 	rbit	r2, r2
 80035c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80035ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ab      	beq.n	8003542 <HAL_RCC_OscConfig+0x19a>
 80035ea:	e05c      	b.n	80036a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fee4 	bl	80023b8 <HAL_GetTick>
 80035f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f6:	f7fe fedf 	bl	80023b8 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d902      	bls.n	800360c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	f000 bdcf 	b.w	80041aa <HAL_RCC_OscConfig+0xe02>
 800360c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003610:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003620:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HAL_RCC_OscConfig+0x296>
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x2c2>
 800363e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003642:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003656:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800365a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_RCC_OscConfig+0x2f8>)
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800366e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003672:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003676:	fa92 f2a2 	rbit	r2, r2
 800367a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800367e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f042 0220 	orr.w	r2, r2, #32
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f002 021f 	and.w	r2, r2, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ab      	bne.n	80035f6 <HAL_RCC_OscConfig+0x24e>
 800369e:	e002      	b.n	80036a6 <HAL_RCC_OscConfig+0x2fe>
 80036a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 816f 	beq.w	8003994 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036b6:	4bd0      	ldr	r3, [pc, #832]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036c2:	4bcd      	ldr	r3, [pc, #820]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d16c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x400>
 80036ce:	4bca      	ldr	r3, [pc, #808]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d166      	bne.n	80037a8 <HAL_RCC_OscConfig+0x400>
 80036da:	2302      	movs	r3, #2
 80036dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80036ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_RCC_OscConfig+0x362>
 8003704:	4bbc      	ldr	r3, [pc, #752]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e013      	b.n	8003732 <HAL_RCC_OscConfig+0x38a>
 800370a:	2302      	movs	r3, #2
 800370c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800371c:	2302      	movs	r3, #2
 800371e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003722:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800372e:	4bb2      	ldr	r3, [pc, #712]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2202      	movs	r2, #2
 8003734:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003738:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003744:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0220 	orr.w	r2, r2, #32
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_RCC_OscConfig+0x3cc>
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d002      	beq.n	8003774 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f000 bd1b 	b.w	80041aa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4ba0      	ldr	r3, [pc, #640]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	21f8      	movs	r1, #248	; 0xf8
 8003784:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800378c:	fa91 f1a1 	rbit	r1, r1
 8003790:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003794:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003798:	fab1 f181 	clz	r1, r1
 800379c:	b2c9      	uxtb	r1, r1
 800379e:	408b      	lsls	r3, r1
 80037a0:	4995      	ldr	r1, [pc, #596]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	e0f5      	b.n	8003994 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 8085 	beq.w	80038be <HAL_RCC_OscConfig+0x516>
 80037b4:	2301      	movs	r3, #1
 80037b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80037c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	461a      	mov	r2, r3
 80037dc:	2301      	movs	r3, #1
 80037de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fdea 	bl	80023b8 <HAL_GetTick>
 80037e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fe fde5 	bl	80023b8 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	f000 bcd5 	b.w	80041aa <HAL_RCC_OscConfig+0xe02>
 8003800:	2302      	movs	r3, #2
 8003802:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003812:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0x488>
 800382a:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e013      	b.n	8003858 <HAL_RCC_OscConfig+0x4b0>
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003842:	2302      	movs	r3, #2
 8003844:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003848:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2202      	movs	r2, #2
 800385a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800385e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003862:	fa92 f2a2 	rbit	r2, r2
 8003866:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800386a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0af      	beq.n	80037ea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	21f8      	movs	r1, #248	; 0xf8
 800389a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038a2:	fa91 f1a1 	rbit	r1, r1
 80038a6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038ae:	fab1 f181 	clz	r1, r1
 80038b2:	b2c9      	uxtb	r1, r1
 80038b4:	408b      	lsls	r3, r1
 80038b6:	4950      	ldr	r1, [pc, #320]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e06a      	b.n	8003994 <HAL_RCC_OscConfig+0x5ec>
 80038be:	2301      	movs	r3, #1
 80038c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80038d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	461a      	mov	r2, r3
 80038e6:	2300      	movs	r3, #0
 80038e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fe fd65 	bl	80023b8 <HAL_GetTick>
 80038ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	e00a      	b.n	800390a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe fd60 	bl	80023b8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d902      	bls.n	800390a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	f000 bc50 	b.w	80041aa <HAL_RCC_OscConfig+0xe02>
 800390a:	2302      	movs	r3, #2
 800390c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800391c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_RCC_OscConfig+0x592>
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	e013      	b.n	8003962 <HAL_RCC_OscConfig+0x5ba>
 800393a:	2302      	movs	r3, #2
 800393c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800394c:	2302      	movs	r3, #2
 800394e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003952:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <HAL_RCC_OscConfig+0x650>)
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2202      	movs	r2, #2
 8003964:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003968:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800396c:	fa92 f2a2 	rbit	r2, r2
 8003970:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003974:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003978:	fab2 f282 	clz	r2, r2
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f042 0220 	orr.w	r2, r2, #32
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	f002 021f 	and.w	r2, r2, #31
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f202 	lsl.w	r2, r1, r2
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1af      	bne.n	80038f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80da 	beq.w	8003b58 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d069      	beq.n	8003a82 <HAL_RCC_OscConfig+0x6da>
 80039ae:	2301      	movs	r3, #1
 80039b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80039c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_OscConfig+0x654>)
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	461a      	mov	r2, r3
 80039d4:	2301      	movs	r3, #1
 80039d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d8:	f7fe fcee 	bl	80023b8 <HAL_GetTick>
 80039dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e0:	e00e      	b.n	8003a00 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e2:	f7fe fce9 	bl	80023b8 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d906      	bls.n	8003a00 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e3d9      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	10908120 	.word	0x10908120
 8003a00:	2302      	movs	r3, #2
 8003a02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a16:	2202      	movs	r2, #2
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a2e:	2202      	movs	r2, #2
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003a40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	4ba5      	ldr	r3, [pc, #660]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	6019      	str	r1, [r3, #0]
 8003a4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	fa93 f1a3 	rbit	r1, r3
 8003a58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a5c:	6019      	str	r1, [r3, #0]
  return result;
 8003a5e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0b0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x63a>
 8003a80:	e06a      	b.n	8003b58 <HAL_RCC_OscConfig+0x7b0>
 8003a82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	fa93 f2a3 	rbit	r2, r3
 8003a94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a98:	601a      	str	r2, [r3, #0]
  return result;
 8003a9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	; (8003cdc <HAL_RCC_OscConfig+0x934>)
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fc80 	bl	80023b8 <HAL_GetTick>
 8003ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abc:	e009      	b.n	8003ad2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abe:	f7fe fc7b 	bl	80023b8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e36b      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
 8003ad2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	fa93 f2a3 	rbit	r2, r3
 8003ae4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003aee:	2202      	movs	r2, #2
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fa93 f2a3 	rbit	r2, r3
 8003afc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b06:	2202      	movs	r2, #2
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fa93 f2a3 	rbit	r2, r3
 8003b14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1a:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b22:	2102      	movs	r1, #2
 8003b24:	6019      	str	r1, [r3, #0]
 8003b26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	fa93 f1a3 	rbit	r1, r3
 8003b30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b34:	6019      	str	r1, [r3, #0]
  return result;
 8003b36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fab3 f383 	clz	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1b2      	bne.n	8003abe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8158 	beq.w	8003e18 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6e:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d112      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	61d3      	str	r3, [r2, #28]
 8003b86:	4b54      	ldr	r3, [pc, #336]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f107 0308 	add.w	r3, r7, #8
 8003b98:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_OscConfig+0x938>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d11a      	bne.n	8003be2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bac:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <HAL_RCC_OscConfig+0x938>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	; (8003ce0 <HAL_RCC_OscConfig+0x938>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb8:	f7fe fbfe 	bl	80023b8 <HAL_GetTick>
 8003bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e009      	b.n	8003bd6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7fe fbf9 	bl	80023b8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e2e9      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCC_OscConfig+0x938>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0ef      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x852>
 8003bec:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	e02f      	b.n	8003c5a <HAL_RCC_OscConfig+0x8b2>
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCC_OscConfig+0x876>
 8003c04:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a33      	ldr	r2, [pc, #204]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	e01d      	b.n	8003c5a <HAL_RCC_OscConfig+0x8b2>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x89a>
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6213      	str	r3, [r2, #32]
 8003c34:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6213      	str	r3, [r2, #32]
 8003c40:	e00b      	b.n	8003c5a <HAL_RCC_OscConfig+0x8b2>
 8003c42:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6213      	str	r3, [r2, #32]
 8003c4e:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d06b      	beq.n	8003d3c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c64:	f7fe fba8 	bl	80023b8 <HAL_GetTick>
 8003c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6c:	e00b      	b.n	8003c86 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fe fba3 	bl	80023b8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e291      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
 8003c86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	fa93 f2a3 	rbit	r2, r3
 8003c98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	fa93 f2a3 	rbit	r2, r3
 8003cb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cb4:	601a      	str	r2, [r3, #0]
  return result;
 8003cb6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x93c>
 8003cd0:	4b01      	ldr	r3, [pc, #4]	; (8003cd8 <HAL_RCC_OscConfig+0x930>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	e014      	b.n	8003d00 <HAL_RCC_OscConfig+0x958>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	10908120 	.word	0x10908120
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ce8:	2202      	movs	r2, #2
 8003cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fa93 f2a3 	rbit	r2, r3
 8003cf6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	4bbb      	ldr	r3, [pc, #748]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d04:	2102      	movs	r1, #2
 8003d06:	6011      	str	r1, [r2, #0]
 8003d08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	fa92 f1a2 	rbit	r1, r2
 8003d12:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d16:	6011      	str	r1, [r2, #0]
  return result;
 8003d18:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	fab2 f282 	clz	r2, r2
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f002 021f 	and.w	r2, r2, #31
 8003d2e:	2101      	movs	r1, #1
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d099      	beq.n	8003c6e <HAL_RCC_OscConfig+0x8c6>
 8003d3a:	e063      	b.n	8003e04 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fb3c 	bl	80023b8 <HAL_GetTick>
 8003d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d44:	e00b      	b.n	8003d5e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fe fb37 	bl	80023b8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e225      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
 8003d5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d62:	2202      	movs	r2, #2
 8003d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	fa93 f2a3 	rbit	r2, r3
 8003d70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d8c:	601a      	str	r2, [r3, #0]
  return result;
 8003d8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d102      	bne.n	8003dae <HAL_RCC_OscConfig+0xa06>
 8003da8:	4b90      	ldr	r3, [pc, #576]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	e00d      	b.n	8003dca <HAL_RCC_OscConfig+0xa22>
 8003dae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003db2:	2202      	movs	r2, #2
 8003db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	fa93 f2a3 	rbit	r2, r3
 8003dc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4b89      	ldr	r3, [pc, #548]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003dce:	2102      	movs	r1, #2
 8003dd0:	6011      	str	r1, [r2, #0]
 8003dd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	fa92 f1a2 	rbit	r1, r2
 8003ddc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003de0:	6011      	str	r1, [r2, #0]
  return result;
 8003de2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f002 021f 	and.w	r2, r2, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1a0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b77      	ldr	r3, [pc, #476]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a76      	ldr	r2, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 81c2 	beq.w	80041a8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e24:	4b71      	ldr	r3, [pc, #452]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	f000 819c 	beq.w	800416a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f040 8114 	bne.w	8004066 <HAL_RCC_OscConfig+0xcbe>
 8003e3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f2a3 	rbit	r2, r3
 8003e52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e56:	601a      	str	r2, [r3, #0]
  return result;
 8003e58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2300      	movs	r3, #0
 8003e72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fe faa0 	bl	80023b8 <HAL_GetTick>
 8003e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7c:	e009      	b.n	8003e92 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe fa9b 	bl	80023b8 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e18b      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
 8003e92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	fa93 f2a3 	rbit	r2, r3
 8003ea6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003eaa:	601a      	str	r2, [r3, #0]
  return result;
 8003eac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003eb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_RCC_OscConfig+0xb24>
 8003ec6:	4b49      	ldr	r3, [pc, #292]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	e01b      	b.n	8003f04 <HAL_RCC_OscConfig+0xb5c>
 8003ecc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	fa93 f2a3 	rbit	r2, r3
 8003ee0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	fa93 f2a3 	rbit	r2, r3
 8003efa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	4b3a      	ldr	r3, [pc, #232]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	fa92 f1a2 	rbit	r1, r2
 8003f18:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f1c:	6011      	str	r1, [r2, #0]
  return result;
 8003f1e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	f042 0220 	orr.w	r2, r2, #32
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f002 021f 	and.w	r2, r2, #31
 8003f34:	2101      	movs	r1, #1
 8003f36:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d19e      	bne.n	8003e7e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f40:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	4925      	ldr	r1, [pc, #148]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
 8003f5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	fa93 f2a3 	rbit	r2, r3
 8003f70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f74:	601a      	str	r2, [r3, #0]
  return result;
 8003f76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f7a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2301      	movs	r3, #1
 8003f90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fe fa11 	bl	80023b8 <HAL_GetTick>
 8003f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f9a:	e009      	b.n	8003fb0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fe fa0c 	bl	80023b8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0fc      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
 8003fb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	fa93 f2a3 	rbit	r2, r3
 8003fc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fc8:	601a      	str	r2, [r3, #0]
  return result;
 8003fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xc48>
 8003fe4:	4b01      	ldr	r3, [pc, #4]	; (8003fec <HAL_RCC_OscConfig+0xc44>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	e01e      	b.n	8004028 <HAL_RCC_OscConfig+0xc80>
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800400e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	fa93 f2a3 	rbit	r2, r3
 800401e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <HAL_RCC_OscConfig+0xe0c>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800402c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	fa92 f1a2 	rbit	r1, r2
 800403c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004040:	6011      	str	r1, [r2, #0]
  return result;
 8004042:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	fab2 f282 	clz	r2, r2
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	f042 0220 	orr.w	r2, r2, #32
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	f002 021f 	and.w	r2, r2, #31
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d09b      	beq.n	8003f9c <HAL_RCC_OscConfig+0xbf4>
 8004064:	e0a0      	b.n	80041a8 <HAL_RCC_OscConfig+0xe00>
 8004066:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800406a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800406e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	fa93 f2a3 	rbit	r2, r3
 800407a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800407e:	601a      	str	r2, [r3, #0]
  return result;
 8004080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004084:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004090:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	461a      	mov	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe f98c 	bl	80023b8 <HAL_GetTick>
 80040a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a4:	e009      	b.n	80040ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fe f987 	bl	80023b8 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e077      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
 80040ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	fa93 f2a3 	rbit	r2, r3
 80040ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d2:	601a      	str	r2, [r3, #0]
  return result;
 80040d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_OscConfig+0xd4c>
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <HAL_RCC_OscConfig+0xe0c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	e01b      	b.n	800412c <HAL_RCC_OscConfig+0xd84>
 80040f4:	f107 0320 	add.w	r3, r7, #32
 80040f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	f107 0320 	add.w	r3, r7, #32
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	fa93 f2a3 	rbit	r2, r3
 8004108:	f107 031c 	add.w	r3, r7, #28
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f107 0318 	add.w	r3, r7, #24
 8004112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f107 0318 	add.w	r3, r7, #24
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	fa93 f2a3 	rbit	r2, r3
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_RCC_OscConfig+0xe0c>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f107 0210 	add.w	r2, r7, #16
 8004130:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	f107 0210 	add.w	r2, r7, #16
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	fa92 f1a2 	rbit	r1, r2
 8004140:	f107 020c 	add.w	r2, r7, #12
 8004144:	6011      	str	r1, [r2, #0]
  return result;
 8004146:	f107 020c 	add.w	r2, r7, #12
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	fab2 f282 	clz	r2, r2
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	f042 0220 	orr.w	r2, r2, #32
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f002 021f 	and.w	r2, r2, #31
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d19e      	bne.n	80040a6 <HAL_RCC_OscConfig+0xcfe>
 8004168:	e01e      	b.n	80041a8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e018      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_RCC_OscConfig+0xe0c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004180:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004184:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	429a      	cmp	r2, r3
 8004190:	d108      	bne.n	80041a4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004192:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000

080041b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b09e      	sub	sp, #120	; 0x78
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e162      	b.n	8004496 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b90      	ldr	r3, [pc, #576]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d910      	bls.n	8004200 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b8d      	ldr	r3, [pc, #564]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 0207 	bic.w	r2, r3, #7
 80041e6:	498b      	ldr	r1, [pc, #556]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e14a      	b.n	8004496 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b82      	ldr	r3, [pc, #520]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	497f      	ldr	r1, [pc, #508]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80dc 	beq.w	80043e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d13c      	bne.n	80042ae <HAL_RCC_ClockConfig+0xf6>
 8004234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004238:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <HAL_RCC_ClockConfig+0xa6>
 8004258:	4b6f      	ldr	r3, [pc, #444]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	e00f      	b.n	800427e <HAL_RCC_ClockConfig+0xc6>
 800425e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004262:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	667b      	str	r3, [r7, #100]	; 0x64
 800426c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004270:	663b      	str	r3, [r7, #96]	; 0x60
 8004272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427a:	4b67      	ldr	r3, [pc, #412]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004282:	65ba      	str	r2, [r7, #88]	; 0x58
 8004284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004286:	fa92 f2a2 	rbit	r2, r2
 800428a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800428c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800428e:	fab2 f282 	clz	r2, r2
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f042 0220 	orr.w	r2, r2, #32
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f002 021f 	and.w	r2, r2, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d17b      	bne.n	80043a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0f3      	b.n	8004496 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d13c      	bne.n	8004330 <HAL_RCC_ClockConfig+0x178>
 80042b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x128>
 80042da:	4b4f      	ldr	r3, [pc, #316]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	e00f      	b.n	8004300 <HAL_RCC_ClockConfig+0x148>
 80042e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
 80042ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f2:	643b      	str	r3, [r7, #64]	; 0x40
 80042f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042fc:	4b46      	ldr	r3, [pc, #280]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004304:	63ba      	str	r2, [r7, #56]	; 0x38
 8004306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004308:	fa92 f2a2 	rbit	r2, r2
 800430c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800430e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004310:	fab2 f282 	clz	r2, r2
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	f042 0220 	orr.w	r2, r2, #32
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f002 021f 	and.w	r2, r2, #31
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f202 	lsl.w	r2, r1, r2
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d13a      	bne.n	80043a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0b2      	b.n	8004496 <HAL_RCC_ClockConfig+0x2de>
 8004330:	2302      	movs	r3, #2
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d102      	bne.n	8004358 <HAL_RCC_ClockConfig+0x1a0>
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	e00d      	b.n	8004374 <HAL_RCC_ClockConfig+0x1bc>
 8004358:	2302      	movs	r3, #2
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	2302      	movs	r3, #2
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	fa93 f3a3 	rbit	r3, r3
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	2202      	movs	r2, #2
 8004376:	61ba      	str	r2, [r7, #24]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	fa92 f2a2 	rbit	r2, r2
 800437e:	617a      	str	r2, [r7, #20]
  return result;
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	fab2 f282 	clz	r2, r2
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	f042 0220 	orr.w	r2, r2, #32
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	f002 021f 	and.w	r2, r2, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e079      	b.n	8004496 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f023 0203 	bic.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	491a      	ldr	r1, [pc, #104]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b4:	f7fe f800 	bl	80023b8 <HAL_GetTick>
 80043b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043bc:	f7fd fffc 	bl	80023b8 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e061      	b.n	8004496 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 020c 	and.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d1eb      	bne.n	80043bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d214      	bcs.n	800441c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	4906      	ldr	r1, [pc, #24]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_RCC_ClockConfig+0x25c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d005      	beq.n	800441c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e040      	b.n	8004496 <HAL_RCC_ClockConfig+0x2de>
 8004414:	40022000 	.word	0x40022000
 8004418:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_RCC_ClockConfig+0x2e8>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	491a      	ldr	r1, [pc, #104]	; (80044a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004446:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4912      	ldr	r1, [pc, #72]	; (80044a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800445a:	f000 f829 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 800445e:	4601      	mov	r1, r0
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004468:	22f0      	movs	r2, #240	; 0xf0
 800446a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	fa92 f2a2 	rbit	r2, r2
 8004472:	60fa      	str	r2, [r7, #12]
  return result;
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	fab2 f282 	clz	r2, r2
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	40d3      	lsrs	r3, r2
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <HAL_RCC_ClockConfig+0x2ec>)
 8004480:	5cd3      	ldrb	r3, [r2, r3]
 8004482:	fa21 f303 	lsr.w	r3, r1, r3
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <HAL_RCC_ClockConfig+0x2f0>)
 8004488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_RCC_ClockConfig+0x2f4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd ff4e 	bl	8002330 <HAL_InitTick>
  
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3778      	adds	r7, #120	; 0x78
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000
 80044a4:	0800869c 	.word	0x0800869c
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	20000010 	.word	0x20000010

080044b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b08b      	sub	sp, #44	; 0x2c
 80044b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044ca:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d002      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x30>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0x36>
 80044de:	e03c      	b.n	800455a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044e0:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044e2:	623b      	str	r3, [r7, #32]
      break;
 80044e4:	e03c      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	fa92 f2a2 	rbit	r2, r2
 80044f8:	607a      	str	r2, [r7, #4]
  return result;
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	fab2 f282 	clz	r2, r2
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	40d3      	lsrs	r3, r2
 8004504:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_GetSysClockFreq+0xc0>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	220f      	movs	r2, #15
 8004514:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	fa92 f2a2 	rbit	r2, r2
 800451c:	60fa      	str	r2, [r7, #12]
  return result;
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	fab2 f282 	clz	r2, r2
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	40d3      	lsrs	r3, r2
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <HAL_RCC_GetSysClockFreq+0xcc>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004538:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc4>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
 8004548:	e004      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <HAL_RCC_GetSysClockFreq+0xd0>)
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	623b      	str	r3, [r7, #32]
      break;
 8004558:	e002      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc4>)
 800455c:	623b      	str	r3, [r7, #32]
      break;
 800455e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004560:	6a3b      	ldr	r3, [r7, #32]
}
 8004562:	4618      	mov	r0, r3
 8004564:	372c      	adds	r7, #44	; 0x2c
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	007a1200 	.word	0x007a1200
 8004578:	080086b4 	.word	0x080086b4
 800457c:	080086c4 	.word	0x080086c4
 8004580:	003d0900 	.word	0x003d0900

08004584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <HAL_RCC_GetHCLKFreq+0x14>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	2000000c 	.word	0x2000000c

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045a2:	f7ff ffef 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045a6:	4601      	mov	r1, r0
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	fa92 f2a2 	rbit	r2, r2
 80045bc:	603a      	str	r2, [r7, #0]
  return result;
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	fab2 f282 	clz	r2, r2
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	40d3      	lsrs	r3, r2
 80045c8:	4a04      	ldr	r2, [pc, #16]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80045ca:	5cd3      	ldrb	r3, [r2, r3]
 80045cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40021000 	.word	0x40021000
 80045dc:	080086ac 	.word	0x080086ac

080045e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045e6:	f7ff ffcd 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045ea:	4601      	mov	r1, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	603a      	str	r2, [r7, #0]
  return result;
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	40d3      	lsrs	r3, r2
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x40>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	080086ac 	.word	0x080086ac

08004624 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b092      	sub	sp, #72	; 0x48
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80cd 	beq.w	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004648:	4b8e      	ldr	r3, [pc, #568]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10e      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004654:	4b8b      	ldr	r3, [pc, #556]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4a8a      	ldr	r2, [pc, #552]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465e:	61d3      	str	r3, [r2, #28]
 8004660:	4b88      	ldr	r3, [pc, #544]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	4b85      	ldr	r3, [pc, #532]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d118      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467e:	4b82      	ldr	r3, [pc, #520]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a81      	ldr	r2, [pc, #516]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004688:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fd fe95 	bl	80023b8 <HAL_GetTick>
 800468e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	e008      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fd fe91 	bl	80023b8 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b64      	cmp	r3, #100	; 0x64
 800469e:	d901      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0ea      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	4b78      	ldr	r3, [pc, #480]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b0:	4b74      	ldr	r3, [pc, #464]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d07d      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d076      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ce:	4b6d      	ldr	r3, [pc, #436]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	fa93 f3a3 	rbit	r3, r3
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b66      	ldr	r3, [pc, #408]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	461a      	mov	r2, r3
 80046f8:	2301      	movs	r3, #1
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800470c:	fab3 f383 	clz	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	4b5d      	ldr	r3, [pc, #372]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	461a      	mov	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004720:	4a58      	ldr	r2, [pc, #352]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d045      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fd fe42 	bl	80023b8 <HAL_GetTick>
 8004734:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004736:	e00a      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004738:	f7fd fe3e 	bl	80023b8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	; 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e095      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800474e:	2302      	movs	r3, #2
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
 800475a:	2302      	movs	r3, #2
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	61fb      	str	r3, [r7, #28]
  return result;
 8004766:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d102      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800477c:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	e007      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004782:	2302      	movs	r3, #2
 8004784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	4b3d      	ldr	r3, [pc, #244]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2202      	movs	r2, #2
 8004794:	613a      	str	r2, [r7, #16]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	fa92 f2a2 	rbit	r2, r2
 800479c:	60fa      	str	r2, [r7, #12]
  return result;
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	fab2 f282 	clz	r2, r2
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	f002 021f 	and.w	r2, r2, #31
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f202 	lsl.w	r2, r1, r2
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0bd      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047bc:	4b31      	ldr	r3, [pc, #196]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	492e      	ldr	r1, [pc, #184]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ee:	4b25      	ldr	r3, [pc, #148]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4922      	ldr	r1, [pc, #136]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	f023 0210 	bic.w	r2, r3, #16
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	491a      	ldr	r1, [pc, #104]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481a:	4313      	orrs	r3, r2
 800481c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800482a:	4b16      	ldr	r3, [pc, #88]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	4913      	ldr	r1, [pc, #76]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004838:	4313      	orrs	r3, r2
 800483a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	490b      	ldr	r1, [pc, #44]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	4313      	orrs	r3, r2
 8004858:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004874:	4313      	orrs	r3, r2
 8004876:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3748      	adds	r7, #72	; 0x48
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	10908100 	.word	0x10908100

08004890 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e097      	b.n	80049d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fd fa9f 	bl	8001dfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f000 f9af 	bl	8004c48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	4313      	orrs	r3, r2
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004930:	f023 030c 	bic.w	r3, r3, #12
 8004934:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800493c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	4313      	orrs	r3, r2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	011a      	lsls	r2, r3, #4
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	031b      	lsls	r3, r3, #12
 8004960:	4313      	orrs	r3, r2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800496e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4313      	orrs	r3, r2
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d110      	bne.n	8004a2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d102      	bne.n	8004a18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a12:	7b7b      	ldrb	r3, [r7, #13]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d001      	beq.n	8004a1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e069      	b.n	8004af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	e031      	b.n	8004a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d110      	bne.n	8004a56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a34:	7bbb      	ldrb	r3, [r7, #14]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d102      	bne.n	8004a40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a3a:	7b3b      	ldrb	r3, [r7, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d001      	beq.n	8004a44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e055      	b.n	8004af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a54:	e01d      	b.n	8004a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a62:	7b7b      	ldrb	r3, [r7, #13]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d102      	bne.n	8004a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a68:	7b3b      	ldrb	r3, [r7, #12]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e03e      	b.n	8004af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_Encoder_Start+0xc4>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d008      	beq.n	8004ab0 <HAL_TIM_Encoder_Start+0xd4>
 8004a9e:	e00f      	b.n	8004ac0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f945 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 8004aae:	e016      	b.n	8004ade <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f93d 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 8004abe:	e00e      	b.n	8004ade <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f935 	bl	8004d38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f92e 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 8004adc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_TIM_Encoder_Stop+0x18>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d008      	beq.n	8004b20 <HAL_TIM_Encoder_Stop+0x28>
 8004b0e:	e00f      	b.n	8004b30 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f90d 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 8004b1e:	e016      	b.n	8004b4e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2104      	movs	r1, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f905 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 8004b2e:	e00e      	b.n	8004b4e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f8fd 	bl	8004d38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2104      	movs	r1, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f8f6 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 8004b4c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10f      	bne.n	8004b7e <HAL_TIM_Encoder_Stop+0x86>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6a1a      	ldr	r2, [r3, #32]
 8004b64:	f240 4344 	movw	r3, #1092	; 0x444
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_Encoder_Stop+0x86>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_TIM_Encoder_Stop+0x92>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d148      	bne.n	8004c1c <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_Encoder_Stop+0xa2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	e023      	b.n	8004be2 <HAL_TIM_Encoder_Stop+0xea>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_Encoder_Stop+0xb2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba8:	e01b      	b.n	8004be2 <HAL_TIM_Encoder_Stop+0xea>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_Encoder_Stop+0xc2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	e013      	b.n	8004be2 <HAL_TIM_Encoder_Stop+0xea>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_Encoder_Stop+0xd2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc8:	e00b      	b.n	8004be2 <HAL_TIM_Encoder_Stop+0xea>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_Encoder_Stop+0xe2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd8:	e003      	b.n	8004be2 <HAL_TIM_Encoder_Stop+0xea>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_Encoder_Stop+0xfa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf0:	e024      	b.n	8004c3c <HAL_TIM_Encoder_Stop+0x144>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_Encoder_Stop+0x10a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c00:	e01c      	b.n	8004c3c <HAL_TIM_Encoder_Stop+0x144>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_Encoder_Stop+0x11a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c10:	e014      	b.n	8004c3c <HAL_TIM_Encoder_Stop+0x144>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004c1a:	e00f      	b.n	8004c3c <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a32      	ldr	r2, [pc, #200]	; (8004d24 <TIM_Base_SetConfig+0xdc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x28>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x28>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a2f      	ldr	r2, [pc, #188]	; (8004d28 <TIM_Base_SetConfig+0xe0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <TIM_Base_SetConfig+0xdc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0x6a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x6a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <TIM_Base_SetConfig+0xe0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x6a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <TIM_Base_SetConfig+0xe4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0x6a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <TIM_Base_SetConfig+0xe8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0x6a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <TIM_Base_SetConfig+0xec>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <TIM_Base_SetConfig+0xdc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_Base_SetConfig+0xc0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0e      	ldr	r2, [pc, #56]	; (8004d2c <TIM_Base_SetConfig+0xe4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_Base_SetConfig+0xc0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <TIM_Base_SetConfig+0xe8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0xc0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <TIM_Base_SetConfig+0xec>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d103      	bne.n	8004d10 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	615a      	str	r2, [r3, #20]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800

08004d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e054      	b.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e04:	d009      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d10c      	bne.n	8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40014000 	.word	0x40014000

08004e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e040      	b.n	8004ef4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fd f87c 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2224      	movs	r2, #36	; 0x24
 8004e8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8c0 	bl	8005024 <UART_SetConfig>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e022      	b.n	8004ef4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f9ea 	bl	8005290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa71 	bl	80053d4 <UART_CheckIdleState>
 8004ef2:	4603      	mov	r3, r0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	f040 8082 	bne.w	800501a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_UART_Transmit+0x26>
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07a      	b.n	800501c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UART_Transmit+0x38>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e073      	b.n	800501c <HAL_UART_Transmit+0x120>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2221      	movs	r2, #33	; 0x21
 8004f48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f4a:	f7fd fa35 	bl	80023b8 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f68:	d108      	bne.n	8004f7c <HAL_UART_Transmit+0x80>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	e003      	b.n	8004f84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f8c:	e02d      	b.n	8004fea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2180      	movs	r1, #128	; 0x80
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa64 	bl	8005466 <UART_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e039      	b.n	800501c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	881a      	ldrh	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	e008      	b.n	8004fd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1cb      	bne.n	8004f8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2140      	movs	r1, #64	; 0x40
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fa30 	bl	8005466 <UART_WaitOnFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e005      	b.n	800501c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b8a      	ldr	r3, [pc, #552]	; (8005278 <UART_SetConfig+0x254>)
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	6979      	ldr	r1, [r7, #20]
 8005058:	430b      	orrs	r3, r1
 800505a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a78      	ldr	r2, [pc, #480]	; (800527c <UART_SetConfig+0x258>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d120      	bne.n	80050e2 <UART_SetConfig+0xbe>
 80050a0:	4b77      	ldr	r3, [pc, #476]	; (8005280 <UART_SetConfig+0x25c>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d817      	bhi.n	80050dc <UART_SetConfig+0xb8>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x90>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d7 	.word	0x080050d7
 80050c0:	080050cb 	.word	0x080050cb
 80050c4:	2300      	movs	r3, #0
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e01d      	b.n	8005106 <UART_SetConfig+0xe2>
 80050ca:	2302      	movs	r3, #2
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e01a      	b.n	8005106 <UART_SetConfig+0xe2>
 80050d0:	2304      	movs	r3, #4
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e017      	b.n	8005106 <UART_SetConfig+0xe2>
 80050d6:	2308      	movs	r3, #8
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e014      	b.n	8005106 <UART_SetConfig+0xe2>
 80050dc:	2310      	movs	r3, #16
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e011      	b.n	8005106 <UART_SetConfig+0xe2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a67      	ldr	r2, [pc, #412]	; (8005284 <UART_SetConfig+0x260>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d102      	bne.n	80050f2 <UART_SetConfig+0xce>
 80050ec:	2300      	movs	r3, #0
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e009      	b.n	8005106 <UART_SetConfig+0xe2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a64      	ldr	r2, [pc, #400]	; (8005288 <UART_SetConfig+0x264>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d102      	bne.n	8005102 <UART_SetConfig+0xde>
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e001      	b.n	8005106 <UART_SetConfig+0xe2>
 8005102:	2310      	movs	r3, #16
 8005104:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d15b      	bne.n	80051c8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005110:	7ffb      	ldrb	r3, [r7, #31]
 8005112:	2b08      	cmp	r3, #8
 8005114:	d827      	bhi.n	8005166 <UART_SetConfig+0x142>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0xf8>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005141 	.word	0x08005141
 8005120:	08005149 	.word	0x08005149
 8005124:	08005151 	.word	0x08005151
 8005128:	08005167 	.word	0x08005167
 800512c:	08005157 	.word	0x08005157
 8005130:	08005167 	.word	0x08005167
 8005134:	08005167 	.word	0x08005167
 8005138:	08005167 	.word	0x08005167
 800513c:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005140:	f7ff fa2c 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8005144:	61b8      	str	r0, [r7, #24]
        break;
 8005146:	e013      	b.n	8005170 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7ff fa4a 	bl	80045e0 <HAL_RCC_GetPCLK2Freq>
 800514c:	61b8      	str	r0, [r7, #24]
        break;
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b4e      	ldr	r3, [pc, #312]	; (800528c <UART_SetConfig+0x268>)
 8005152:	61bb      	str	r3, [r7, #24]
        break;
 8005154:	e00c      	b.n	8005170 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7ff f9ab 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 800515a:	61b8      	str	r0, [r7, #24]
        break;
 800515c:	e008      	b.n	8005170 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	61bb      	str	r3, [r7, #24]
        break;
 8005164:	e004      	b.n	8005170 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	77bb      	strb	r3, [r7, #30]
        break;
 800516e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d074      	beq.n	8005260 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	005a      	lsls	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	b29b      	uxth	r3, r3
 800518c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b0f      	cmp	r3, #15
 8005192:	d916      	bls.n	80051c2 <UART_SetConfig+0x19e>
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519a:	d212      	bcs.n	80051c2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f023 030f 	bic.w	r3, r3, #15
 80051a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	89fb      	ldrh	r3, [r7, #14]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	89fa      	ldrh	r2, [r7, #14]
 80051be:	60da      	str	r2, [r3, #12]
 80051c0:	e04e      	b.n	8005260 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77bb      	strb	r3, [r7, #30]
 80051c6:	e04b      	b.n	8005260 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d827      	bhi.n	800521e <UART_SetConfig+0x1fa>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <UART_SetConfig+0x1b0>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005201 	.word	0x08005201
 80051dc:	08005209 	.word	0x08005209
 80051e0:	0800521f 	.word	0x0800521f
 80051e4:	0800520f 	.word	0x0800520f
 80051e8:	0800521f 	.word	0x0800521f
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	0800521f 	.word	0x0800521f
 80051f4:	08005217 	.word	0x08005217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f8:	f7ff f9d0 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 80051fc:	61b8      	str	r0, [r7, #24]
        break;
 80051fe:	e013      	b.n	8005228 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005200:	f7ff f9ee 	bl	80045e0 <HAL_RCC_GetPCLK2Freq>
 8005204:	61b8      	str	r0, [r7, #24]
        break;
 8005206:	e00f      	b.n	8005228 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005208:	4b20      	ldr	r3, [pc, #128]	; (800528c <UART_SetConfig+0x268>)
 800520a:	61bb      	str	r3, [r7, #24]
        break;
 800520c:	e00c      	b.n	8005228 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520e:	f7ff f94f 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8005212:	61b8      	str	r0, [r7, #24]
        break;
 8005214:	e008      	b.n	8005228 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521a:	61bb      	str	r3, [r7, #24]
        break;
 800521c:	e004      	b.n	8005228 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	77bb      	strb	r3, [r7, #30]
        break;
 8005226:	bf00      	nop
    }

    if (pclk != 0U)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	085a      	lsrs	r2, r3, #1
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	441a      	add	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	b29b      	uxth	r3, r3
 8005242:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	d908      	bls.n	800525c <UART_SetConfig+0x238>
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d204      	bcs.n	800525c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	e001      	b.n	8005260 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800526c:	7fbb      	ldrb	r3, [r7, #30]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	efff69f3 	.word	0xefff69f3
 800527c:	40013800 	.word	0x40013800
 8005280:	40021000 	.word	0x40021000
 8005284:	40004400 	.word	0x40004400
 8005288:	40004800 	.word	0x40004800
 800528c:	007a1200 	.word	0x007a1200

08005290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800538e:	d10a      	bne.n	80053a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af02      	add	r7, sp, #8
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053e4:	f7fc ffe8 	bl	80023b8 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d10e      	bne.n	8005416 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f82d 	bl	8005466 <UART_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e023      	b.n	800545e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d10e      	bne.n	8005442 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f817 	bl	8005466 <UART_WaitOnFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e00d      	b.n	800545e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	4613      	mov	r3, r2
 8005474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	e05e      	b.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d05a      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005480:	f7fc ff9a 	bl	80023b8 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	429a      	cmp	r2, r3
 800548e:	d302      	bcc.n	8005496 <UART_WaitOnFlagUntilTimeout+0x30>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11b      	bne.n	80054ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e043      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d02c      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ea:	d124      	bne.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005504:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e00f      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	429a      	cmp	r2, r3
 8005552:	d091      	beq.n	8005478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <__assert_func>:
 8005560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005562:	4614      	mov	r4, r2
 8005564:	461a      	mov	r2, r3
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <__assert_func+0x2c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4605      	mov	r5, r0
 800556c:	68d8      	ldr	r0, [r3, #12]
 800556e:	b14c      	cbz	r4, 8005584 <__assert_func+0x24>
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <__assert_func+0x30>)
 8005572:	9100      	str	r1, [sp, #0]
 8005574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005578:	4906      	ldr	r1, [pc, #24]	; (8005594 <__assert_func+0x34>)
 800557a:	462b      	mov	r3, r5
 800557c:	f000 f814 	bl	80055a8 <fiprintf>
 8005580:	f000 fef4 	bl	800636c <abort>
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <__assert_func+0x38>)
 8005586:	461c      	mov	r4, r3
 8005588:	e7f3      	b.n	8005572 <__assert_func+0x12>
 800558a:	bf00      	nop
 800558c:	20000018 	.word	0x20000018
 8005590:	080086d4 	.word	0x080086d4
 8005594:	080086e1 	.word	0x080086e1
 8005598:	0800870f 	.word	0x0800870f

0800559c <__errno>:
 800559c:	4b01      	ldr	r3, [pc, #4]	; (80055a4 <__errno+0x8>)
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000018 	.word	0x20000018

080055a8 <fiprintf>:
 80055a8:	b40e      	push	{r1, r2, r3}
 80055aa:	b503      	push	{r0, r1, lr}
 80055ac:	4601      	mov	r1, r0
 80055ae:	ab03      	add	r3, sp, #12
 80055b0:	4805      	ldr	r0, [pc, #20]	; (80055c8 <fiprintf+0x20>)
 80055b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	f000 f85d 	bl	8005678 <_vfiprintf_r>
 80055be:	b002      	add	sp, #8
 80055c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c4:	b003      	add	sp, #12
 80055c6:	4770      	bx	lr
 80055c8:	20000018 	.word	0x20000018

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4d0d      	ldr	r5, [pc, #52]	; (8005604 <__libc_init_array+0x38>)
 80055d0:	4c0d      	ldr	r4, [pc, #52]	; (8005608 <__libc_init_array+0x3c>)
 80055d2:	1b64      	subs	r4, r4, r5
 80055d4:	10a4      	asrs	r4, r4, #2
 80055d6:	2600      	movs	r6, #0
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	4d0b      	ldr	r5, [pc, #44]	; (800560c <__libc_init_array+0x40>)
 80055de:	4c0c      	ldr	r4, [pc, #48]	; (8005610 <__libc_init_array+0x44>)
 80055e0:	f002 feaa 	bl	8008338 <_init>
 80055e4:	1b64      	subs	r4, r4, r5
 80055e6:	10a4      	asrs	r4, r4, #2
 80055e8:	2600      	movs	r6, #0
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	08008ab8 	.word	0x08008ab8
 8005608:	08008ab8 	.word	0x08008ab8
 800560c:	08008ab8 	.word	0x08008ab8
 8005610:	08008abc 	.word	0x08008abc

08005614 <memset>:
 8005614:	4402      	add	r2, r0
 8005616:	4603      	mov	r3, r0
 8005618:	4293      	cmp	r3, r2
 800561a:	d100      	bne.n	800561e <memset+0xa>
 800561c:	4770      	bx	lr
 800561e:	f803 1b01 	strb.w	r1, [r3], #1
 8005622:	e7f9      	b.n	8005618 <memset+0x4>

08005624 <__sfputc_r>:
 8005624:	6893      	ldr	r3, [r2, #8]
 8005626:	3b01      	subs	r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	b410      	push	{r4}
 800562c:	6093      	str	r3, [r2, #8]
 800562e:	da08      	bge.n	8005642 <__sfputc_r+0x1e>
 8005630:	6994      	ldr	r4, [r2, #24]
 8005632:	42a3      	cmp	r3, r4
 8005634:	db01      	blt.n	800563a <__sfputc_r+0x16>
 8005636:	290a      	cmp	r1, #10
 8005638:	d103      	bne.n	8005642 <__sfputc_r+0x1e>
 800563a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800563e:	f000 bdd5 	b.w	80061ec <__swbuf_r>
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	1c58      	adds	r0, r3, #1
 8005646:	6010      	str	r0, [r2, #0]
 8005648:	7019      	strb	r1, [r3, #0]
 800564a:	4608      	mov	r0, r1
 800564c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005650:	4770      	bx	lr

08005652 <__sfputs_r>:
 8005652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005654:	4606      	mov	r6, r0
 8005656:	460f      	mov	r7, r1
 8005658:	4614      	mov	r4, r2
 800565a:	18d5      	adds	r5, r2, r3
 800565c:	42ac      	cmp	r4, r5
 800565e:	d101      	bne.n	8005664 <__sfputs_r+0x12>
 8005660:	2000      	movs	r0, #0
 8005662:	e007      	b.n	8005674 <__sfputs_r+0x22>
 8005664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005668:	463a      	mov	r2, r7
 800566a:	4630      	mov	r0, r6
 800566c:	f7ff ffda 	bl	8005624 <__sfputc_r>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d1f3      	bne.n	800565c <__sfputs_r+0xa>
 8005674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005678 <_vfiprintf_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	460d      	mov	r5, r1
 800567e:	b09d      	sub	sp, #116	; 0x74
 8005680:	4614      	mov	r4, r2
 8005682:	4698      	mov	r8, r3
 8005684:	4606      	mov	r6, r0
 8005686:	b118      	cbz	r0, 8005690 <_vfiprintf_r+0x18>
 8005688:	6983      	ldr	r3, [r0, #24]
 800568a:	b90b      	cbnz	r3, 8005690 <_vfiprintf_r+0x18>
 800568c:	f001 fe06 	bl	800729c <__sinit>
 8005690:	4b89      	ldr	r3, [pc, #548]	; (80058b8 <_vfiprintf_r+0x240>)
 8005692:	429d      	cmp	r5, r3
 8005694:	d11b      	bne.n	80056ce <_vfiprintf_r+0x56>
 8005696:	6875      	ldr	r5, [r6, #4]
 8005698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800569a:	07d9      	lsls	r1, r3, #31
 800569c:	d405      	bmi.n	80056aa <_vfiprintf_r+0x32>
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	059a      	lsls	r2, r3, #22
 80056a2:	d402      	bmi.n	80056aa <_vfiprintf_r+0x32>
 80056a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a6:	f001 fe9c 	bl	80073e2 <__retarget_lock_acquire_recursive>
 80056aa:	89ab      	ldrh	r3, [r5, #12]
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	d501      	bpl.n	80056b4 <_vfiprintf_r+0x3c>
 80056b0:	692b      	ldr	r3, [r5, #16]
 80056b2:	b9eb      	cbnz	r3, 80056f0 <_vfiprintf_r+0x78>
 80056b4:	4629      	mov	r1, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	f000 fdea 	bl	8006290 <__swsetup_r>
 80056bc:	b1c0      	cbz	r0, 80056f0 <_vfiprintf_r+0x78>
 80056be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c0:	07dc      	lsls	r4, r3, #31
 80056c2:	d50e      	bpl.n	80056e2 <_vfiprintf_r+0x6a>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	b01d      	add	sp, #116	; 0x74
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	4b7b      	ldr	r3, [pc, #492]	; (80058bc <_vfiprintf_r+0x244>)
 80056d0:	429d      	cmp	r5, r3
 80056d2:	d101      	bne.n	80056d8 <_vfiprintf_r+0x60>
 80056d4:	68b5      	ldr	r5, [r6, #8]
 80056d6:	e7df      	b.n	8005698 <_vfiprintf_r+0x20>
 80056d8:	4b79      	ldr	r3, [pc, #484]	; (80058c0 <_vfiprintf_r+0x248>)
 80056da:	429d      	cmp	r5, r3
 80056dc:	bf08      	it	eq
 80056de:	68f5      	ldreq	r5, [r6, #12]
 80056e0:	e7da      	b.n	8005698 <_vfiprintf_r+0x20>
 80056e2:	89ab      	ldrh	r3, [r5, #12]
 80056e4:	0598      	lsls	r0, r3, #22
 80056e6:	d4ed      	bmi.n	80056c4 <_vfiprintf_r+0x4c>
 80056e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ea:	f001 fe7b 	bl	80073e4 <__retarget_lock_release_recursive>
 80056ee:	e7e9      	b.n	80056c4 <_vfiprintf_r+0x4c>
 80056f0:	2300      	movs	r3, #0
 80056f2:	9309      	str	r3, [sp, #36]	; 0x24
 80056f4:	2320      	movs	r3, #32
 80056f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80056fe:	2330      	movs	r3, #48	; 0x30
 8005700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058c4 <_vfiprintf_r+0x24c>
 8005704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005708:	f04f 0901 	mov.w	r9, #1
 800570c:	4623      	mov	r3, r4
 800570e:	469a      	mov	sl, r3
 8005710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005714:	b10a      	cbz	r2, 800571a <_vfiprintf_r+0xa2>
 8005716:	2a25      	cmp	r2, #37	; 0x25
 8005718:	d1f9      	bne.n	800570e <_vfiprintf_r+0x96>
 800571a:	ebba 0b04 	subs.w	fp, sl, r4
 800571e:	d00b      	beq.n	8005738 <_vfiprintf_r+0xc0>
 8005720:	465b      	mov	r3, fp
 8005722:	4622      	mov	r2, r4
 8005724:	4629      	mov	r1, r5
 8005726:	4630      	mov	r0, r6
 8005728:	f7ff ff93 	bl	8005652 <__sfputs_r>
 800572c:	3001      	adds	r0, #1
 800572e:	f000 80aa 	beq.w	8005886 <_vfiprintf_r+0x20e>
 8005732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005734:	445a      	add	r2, fp
 8005736:	9209      	str	r2, [sp, #36]	; 0x24
 8005738:	f89a 3000 	ldrb.w	r3, [sl]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80a2 	beq.w	8005886 <_vfiprintf_r+0x20e>
 8005742:	2300      	movs	r3, #0
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800574c:	f10a 0a01 	add.w	sl, sl, #1
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	9307      	str	r3, [sp, #28]
 8005754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005758:	931a      	str	r3, [sp, #104]	; 0x68
 800575a:	4654      	mov	r4, sl
 800575c:	2205      	movs	r2, #5
 800575e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005762:	4858      	ldr	r0, [pc, #352]	; (80058c4 <_vfiprintf_r+0x24c>)
 8005764:	f7fa fd3c 	bl	80001e0 <memchr>
 8005768:	9a04      	ldr	r2, [sp, #16]
 800576a:	b9d8      	cbnz	r0, 80057a4 <_vfiprintf_r+0x12c>
 800576c:	06d1      	lsls	r1, r2, #27
 800576e:	bf44      	itt	mi
 8005770:	2320      	movmi	r3, #32
 8005772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005776:	0713      	lsls	r3, r2, #28
 8005778:	bf44      	itt	mi
 800577a:	232b      	movmi	r3, #43	; 0x2b
 800577c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005780:	f89a 3000 	ldrb.w	r3, [sl]
 8005784:	2b2a      	cmp	r3, #42	; 0x2a
 8005786:	d015      	beq.n	80057b4 <_vfiprintf_r+0x13c>
 8005788:	9a07      	ldr	r2, [sp, #28]
 800578a:	4654      	mov	r4, sl
 800578c:	2000      	movs	r0, #0
 800578e:	f04f 0c0a 	mov.w	ip, #10
 8005792:	4621      	mov	r1, r4
 8005794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005798:	3b30      	subs	r3, #48	; 0x30
 800579a:	2b09      	cmp	r3, #9
 800579c:	d94e      	bls.n	800583c <_vfiprintf_r+0x1c4>
 800579e:	b1b0      	cbz	r0, 80057ce <_vfiprintf_r+0x156>
 80057a0:	9207      	str	r2, [sp, #28]
 80057a2:	e014      	b.n	80057ce <_vfiprintf_r+0x156>
 80057a4:	eba0 0308 	sub.w	r3, r0, r8
 80057a8:	fa09 f303 	lsl.w	r3, r9, r3
 80057ac:	4313      	orrs	r3, r2
 80057ae:	9304      	str	r3, [sp, #16]
 80057b0:	46a2      	mov	sl, r4
 80057b2:	e7d2      	b.n	800575a <_vfiprintf_r+0xe2>
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	1d19      	adds	r1, r3, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	9103      	str	r1, [sp, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfbb      	ittet	lt
 80057c0:	425b      	neglt	r3, r3
 80057c2:	f042 0202 	orrlt.w	r2, r2, #2
 80057c6:	9307      	strge	r3, [sp, #28]
 80057c8:	9307      	strlt	r3, [sp, #28]
 80057ca:	bfb8      	it	lt
 80057cc:	9204      	strlt	r2, [sp, #16]
 80057ce:	7823      	ldrb	r3, [r4, #0]
 80057d0:	2b2e      	cmp	r3, #46	; 0x2e
 80057d2:	d10c      	bne.n	80057ee <_vfiprintf_r+0x176>
 80057d4:	7863      	ldrb	r3, [r4, #1]
 80057d6:	2b2a      	cmp	r3, #42	; 0x2a
 80057d8:	d135      	bne.n	8005846 <_vfiprintf_r+0x1ce>
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	1d1a      	adds	r2, r3, #4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	9203      	str	r2, [sp, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bfb8      	it	lt
 80057e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80057ea:	3402      	adds	r4, #2
 80057ec:	9305      	str	r3, [sp, #20]
 80057ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058d4 <_vfiprintf_r+0x25c>
 80057f2:	7821      	ldrb	r1, [r4, #0]
 80057f4:	2203      	movs	r2, #3
 80057f6:	4650      	mov	r0, sl
 80057f8:	f7fa fcf2 	bl	80001e0 <memchr>
 80057fc:	b140      	cbz	r0, 8005810 <_vfiprintf_r+0x198>
 80057fe:	2340      	movs	r3, #64	; 0x40
 8005800:	eba0 000a 	sub.w	r0, r0, sl
 8005804:	fa03 f000 	lsl.w	r0, r3, r0
 8005808:	9b04      	ldr	r3, [sp, #16]
 800580a:	4303      	orrs	r3, r0
 800580c:	3401      	adds	r4, #1
 800580e:	9304      	str	r3, [sp, #16]
 8005810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005814:	482c      	ldr	r0, [pc, #176]	; (80058c8 <_vfiprintf_r+0x250>)
 8005816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800581a:	2206      	movs	r2, #6
 800581c:	f7fa fce0 	bl	80001e0 <memchr>
 8005820:	2800      	cmp	r0, #0
 8005822:	d03f      	beq.n	80058a4 <_vfiprintf_r+0x22c>
 8005824:	4b29      	ldr	r3, [pc, #164]	; (80058cc <_vfiprintf_r+0x254>)
 8005826:	bb1b      	cbnz	r3, 8005870 <_vfiprintf_r+0x1f8>
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	3307      	adds	r3, #7
 800582c:	f023 0307 	bic.w	r3, r3, #7
 8005830:	3308      	adds	r3, #8
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005836:	443b      	add	r3, r7
 8005838:	9309      	str	r3, [sp, #36]	; 0x24
 800583a:	e767      	b.n	800570c <_vfiprintf_r+0x94>
 800583c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005840:	460c      	mov	r4, r1
 8005842:	2001      	movs	r0, #1
 8005844:	e7a5      	b.n	8005792 <_vfiprintf_r+0x11a>
 8005846:	2300      	movs	r3, #0
 8005848:	3401      	adds	r4, #1
 800584a:	9305      	str	r3, [sp, #20]
 800584c:	4619      	mov	r1, r3
 800584e:	f04f 0c0a 	mov.w	ip, #10
 8005852:	4620      	mov	r0, r4
 8005854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005858:	3a30      	subs	r2, #48	; 0x30
 800585a:	2a09      	cmp	r2, #9
 800585c:	d903      	bls.n	8005866 <_vfiprintf_r+0x1ee>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0c5      	beq.n	80057ee <_vfiprintf_r+0x176>
 8005862:	9105      	str	r1, [sp, #20]
 8005864:	e7c3      	b.n	80057ee <_vfiprintf_r+0x176>
 8005866:	fb0c 2101 	mla	r1, ip, r1, r2
 800586a:	4604      	mov	r4, r0
 800586c:	2301      	movs	r3, #1
 800586e:	e7f0      	b.n	8005852 <_vfiprintf_r+0x1da>
 8005870:	ab03      	add	r3, sp, #12
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	462a      	mov	r2, r5
 8005876:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <_vfiprintf_r+0x258>)
 8005878:	a904      	add	r1, sp, #16
 800587a:	4630      	mov	r0, r6
 800587c:	f000 f8cc 	bl	8005a18 <_printf_float>
 8005880:	4607      	mov	r7, r0
 8005882:	1c78      	adds	r0, r7, #1
 8005884:	d1d6      	bne.n	8005834 <_vfiprintf_r+0x1bc>
 8005886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005888:	07d9      	lsls	r1, r3, #31
 800588a:	d405      	bmi.n	8005898 <_vfiprintf_r+0x220>
 800588c:	89ab      	ldrh	r3, [r5, #12]
 800588e:	059a      	lsls	r2, r3, #22
 8005890:	d402      	bmi.n	8005898 <_vfiprintf_r+0x220>
 8005892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005894:	f001 fda6 	bl	80073e4 <__retarget_lock_release_recursive>
 8005898:	89ab      	ldrh	r3, [r5, #12]
 800589a:	065b      	lsls	r3, r3, #25
 800589c:	f53f af12 	bmi.w	80056c4 <_vfiprintf_r+0x4c>
 80058a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058a2:	e711      	b.n	80056c8 <_vfiprintf_r+0x50>
 80058a4:	ab03      	add	r3, sp, #12
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	462a      	mov	r2, r5
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <_vfiprintf_r+0x258>)
 80058ac:	a904      	add	r1, sp, #16
 80058ae:	4630      	mov	r0, r6
 80058b0:	f000 fb56 	bl	8005f60 <_printf_i>
 80058b4:	e7e4      	b.n	8005880 <_vfiprintf_r+0x208>
 80058b6:	bf00      	nop
 80058b8:	08008810 	.word	0x08008810
 80058bc:	08008830 	.word	0x08008830
 80058c0:	080087f0 	.word	0x080087f0
 80058c4:	08008714 	.word	0x08008714
 80058c8:	0800871e 	.word	0x0800871e
 80058cc:	08005a19 	.word	0x08005a19
 80058d0:	08005653 	.word	0x08005653
 80058d4:	0800871a 	.word	0x0800871a

080058d8 <__cvt>:
 80058d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058dc:	ec55 4b10 	vmov	r4, r5, d0
 80058e0:	2d00      	cmp	r5, #0
 80058e2:	460e      	mov	r6, r1
 80058e4:	4619      	mov	r1, r3
 80058e6:	462b      	mov	r3, r5
 80058e8:	bfbb      	ittet	lt
 80058ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058ee:	461d      	movlt	r5, r3
 80058f0:	2300      	movge	r3, #0
 80058f2:	232d      	movlt	r3, #45	; 0x2d
 80058f4:	700b      	strb	r3, [r1, #0]
 80058f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058fc:	4691      	mov	r9, r2
 80058fe:	f023 0820 	bic.w	r8, r3, #32
 8005902:	bfbc      	itt	lt
 8005904:	4622      	movlt	r2, r4
 8005906:	4614      	movlt	r4, r2
 8005908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800590c:	d005      	beq.n	800591a <__cvt+0x42>
 800590e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005912:	d100      	bne.n	8005916 <__cvt+0x3e>
 8005914:	3601      	adds	r6, #1
 8005916:	2102      	movs	r1, #2
 8005918:	e000      	b.n	800591c <__cvt+0x44>
 800591a:	2103      	movs	r1, #3
 800591c:	ab03      	add	r3, sp, #12
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	ab02      	add	r3, sp, #8
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	ec45 4b10 	vmov	d0, r4, r5
 8005928:	4653      	mov	r3, sl
 800592a:	4632      	mov	r2, r6
 800592c:	f000 fdb0 	bl	8006490 <_dtoa_r>
 8005930:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005934:	4607      	mov	r7, r0
 8005936:	d102      	bne.n	800593e <__cvt+0x66>
 8005938:	f019 0f01 	tst.w	r9, #1
 800593c:	d022      	beq.n	8005984 <__cvt+0xac>
 800593e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005942:	eb07 0906 	add.w	r9, r7, r6
 8005946:	d110      	bne.n	800596a <__cvt+0x92>
 8005948:	783b      	ldrb	r3, [r7, #0]
 800594a:	2b30      	cmp	r3, #48	; 0x30
 800594c:	d10a      	bne.n	8005964 <__cvt+0x8c>
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	4620      	mov	r0, r4
 8005954:	4629      	mov	r1, r5
 8005956:	f7fb f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800595a:	b918      	cbnz	r0, 8005964 <__cvt+0x8c>
 800595c:	f1c6 0601 	rsb	r6, r6, #1
 8005960:	f8ca 6000 	str.w	r6, [sl]
 8005964:	f8da 3000 	ldr.w	r3, [sl]
 8005968:	4499      	add	r9, r3
 800596a:	2200      	movs	r2, #0
 800596c:	2300      	movs	r3, #0
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	f7fb f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005976:	b108      	cbz	r0, 800597c <__cvt+0xa4>
 8005978:	f8cd 900c 	str.w	r9, [sp, #12]
 800597c:	2230      	movs	r2, #48	; 0x30
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	454b      	cmp	r3, r9
 8005982:	d307      	bcc.n	8005994 <__cvt+0xbc>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005988:	1bdb      	subs	r3, r3, r7
 800598a:	4638      	mov	r0, r7
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	b004      	add	sp, #16
 8005990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	9103      	str	r1, [sp, #12]
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e7f0      	b.n	800597e <__cvt+0xa6>

0800599c <__exponent>:
 800599c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800599e:	4603      	mov	r3, r0
 80059a0:	2900      	cmp	r1, #0
 80059a2:	bfb8      	it	lt
 80059a4:	4249      	neglt	r1, r1
 80059a6:	f803 2b02 	strb.w	r2, [r3], #2
 80059aa:	bfb4      	ite	lt
 80059ac:	222d      	movlt	r2, #45	; 0x2d
 80059ae:	222b      	movge	r2, #43	; 0x2b
 80059b0:	2909      	cmp	r1, #9
 80059b2:	7042      	strb	r2, [r0, #1]
 80059b4:	dd2a      	ble.n	8005a0c <__exponent+0x70>
 80059b6:	f10d 0407 	add.w	r4, sp, #7
 80059ba:	46a4      	mov	ip, r4
 80059bc:	270a      	movs	r7, #10
 80059be:	46a6      	mov	lr, r4
 80059c0:	460a      	mov	r2, r1
 80059c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80059c6:	fb07 1516 	mls	r5, r7, r6, r1
 80059ca:	3530      	adds	r5, #48	; 0x30
 80059cc:	2a63      	cmp	r2, #99	; 0x63
 80059ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80059d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059d6:	4631      	mov	r1, r6
 80059d8:	dcf1      	bgt.n	80059be <__exponent+0x22>
 80059da:	3130      	adds	r1, #48	; 0x30
 80059dc:	f1ae 0502 	sub.w	r5, lr, #2
 80059e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059e4:	1c44      	adds	r4, r0, #1
 80059e6:	4629      	mov	r1, r5
 80059e8:	4561      	cmp	r1, ip
 80059ea:	d30a      	bcc.n	8005a02 <__exponent+0x66>
 80059ec:	f10d 0209 	add.w	r2, sp, #9
 80059f0:	eba2 020e 	sub.w	r2, r2, lr
 80059f4:	4565      	cmp	r5, ip
 80059f6:	bf88      	it	hi
 80059f8:	2200      	movhi	r2, #0
 80059fa:	4413      	add	r3, r2
 80059fc:	1a18      	subs	r0, r3, r0
 80059fe:	b003      	add	sp, #12
 8005a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a0a:	e7ed      	b.n	80059e8 <__exponent+0x4c>
 8005a0c:	2330      	movs	r3, #48	; 0x30
 8005a0e:	3130      	adds	r1, #48	; 0x30
 8005a10:	7083      	strb	r3, [r0, #2]
 8005a12:	70c1      	strb	r1, [r0, #3]
 8005a14:	1d03      	adds	r3, r0, #4
 8005a16:	e7f1      	b.n	80059fc <__exponent+0x60>

08005a18 <_printf_float>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	ed2d 8b02 	vpush	{d8}
 8005a20:	b08d      	sub	sp, #52	; 0x34
 8005a22:	460c      	mov	r4, r1
 8005a24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a28:	4616      	mov	r6, r2
 8005a2a:	461f      	mov	r7, r3
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	f001 fcd3 	bl	80073d8 <_localeconv_r>
 8005a32:	f8d0 a000 	ldr.w	sl, [r0]
 8005a36:	4650      	mov	r0, sl
 8005a38:	f7fa fbca 	bl	80001d0 <strlen>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	9305      	str	r3, [sp, #20]
 8005a44:	f8d8 3000 	ldr.w	r3, [r8]
 8005a48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a4c:	3307      	adds	r3, #7
 8005a4e:	f023 0307 	bic.w	r3, r3, #7
 8005a52:	f103 0208 	add.w	r2, r3, #8
 8005a56:	f8c8 2000 	str.w	r2, [r8]
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a6a:	9307      	str	r3, [sp, #28]
 8005a6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a70:	ee08 0a10 	vmov	s16, r0
 8005a74:	4b9f      	ldr	r3, [pc, #636]	; (8005cf4 <_printf_float+0x2dc>)
 8005a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7e:	f7fb f855 	bl	8000b2c <__aeabi_dcmpun>
 8005a82:	bb88      	cbnz	r0, 8005ae8 <_printf_float+0xd0>
 8005a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a88:	4b9a      	ldr	r3, [pc, #616]	; (8005cf4 <_printf_float+0x2dc>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	f7fb f82f 	bl	8000af0 <__aeabi_dcmple>
 8005a92:	bb48      	cbnz	r0, 8005ae8 <_printf_float+0xd0>
 8005a94:	2200      	movs	r2, #0
 8005a96:	2300      	movs	r3, #0
 8005a98:	4640      	mov	r0, r8
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	f7fb f81e 	bl	8000adc <__aeabi_dcmplt>
 8005aa0:	b110      	cbz	r0, 8005aa8 <_printf_float+0x90>
 8005aa2:	232d      	movs	r3, #45	; 0x2d
 8005aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa8:	4b93      	ldr	r3, [pc, #588]	; (8005cf8 <_printf_float+0x2e0>)
 8005aaa:	4894      	ldr	r0, [pc, #592]	; (8005cfc <_printf_float+0x2e4>)
 8005aac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ab0:	bf94      	ite	ls
 8005ab2:	4698      	movls	r8, r3
 8005ab4:	4680      	movhi	r8, r0
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	9b05      	ldr	r3, [sp, #20]
 8005abc:	f023 0204 	bic.w	r2, r3, #4
 8005ac0:	6022      	str	r2, [r4, #0]
 8005ac2:	f04f 0900 	mov.w	r9, #0
 8005ac6:	9700      	str	r7, [sp, #0]
 8005ac8:	4633      	mov	r3, r6
 8005aca:	aa0b      	add	r2, sp, #44	; 0x2c
 8005acc:	4621      	mov	r1, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 f9d8 	bl	8005e84 <_printf_common>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f040 8090 	bne.w	8005bfa <_printf_float+0x1e2>
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295
 8005ade:	b00d      	add	sp, #52	; 0x34
 8005ae0:	ecbd 8b02 	vpop	{d8}
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	4640      	mov	r0, r8
 8005aee:	4649      	mov	r1, r9
 8005af0:	f7fb f81c 	bl	8000b2c <__aeabi_dcmpun>
 8005af4:	b140      	cbz	r0, 8005b08 <_printf_float+0xf0>
 8005af6:	464b      	mov	r3, r9
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bfbc      	itt	lt
 8005afc:	232d      	movlt	r3, #45	; 0x2d
 8005afe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b02:	487f      	ldr	r0, [pc, #508]	; (8005d00 <_printf_float+0x2e8>)
 8005b04:	4b7f      	ldr	r3, [pc, #508]	; (8005d04 <_printf_float+0x2ec>)
 8005b06:	e7d1      	b.n	8005aac <_printf_float+0x94>
 8005b08:	6863      	ldr	r3, [r4, #4]
 8005b0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b0e:	9206      	str	r2, [sp, #24]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	d13f      	bne.n	8005b94 <_printf_float+0x17c>
 8005b14:	2306      	movs	r3, #6
 8005b16:	6063      	str	r3, [r4, #4]
 8005b18:	9b05      	ldr	r3, [sp, #20]
 8005b1a:	6861      	ldr	r1, [r4, #4]
 8005b1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b20:	2300      	movs	r3, #0
 8005b22:	9303      	str	r3, [sp, #12]
 8005b24:	ab0a      	add	r3, sp, #40	; 0x28
 8005b26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b2a:	ab09      	add	r3, sp, #36	; 0x24
 8005b2c:	ec49 8b10 	vmov	d0, r8, r9
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	6022      	str	r2, [r4, #0]
 8005b34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f7ff fecd 	bl	80058d8 <__cvt>
 8005b3e:	9b06      	ldr	r3, [sp, #24]
 8005b40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b42:	2b47      	cmp	r3, #71	; 0x47
 8005b44:	4680      	mov	r8, r0
 8005b46:	d108      	bne.n	8005b5a <_printf_float+0x142>
 8005b48:	1cc8      	adds	r0, r1, #3
 8005b4a:	db02      	blt.n	8005b52 <_printf_float+0x13a>
 8005b4c:	6863      	ldr	r3, [r4, #4]
 8005b4e:	4299      	cmp	r1, r3
 8005b50:	dd41      	ble.n	8005bd6 <_printf_float+0x1be>
 8005b52:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b56:	fa5f fb8b 	uxtb.w	fp, fp
 8005b5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b5e:	d820      	bhi.n	8005ba2 <_printf_float+0x18a>
 8005b60:	3901      	subs	r1, #1
 8005b62:	465a      	mov	r2, fp
 8005b64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b68:	9109      	str	r1, [sp, #36]	; 0x24
 8005b6a:	f7ff ff17 	bl	800599c <__exponent>
 8005b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b70:	1813      	adds	r3, r2, r0
 8005b72:	2a01      	cmp	r2, #1
 8005b74:	4681      	mov	r9, r0
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	dc02      	bgt.n	8005b80 <_printf_float+0x168>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	07d2      	lsls	r2, r2, #31
 8005b7e:	d501      	bpl.n	8005b84 <_printf_float+0x16c>
 8005b80:	3301      	adds	r3, #1
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d09c      	beq.n	8005ac6 <_printf_float+0xae>
 8005b8c:	232d      	movs	r3, #45	; 0x2d
 8005b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b92:	e798      	b.n	8005ac6 <_printf_float+0xae>
 8005b94:	9a06      	ldr	r2, [sp, #24]
 8005b96:	2a47      	cmp	r2, #71	; 0x47
 8005b98:	d1be      	bne.n	8005b18 <_printf_float+0x100>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1bc      	bne.n	8005b18 <_printf_float+0x100>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e7b9      	b.n	8005b16 <_printf_float+0xfe>
 8005ba2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ba6:	d118      	bne.n	8005bda <_printf_float+0x1c2>
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	dd0b      	ble.n	8005bc6 <_printf_float+0x1ae>
 8005bae:	6121      	str	r1, [r4, #16]
 8005bb0:	b913      	cbnz	r3, 8005bb8 <_printf_float+0x1a0>
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	07d0      	lsls	r0, r2, #31
 8005bb6:	d502      	bpl.n	8005bbe <_printf_float+0x1a6>
 8005bb8:	3301      	adds	r3, #1
 8005bba:	440b      	add	r3, r1
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bc0:	f04f 0900 	mov.w	r9, #0
 8005bc4:	e7de      	b.n	8005b84 <_printf_float+0x16c>
 8005bc6:	b913      	cbnz	r3, 8005bce <_printf_float+0x1b6>
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	07d2      	lsls	r2, r2, #31
 8005bcc:	d501      	bpl.n	8005bd2 <_printf_float+0x1ba>
 8005bce:	3302      	adds	r3, #2
 8005bd0:	e7f4      	b.n	8005bbc <_printf_float+0x1a4>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e7f2      	b.n	8005bbc <_printf_float+0x1a4>
 8005bd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	db05      	blt.n	8005bec <_printf_float+0x1d4>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	6121      	str	r1, [r4, #16]
 8005be4:	07d8      	lsls	r0, r3, #31
 8005be6:	d5ea      	bpl.n	8005bbe <_printf_float+0x1a6>
 8005be8:	1c4b      	adds	r3, r1, #1
 8005bea:	e7e7      	b.n	8005bbc <_printf_float+0x1a4>
 8005bec:	2900      	cmp	r1, #0
 8005bee:	bfd4      	ite	le
 8005bf0:	f1c1 0202 	rsble	r2, r1, #2
 8005bf4:	2201      	movgt	r2, #1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	e7e0      	b.n	8005bbc <_printf_float+0x1a4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	055a      	lsls	r2, r3, #21
 8005bfe:	d407      	bmi.n	8005c10 <_printf_float+0x1f8>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	4642      	mov	r2, r8
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d12c      	bne.n	8005c68 <_printf_float+0x250>
 8005c0e:	e764      	b.n	8005ada <_printf_float+0xc2>
 8005c10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c14:	f240 80e0 	bls.w	8005dd8 <_printf_float+0x3c0>
 8005c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f7fa ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d034      	beq.n	8005c92 <_printf_float+0x27a>
 8005c28:	4a37      	ldr	r2, [pc, #220]	; (8005d08 <_printf_float+0x2f0>)
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f af51 	beq.w	8005ada <_printf_float+0xc2>
 8005c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	db02      	blt.n	8005c46 <_printf_float+0x22e>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	07d8      	lsls	r0, r3, #31
 8005c44:	d510      	bpl.n	8005c68 <_printf_float+0x250>
 8005c46:	ee18 3a10 	vmov	r3, s16
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f af41 	beq.w	8005ada <_printf_float+0xc2>
 8005c58:	f04f 0800 	mov.w	r8, #0
 8005c5c:	f104 091a 	add.w	r9, r4, #26
 8005c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c62:	3b01      	subs	r3, #1
 8005c64:	4543      	cmp	r3, r8
 8005c66:	dc09      	bgt.n	8005c7c <_printf_float+0x264>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	079b      	lsls	r3, r3, #30
 8005c6c:	f100 8105 	bmi.w	8005e7a <_printf_float+0x462>
 8005c70:	68e0      	ldr	r0, [r4, #12]
 8005c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c74:	4298      	cmp	r0, r3
 8005c76:	bfb8      	it	lt
 8005c78:	4618      	movlt	r0, r3
 8005c7a:	e730      	b.n	8005ade <_printf_float+0xc6>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	464a      	mov	r2, r9
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	f43f af27 	beq.w	8005ada <_printf_float+0xc2>
 8005c8c:	f108 0801 	add.w	r8, r8, #1
 8005c90:	e7e6      	b.n	8005c60 <_printf_float+0x248>
 8005c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dc39      	bgt.n	8005d0c <_printf_float+0x2f4>
 8005c98:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <_printf_float+0x2f0>)
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b8      	blx	r7
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f43f af19 	beq.w	8005ada <_printf_float+0xc2>
 8005ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cac:	4313      	orrs	r3, r2
 8005cae:	d102      	bne.n	8005cb6 <_printf_float+0x29e>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	07d9      	lsls	r1, r3, #31
 8005cb4:	d5d8      	bpl.n	8005c68 <_printf_float+0x250>
 8005cb6:	ee18 3a10 	vmov	r3, s16
 8005cba:	4652      	mov	r2, sl
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f43f af09 	beq.w	8005ada <_printf_float+0xc2>
 8005cc8:	f04f 0900 	mov.w	r9, #0
 8005ccc:	f104 0a1a 	add.w	sl, r4, #26
 8005cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd2:	425b      	negs	r3, r3
 8005cd4:	454b      	cmp	r3, r9
 8005cd6:	dc01      	bgt.n	8005cdc <_printf_float+0x2c4>
 8005cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cda:	e792      	b.n	8005c02 <_printf_float+0x1ea>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4652      	mov	r2, sl
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f aef7 	beq.w	8005ada <_printf_float+0xc2>
 8005cec:	f109 0901 	add.w	r9, r9, #1
 8005cf0:	e7ee      	b.n	8005cd0 <_printf_float+0x2b8>
 8005cf2:	bf00      	nop
 8005cf4:	7fefffff 	.word	0x7fefffff
 8005cf8:	08008725 	.word	0x08008725
 8005cfc:	08008729 	.word	0x08008729
 8005d00:	08008731 	.word	0x08008731
 8005d04:	0800872d 	.word	0x0800872d
 8005d08:	08008735 	.word	0x08008735
 8005d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d10:	429a      	cmp	r2, r3
 8005d12:	bfa8      	it	ge
 8005d14:	461a      	movge	r2, r3
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	4691      	mov	r9, r2
 8005d1a:	dc37      	bgt.n	8005d8c <_printf_float+0x374>
 8005d1c:	f04f 0b00 	mov.w	fp, #0
 8005d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d24:	f104 021a 	add.w	r2, r4, #26
 8005d28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d2a:	9305      	str	r3, [sp, #20]
 8005d2c:	eba3 0309 	sub.w	r3, r3, r9
 8005d30:	455b      	cmp	r3, fp
 8005d32:	dc33      	bgt.n	8005d9c <_printf_float+0x384>
 8005d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	db3b      	blt.n	8005db4 <_printf_float+0x39c>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	07da      	lsls	r2, r3, #31
 8005d40:	d438      	bmi.n	8005db4 <_printf_float+0x39c>
 8005d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d44:	9b05      	ldr	r3, [sp, #20]
 8005d46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	eba2 0901 	sub.w	r9, r2, r1
 8005d4e:	4599      	cmp	r9, r3
 8005d50:	bfa8      	it	ge
 8005d52:	4699      	movge	r9, r3
 8005d54:	f1b9 0f00 	cmp.w	r9, #0
 8005d58:	dc35      	bgt.n	8005dc6 <_printf_float+0x3ae>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d62:	f104 0a1a 	add.w	sl, r4, #26
 8005d66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	eba3 0309 	sub.w	r3, r3, r9
 8005d70:	4543      	cmp	r3, r8
 8005d72:	f77f af79 	ble.w	8005c68 <_printf_float+0x250>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	f43f aeaa 	beq.w	8005ada <_printf_float+0xc2>
 8005d86:	f108 0801 	add.w	r8, r8, #1
 8005d8a:	e7ec      	b.n	8005d66 <_printf_float+0x34e>
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4642      	mov	r2, r8
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	d1c0      	bne.n	8005d1c <_printf_float+0x304>
 8005d9a:	e69e      	b.n	8005ada <_printf_float+0xc2>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4628      	mov	r0, r5
 8005da2:	9205      	str	r2, [sp, #20]
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	f43f ae97 	beq.w	8005ada <_printf_float+0xc2>
 8005dac:	9a05      	ldr	r2, [sp, #20]
 8005dae:	f10b 0b01 	add.w	fp, fp, #1
 8005db2:	e7b9      	b.n	8005d28 <_printf_float+0x310>
 8005db4:	ee18 3a10 	vmov	r3, s16
 8005db8:	4652      	mov	r2, sl
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d1be      	bne.n	8005d42 <_printf_float+0x32a>
 8005dc4:	e689      	b.n	8005ada <_printf_float+0xc2>
 8005dc6:	9a05      	ldr	r2, [sp, #20]
 8005dc8:	464b      	mov	r3, r9
 8005dca:	4442      	add	r2, r8
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d1c1      	bne.n	8005d5a <_printf_float+0x342>
 8005dd6:	e680      	b.n	8005ada <_printf_float+0xc2>
 8005dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dda:	2a01      	cmp	r2, #1
 8005ddc:	dc01      	bgt.n	8005de2 <_printf_float+0x3ca>
 8005dde:	07db      	lsls	r3, r3, #31
 8005de0:	d538      	bpl.n	8005e54 <_printf_float+0x43c>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4642      	mov	r2, r8
 8005de6:	4631      	mov	r1, r6
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	f43f ae74 	beq.w	8005ada <_printf_float+0xc2>
 8005df2:	ee18 3a10 	vmov	r3, s16
 8005df6:	4652      	mov	r2, sl
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f ae6b 	beq.w	8005ada <_printf_float+0xc2>
 8005e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f7fa fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e10:	b9d8      	cbnz	r0, 8005e4a <_printf_float+0x432>
 8005e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e14:	f108 0201 	add.w	r2, r8, #1
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	d10e      	bne.n	8005e42 <_printf_float+0x42a>
 8005e24:	e659      	b.n	8005ada <_printf_float+0xc2>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4652      	mov	r2, sl
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	47b8      	blx	r7
 8005e30:	3001      	adds	r0, #1
 8005e32:	f43f ae52 	beq.w	8005ada <_printf_float+0xc2>
 8005e36:	f108 0801 	add.w	r8, r8, #1
 8005e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	4543      	cmp	r3, r8
 8005e40:	dcf1      	bgt.n	8005e26 <_printf_float+0x40e>
 8005e42:	464b      	mov	r3, r9
 8005e44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e48:	e6dc      	b.n	8005c04 <_printf_float+0x1ec>
 8005e4a:	f04f 0800 	mov.w	r8, #0
 8005e4e:	f104 0a1a 	add.w	sl, r4, #26
 8005e52:	e7f2      	b.n	8005e3a <_printf_float+0x422>
 8005e54:	2301      	movs	r3, #1
 8005e56:	4642      	mov	r2, r8
 8005e58:	e7df      	b.n	8005e1a <_printf_float+0x402>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	464a      	mov	r2, r9
 8005e5e:	4631      	mov	r1, r6
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b8      	blx	r7
 8005e64:	3001      	adds	r0, #1
 8005e66:	f43f ae38 	beq.w	8005ada <_printf_float+0xc2>
 8005e6a:	f108 0801 	add.w	r8, r8, #1
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e72:	1a5b      	subs	r3, r3, r1
 8005e74:	4543      	cmp	r3, r8
 8005e76:	dcf0      	bgt.n	8005e5a <_printf_float+0x442>
 8005e78:	e6fa      	b.n	8005c70 <_printf_float+0x258>
 8005e7a:	f04f 0800 	mov.w	r8, #0
 8005e7e:	f104 0919 	add.w	r9, r4, #25
 8005e82:	e7f4      	b.n	8005e6e <_printf_float+0x456>

08005e84 <_printf_common>:
 8005e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e88:	4616      	mov	r6, r2
 8005e8a:	4699      	mov	r9, r3
 8005e8c:	688a      	ldr	r2, [r1, #8]
 8005e8e:	690b      	ldr	r3, [r1, #16]
 8005e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e94:	4293      	cmp	r3, r2
 8005e96:	bfb8      	it	lt
 8005e98:	4613      	movlt	r3, r2
 8005e9a:	6033      	str	r3, [r6, #0]
 8005e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	b10a      	cbz	r2, 8005eaa <_printf_common+0x26>
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	6033      	str	r3, [r6, #0]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	0699      	lsls	r1, r3, #26
 8005eae:	bf42      	ittt	mi
 8005eb0:	6833      	ldrmi	r3, [r6, #0]
 8005eb2:	3302      	addmi	r3, #2
 8005eb4:	6033      	strmi	r3, [r6, #0]
 8005eb6:	6825      	ldr	r5, [r4, #0]
 8005eb8:	f015 0506 	ands.w	r5, r5, #6
 8005ebc:	d106      	bne.n	8005ecc <_printf_common+0x48>
 8005ebe:	f104 0a19 	add.w	sl, r4, #25
 8005ec2:	68e3      	ldr	r3, [r4, #12]
 8005ec4:	6832      	ldr	r2, [r6, #0]
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	dc26      	bgt.n	8005f1a <_printf_common+0x96>
 8005ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ed0:	1e13      	subs	r3, r2, #0
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	bf18      	it	ne
 8005ed6:	2301      	movne	r3, #1
 8005ed8:	0692      	lsls	r2, r2, #26
 8005eda:	d42b      	bmi.n	8005f34 <_printf_common+0xb0>
 8005edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	47c0      	blx	r8
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d01e      	beq.n	8005f28 <_printf_common+0xa4>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	68e5      	ldr	r5, [r4, #12]
 8005eee:	6832      	ldr	r2, [r6, #0]
 8005ef0:	f003 0306 	and.w	r3, r3, #6
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	bf08      	it	eq
 8005ef8:	1aad      	subeq	r5, r5, r2
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	6922      	ldr	r2, [r4, #16]
 8005efe:	bf0c      	ite	eq
 8005f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f04:	2500      	movne	r5, #0
 8005f06:	4293      	cmp	r3, r2
 8005f08:	bfc4      	itt	gt
 8005f0a:	1a9b      	subgt	r3, r3, r2
 8005f0c:	18ed      	addgt	r5, r5, r3
 8005f0e:	2600      	movs	r6, #0
 8005f10:	341a      	adds	r4, #26
 8005f12:	42b5      	cmp	r5, r6
 8005f14:	d11a      	bne.n	8005f4c <_printf_common+0xc8>
 8005f16:	2000      	movs	r0, #0
 8005f18:	e008      	b.n	8005f2c <_printf_common+0xa8>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4652      	mov	r2, sl
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4638      	mov	r0, r7
 8005f22:	47c0      	blx	r8
 8005f24:	3001      	adds	r0, #1
 8005f26:	d103      	bne.n	8005f30 <_printf_common+0xac>
 8005f28:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f30:	3501      	adds	r5, #1
 8005f32:	e7c6      	b.n	8005ec2 <_printf_common+0x3e>
 8005f34:	18e1      	adds	r1, r4, r3
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	2030      	movs	r0, #48	; 0x30
 8005f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f3e:	4422      	add	r2, r4
 8005f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f48:	3302      	adds	r3, #2
 8005f4a:	e7c7      	b.n	8005edc <_printf_common+0x58>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4649      	mov	r1, r9
 8005f52:	4638      	mov	r0, r7
 8005f54:	47c0      	blx	r8
 8005f56:	3001      	adds	r0, #1
 8005f58:	d0e6      	beq.n	8005f28 <_printf_common+0xa4>
 8005f5a:	3601      	adds	r6, #1
 8005f5c:	e7d9      	b.n	8005f12 <_printf_common+0x8e>
	...

08005f60 <_printf_i>:
 8005f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f64:	460c      	mov	r4, r1
 8005f66:	4691      	mov	r9, r2
 8005f68:	7e27      	ldrb	r7, [r4, #24]
 8005f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f6c:	2f78      	cmp	r7, #120	; 0x78
 8005f6e:	4680      	mov	r8, r0
 8005f70:	469a      	mov	sl, r3
 8005f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f76:	d807      	bhi.n	8005f88 <_printf_i+0x28>
 8005f78:	2f62      	cmp	r7, #98	; 0x62
 8005f7a:	d80a      	bhi.n	8005f92 <_printf_i+0x32>
 8005f7c:	2f00      	cmp	r7, #0
 8005f7e:	f000 80d8 	beq.w	8006132 <_printf_i+0x1d2>
 8005f82:	2f58      	cmp	r7, #88	; 0x58
 8005f84:	f000 80a3 	beq.w	80060ce <_printf_i+0x16e>
 8005f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f90:	e03a      	b.n	8006008 <_printf_i+0xa8>
 8005f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f96:	2b15      	cmp	r3, #21
 8005f98:	d8f6      	bhi.n	8005f88 <_printf_i+0x28>
 8005f9a:	a001      	add	r0, pc, #4	; (adr r0, 8005fa0 <_printf_i+0x40>)
 8005f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005fa0:	08005ff9 	.word	0x08005ff9
 8005fa4:	0800600d 	.word	0x0800600d
 8005fa8:	08005f89 	.word	0x08005f89
 8005fac:	08005f89 	.word	0x08005f89
 8005fb0:	08005f89 	.word	0x08005f89
 8005fb4:	08005f89 	.word	0x08005f89
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	08005f89 	.word	0x08005f89
 8005fc0:	08005f89 	.word	0x08005f89
 8005fc4:	08005f89 	.word	0x08005f89
 8005fc8:	08005f89 	.word	0x08005f89
 8005fcc:	08006119 	.word	0x08006119
 8005fd0:	0800603d 	.word	0x0800603d
 8005fd4:	080060fb 	.word	0x080060fb
 8005fd8:	08005f89 	.word	0x08005f89
 8005fdc:	08005f89 	.word	0x08005f89
 8005fe0:	0800613b 	.word	0x0800613b
 8005fe4:	08005f89 	.word	0x08005f89
 8005fe8:	0800603d 	.word	0x0800603d
 8005fec:	08005f89 	.word	0x08005f89
 8005ff0:	08005f89 	.word	0x08005f89
 8005ff4:	08006103 	.word	0x08006103
 8005ff8:	680b      	ldr	r3, [r1, #0]
 8005ffa:	1d1a      	adds	r2, r3, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	600a      	str	r2, [r1, #0]
 8006000:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006008:	2301      	movs	r3, #1
 800600a:	e0a3      	b.n	8006154 <_printf_i+0x1f4>
 800600c:	6825      	ldr	r5, [r4, #0]
 800600e:	6808      	ldr	r0, [r1, #0]
 8006010:	062e      	lsls	r6, r5, #24
 8006012:	f100 0304 	add.w	r3, r0, #4
 8006016:	d50a      	bpl.n	800602e <_printf_i+0xce>
 8006018:	6805      	ldr	r5, [r0, #0]
 800601a:	600b      	str	r3, [r1, #0]
 800601c:	2d00      	cmp	r5, #0
 800601e:	da03      	bge.n	8006028 <_printf_i+0xc8>
 8006020:	232d      	movs	r3, #45	; 0x2d
 8006022:	426d      	negs	r5, r5
 8006024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006028:	485e      	ldr	r0, [pc, #376]	; (80061a4 <_printf_i+0x244>)
 800602a:	230a      	movs	r3, #10
 800602c:	e019      	b.n	8006062 <_printf_i+0x102>
 800602e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006032:	6805      	ldr	r5, [r0, #0]
 8006034:	600b      	str	r3, [r1, #0]
 8006036:	bf18      	it	ne
 8006038:	b22d      	sxthne	r5, r5
 800603a:	e7ef      	b.n	800601c <_printf_i+0xbc>
 800603c:	680b      	ldr	r3, [r1, #0]
 800603e:	6825      	ldr	r5, [r4, #0]
 8006040:	1d18      	adds	r0, r3, #4
 8006042:	6008      	str	r0, [r1, #0]
 8006044:	0628      	lsls	r0, r5, #24
 8006046:	d501      	bpl.n	800604c <_printf_i+0xec>
 8006048:	681d      	ldr	r5, [r3, #0]
 800604a:	e002      	b.n	8006052 <_printf_i+0xf2>
 800604c:	0669      	lsls	r1, r5, #25
 800604e:	d5fb      	bpl.n	8006048 <_printf_i+0xe8>
 8006050:	881d      	ldrh	r5, [r3, #0]
 8006052:	4854      	ldr	r0, [pc, #336]	; (80061a4 <_printf_i+0x244>)
 8006054:	2f6f      	cmp	r7, #111	; 0x6f
 8006056:	bf0c      	ite	eq
 8006058:	2308      	moveq	r3, #8
 800605a:	230a      	movne	r3, #10
 800605c:	2100      	movs	r1, #0
 800605e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006062:	6866      	ldr	r6, [r4, #4]
 8006064:	60a6      	str	r6, [r4, #8]
 8006066:	2e00      	cmp	r6, #0
 8006068:	bfa2      	ittt	ge
 800606a:	6821      	ldrge	r1, [r4, #0]
 800606c:	f021 0104 	bicge.w	r1, r1, #4
 8006070:	6021      	strge	r1, [r4, #0]
 8006072:	b90d      	cbnz	r5, 8006078 <_printf_i+0x118>
 8006074:	2e00      	cmp	r6, #0
 8006076:	d04d      	beq.n	8006114 <_printf_i+0x1b4>
 8006078:	4616      	mov	r6, r2
 800607a:	fbb5 f1f3 	udiv	r1, r5, r3
 800607e:	fb03 5711 	mls	r7, r3, r1, r5
 8006082:	5dc7      	ldrb	r7, [r0, r7]
 8006084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006088:	462f      	mov	r7, r5
 800608a:	42bb      	cmp	r3, r7
 800608c:	460d      	mov	r5, r1
 800608e:	d9f4      	bls.n	800607a <_printf_i+0x11a>
 8006090:	2b08      	cmp	r3, #8
 8006092:	d10b      	bne.n	80060ac <_printf_i+0x14c>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	07df      	lsls	r7, r3, #31
 8006098:	d508      	bpl.n	80060ac <_printf_i+0x14c>
 800609a:	6923      	ldr	r3, [r4, #16]
 800609c:	6861      	ldr	r1, [r4, #4]
 800609e:	4299      	cmp	r1, r3
 80060a0:	bfde      	ittt	le
 80060a2:	2330      	movle	r3, #48	; 0x30
 80060a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060ac:	1b92      	subs	r2, r2, r6
 80060ae:	6122      	str	r2, [r4, #16]
 80060b0:	f8cd a000 	str.w	sl, [sp]
 80060b4:	464b      	mov	r3, r9
 80060b6:	aa03      	add	r2, sp, #12
 80060b8:	4621      	mov	r1, r4
 80060ba:	4640      	mov	r0, r8
 80060bc:	f7ff fee2 	bl	8005e84 <_printf_common>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d14c      	bne.n	800615e <_printf_i+0x1fe>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	b004      	add	sp, #16
 80060ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ce:	4835      	ldr	r0, [pc, #212]	; (80061a4 <_printf_i+0x244>)
 80060d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	680e      	ldr	r6, [r1, #0]
 80060d8:	061f      	lsls	r7, r3, #24
 80060da:	f856 5b04 	ldr.w	r5, [r6], #4
 80060de:	600e      	str	r6, [r1, #0]
 80060e0:	d514      	bpl.n	800610c <_printf_i+0x1ac>
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	bf44      	itt	mi
 80060e6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ea:	6023      	strmi	r3, [r4, #0]
 80060ec:	b91d      	cbnz	r5, 80060f6 <_printf_i+0x196>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f023 0320 	bic.w	r3, r3, #32
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	2310      	movs	r3, #16
 80060f8:	e7b0      	b.n	800605c <_printf_i+0xfc>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	f043 0320 	orr.w	r3, r3, #32
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	2378      	movs	r3, #120	; 0x78
 8006104:	4828      	ldr	r0, [pc, #160]	; (80061a8 <_printf_i+0x248>)
 8006106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800610a:	e7e3      	b.n	80060d4 <_printf_i+0x174>
 800610c:	065e      	lsls	r6, r3, #25
 800610e:	bf48      	it	mi
 8006110:	b2ad      	uxthmi	r5, r5
 8006112:	e7e6      	b.n	80060e2 <_printf_i+0x182>
 8006114:	4616      	mov	r6, r2
 8006116:	e7bb      	b.n	8006090 <_printf_i+0x130>
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	6826      	ldr	r6, [r4, #0]
 800611c:	6960      	ldr	r0, [r4, #20]
 800611e:	1d1d      	adds	r5, r3, #4
 8006120:	600d      	str	r5, [r1, #0]
 8006122:	0635      	lsls	r5, r6, #24
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	d501      	bpl.n	800612c <_printf_i+0x1cc>
 8006128:	6018      	str	r0, [r3, #0]
 800612a:	e002      	b.n	8006132 <_printf_i+0x1d2>
 800612c:	0671      	lsls	r1, r6, #25
 800612e:	d5fb      	bpl.n	8006128 <_printf_i+0x1c8>
 8006130:	8018      	strh	r0, [r3, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	4616      	mov	r6, r2
 8006138:	e7ba      	b.n	80060b0 <_printf_i+0x150>
 800613a:	680b      	ldr	r3, [r1, #0]
 800613c:	1d1a      	adds	r2, r3, #4
 800613e:	600a      	str	r2, [r1, #0]
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	6862      	ldr	r2, [r4, #4]
 8006144:	2100      	movs	r1, #0
 8006146:	4630      	mov	r0, r6
 8006148:	f7fa f84a 	bl	80001e0 <memchr>
 800614c:	b108      	cbz	r0, 8006152 <_printf_i+0x1f2>
 800614e:	1b80      	subs	r0, r0, r6
 8006150:	6060      	str	r0, [r4, #4]
 8006152:	6863      	ldr	r3, [r4, #4]
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	2300      	movs	r3, #0
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615c:	e7a8      	b.n	80060b0 <_printf_i+0x150>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	4632      	mov	r2, r6
 8006162:	4649      	mov	r1, r9
 8006164:	4640      	mov	r0, r8
 8006166:	47d0      	blx	sl
 8006168:	3001      	adds	r0, #1
 800616a:	d0ab      	beq.n	80060c4 <_printf_i+0x164>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	079b      	lsls	r3, r3, #30
 8006170:	d413      	bmi.n	800619a <_printf_i+0x23a>
 8006172:	68e0      	ldr	r0, [r4, #12]
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	4298      	cmp	r0, r3
 8006178:	bfb8      	it	lt
 800617a:	4618      	movlt	r0, r3
 800617c:	e7a4      	b.n	80060c8 <_printf_i+0x168>
 800617e:	2301      	movs	r3, #1
 8006180:	4632      	mov	r2, r6
 8006182:	4649      	mov	r1, r9
 8006184:	4640      	mov	r0, r8
 8006186:	47d0      	blx	sl
 8006188:	3001      	adds	r0, #1
 800618a:	d09b      	beq.n	80060c4 <_printf_i+0x164>
 800618c:	3501      	adds	r5, #1
 800618e:	68e3      	ldr	r3, [r4, #12]
 8006190:	9903      	ldr	r1, [sp, #12]
 8006192:	1a5b      	subs	r3, r3, r1
 8006194:	42ab      	cmp	r3, r5
 8006196:	dcf2      	bgt.n	800617e <_printf_i+0x21e>
 8006198:	e7eb      	b.n	8006172 <_printf_i+0x212>
 800619a:	2500      	movs	r5, #0
 800619c:	f104 0619 	add.w	r6, r4, #25
 80061a0:	e7f5      	b.n	800618e <_printf_i+0x22e>
 80061a2:	bf00      	nop
 80061a4:	08008737 	.word	0x08008737
 80061a8:	08008748 	.word	0x08008748

080061ac <siprintf>:
 80061ac:	b40e      	push	{r1, r2, r3}
 80061ae:	b500      	push	{lr}
 80061b0:	b09c      	sub	sp, #112	; 0x70
 80061b2:	ab1d      	add	r3, sp, #116	; 0x74
 80061b4:	9002      	str	r0, [sp, #8]
 80061b6:	9006      	str	r0, [sp, #24]
 80061b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061bc:	4809      	ldr	r0, [pc, #36]	; (80061e4 <siprintf+0x38>)
 80061be:	9107      	str	r1, [sp, #28]
 80061c0:	9104      	str	r1, [sp, #16]
 80061c2:	4909      	ldr	r1, [pc, #36]	; (80061e8 <siprintf+0x3c>)
 80061c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c8:	9105      	str	r1, [sp, #20]
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	a902      	add	r1, sp, #8
 80061d0:	f001 fe58 	bl	8007e84 <_svfiprintf_r>
 80061d4:	9b02      	ldr	r3, [sp, #8]
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	b01c      	add	sp, #112	; 0x70
 80061dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80061e0:	b003      	add	sp, #12
 80061e2:	4770      	bx	lr
 80061e4:	20000018 	.word	0x20000018
 80061e8:	ffff0208 	.word	0xffff0208

080061ec <__swbuf_r>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	460e      	mov	r6, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	4605      	mov	r5, r0
 80061f4:	b118      	cbz	r0, 80061fe <__swbuf_r+0x12>
 80061f6:	6983      	ldr	r3, [r0, #24]
 80061f8:	b90b      	cbnz	r3, 80061fe <__swbuf_r+0x12>
 80061fa:	f001 f84f 	bl	800729c <__sinit>
 80061fe:	4b21      	ldr	r3, [pc, #132]	; (8006284 <__swbuf_r+0x98>)
 8006200:	429c      	cmp	r4, r3
 8006202:	d12b      	bne.n	800625c <__swbuf_r+0x70>
 8006204:	686c      	ldr	r4, [r5, #4]
 8006206:	69a3      	ldr	r3, [r4, #24]
 8006208:	60a3      	str	r3, [r4, #8]
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	071a      	lsls	r2, r3, #28
 800620e:	d52f      	bpl.n	8006270 <__swbuf_r+0x84>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	b36b      	cbz	r3, 8006270 <__swbuf_r+0x84>
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	6820      	ldr	r0, [r4, #0]
 8006218:	1ac0      	subs	r0, r0, r3
 800621a:	6963      	ldr	r3, [r4, #20]
 800621c:	b2f6      	uxtb	r6, r6
 800621e:	4283      	cmp	r3, r0
 8006220:	4637      	mov	r7, r6
 8006222:	dc04      	bgt.n	800622e <__swbuf_r+0x42>
 8006224:	4621      	mov	r1, r4
 8006226:	4628      	mov	r0, r5
 8006228:	f000 ffa4 	bl	8007174 <_fflush_r>
 800622c:	bb30      	cbnz	r0, 800627c <__swbuf_r+0x90>
 800622e:	68a3      	ldr	r3, [r4, #8]
 8006230:	3b01      	subs	r3, #1
 8006232:	60a3      	str	r3, [r4, #8]
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	6022      	str	r2, [r4, #0]
 800623a:	701e      	strb	r6, [r3, #0]
 800623c:	6963      	ldr	r3, [r4, #20]
 800623e:	3001      	adds	r0, #1
 8006240:	4283      	cmp	r3, r0
 8006242:	d004      	beq.n	800624e <__swbuf_r+0x62>
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	07db      	lsls	r3, r3, #31
 8006248:	d506      	bpl.n	8006258 <__swbuf_r+0x6c>
 800624a:	2e0a      	cmp	r6, #10
 800624c:	d104      	bne.n	8006258 <__swbuf_r+0x6c>
 800624e:	4621      	mov	r1, r4
 8006250:	4628      	mov	r0, r5
 8006252:	f000 ff8f 	bl	8007174 <_fflush_r>
 8006256:	b988      	cbnz	r0, 800627c <__swbuf_r+0x90>
 8006258:	4638      	mov	r0, r7
 800625a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <__swbuf_r+0x9c>)
 800625e:	429c      	cmp	r4, r3
 8006260:	d101      	bne.n	8006266 <__swbuf_r+0x7a>
 8006262:	68ac      	ldr	r4, [r5, #8]
 8006264:	e7cf      	b.n	8006206 <__swbuf_r+0x1a>
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <__swbuf_r+0xa0>)
 8006268:	429c      	cmp	r4, r3
 800626a:	bf08      	it	eq
 800626c:	68ec      	ldreq	r4, [r5, #12]
 800626e:	e7ca      	b.n	8006206 <__swbuf_r+0x1a>
 8006270:	4621      	mov	r1, r4
 8006272:	4628      	mov	r0, r5
 8006274:	f000 f80c 	bl	8006290 <__swsetup_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	d0cb      	beq.n	8006214 <__swbuf_r+0x28>
 800627c:	f04f 37ff 	mov.w	r7, #4294967295
 8006280:	e7ea      	b.n	8006258 <__swbuf_r+0x6c>
 8006282:	bf00      	nop
 8006284:	08008810 	.word	0x08008810
 8006288:	08008830 	.word	0x08008830
 800628c:	080087f0 	.word	0x080087f0

08006290 <__swsetup_r>:
 8006290:	4b32      	ldr	r3, [pc, #200]	; (800635c <__swsetup_r+0xcc>)
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	681d      	ldr	r5, [r3, #0]
 8006296:	4606      	mov	r6, r0
 8006298:	460c      	mov	r4, r1
 800629a:	b125      	cbz	r5, 80062a6 <__swsetup_r+0x16>
 800629c:	69ab      	ldr	r3, [r5, #24]
 800629e:	b913      	cbnz	r3, 80062a6 <__swsetup_r+0x16>
 80062a0:	4628      	mov	r0, r5
 80062a2:	f000 fffb 	bl	800729c <__sinit>
 80062a6:	4b2e      	ldr	r3, [pc, #184]	; (8006360 <__swsetup_r+0xd0>)
 80062a8:	429c      	cmp	r4, r3
 80062aa:	d10f      	bne.n	80062cc <__swsetup_r+0x3c>
 80062ac:	686c      	ldr	r4, [r5, #4]
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062b4:	0719      	lsls	r1, r3, #28
 80062b6:	d42c      	bmi.n	8006312 <__swsetup_r+0x82>
 80062b8:	06dd      	lsls	r5, r3, #27
 80062ba:	d411      	bmi.n	80062e0 <__swsetup_r+0x50>
 80062bc:	2309      	movs	r3, #9
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	e03e      	b.n	800634a <__swsetup_r+0xba>
 80062cc:	4b25      	ldr	r3, [pc, #148]	; (8006364 <__swsetup_r+0xd4>)
 80062ce:	429c      	cmp	r4, r3
 80062d0:	d101      	bne.n	80062d6 <__swsetup_r+0x46>
 80062d2:	68ac      	ldr	r4, [r5, #8]
 80062d4:	e7eb      	b.n	80062ae <__swsetup_r+0x1e>
 80062d6:	4b24      	ldr	r3, [pc, #144]	; (8006368 <__swsetup_r+0xd8>)
 80062d8:	429c      	cmp	r4, r3
 80062da:	bf08      	it	eq
 80062dc:	68ec      	ldreq	r4, [r5, #12]
 80062de:	e7e6      	b.n	80062ae <__swsetup_r+0x1e>
 80062e0:	0758      	lsls	r0, r3, #29
 80062e2:	d512      	bpl.n	800630a <__swsetup_r+0x7a>
 80062e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062e6:	b141      	cbz	r1, 80062fa <__swsetup_r+0x6a>
 80062e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062ec:	4299      	cmp	r1, r3
 80062ee:	d002      	beq.n	80062f6 <__swsetup_r+0x66>
 80062f0:	4630      	mov	r0, r6
 80062f2:	f001 fc9b 	bl	8007c2c <_free_r>
 80062f6:	2300      	movs	r3, #0
 80062f8:	6363      	str	r3, [r4, #52]	; 0x34
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	2300      	movs	r3, #0
 8006304:	6063      	str	r3, [r4, #4]
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f043 0308 	orr.w	r3, r3, #8
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	b94b      	cbnz	r3, 800632a <__swsetup_r+0x9a>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006320:	d003      	beq.n	800632a <__swsetup_r+0x9a>
 8006322:	4621      	mov	r1, r4
 8006324:	4630      	mov	r0, r6
 8006326:	f001 f883 	bl	8007430 <__smakebuf_r>
 800632a:	89a0      	ldrh	r0, [r4, #12]
 800632c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006330:	f010 0301 	ands.w	r3, r0, #1
 8006334:	d00a      	beq.n	800634c <__swsetup_r+0xbc>
 8006336:	2300      	movs	r3, #0
 8006338:	60a3      	str	r3, [r4, #8]
 800633a:	6963      	ldr	r3, [r4, #20]
 800633c:	425b      	negs	r3, r3
 800633e:	61a3      	str	r3, [r4, #24]
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	b943      	cbnz	r3, 8006356 <__swsetup_r+0xc6>
 8006344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006348:	d1ba      	bne.n	80062c0 <__swsetup_r+0x30>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	0781      	lsls	r1, r0, #30
 800634e:	bf58      	it	pl
 8006350:	6963      	ldrpl	r3, [r4, #20]
 8006352:	60a3      	str	r3, [r4, #8]
 8006354:	e7f4      	b.n	8006340 <__swsetup_r+0xb0>
 8006356:	2000      	movs	r0, #0
 8006358:	e7f7      	b.n	800634a <__swsetup_r+0xba>
 800635a:	bf00      	nop
 800635c:	20000018 	.word	0x20000018
 8006360:	08008810 	.word	0x08008810
 8006364:	08008830 	.word	0x08008830
 8006368:	080087f0 	.word	0x080087f0

0800636c <abort>:
 800636c:	b508      	push	{r3, lr}
 800636e:	2006      	movs	r0, #6
 8006370:	f001 fec0 	bl	80080f4 <raise>
 8006374:	2001      	movs	r0, #1
 8006376:	f7fb fedb 	bl	8002130 <_exit>

0800637a <quorem>:
 800637a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637e:	6903      	ldr	r3, [r0, #16]
 8006380:	690c      	ldr	r4, [r1, #16]
 8006382:	42a3      	cmp	r3, r4
 8006384:	4607      	mov	r7, r0
 8006386:	f2c0 8081 	blt.w	800648c <quorem+0x112>
 800638a:	3c01      	subs	r4, #1
 800638c:	f101 0814 	add.w	r8, r1, #20
 8006390:	f100 0514 	add.w	r5, r0, #20
 8006394:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800639e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063a2:	3301      	adds	r3, #1
 80063a4:	429a      	cmp	r2, r3
 80063a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80063b2:	d331      	bcc.n	8006418 <quorem+0x9e>
 80063b4:	f04f 0e00 	mov.w	lr, #0
 80063b8:	4640      	mov	r0, r8
 80063ba:	46ac      	mov	ip, r5
 80063bc:	46f2      	mov	sl, lr
 80063be:	f850 2b04 	ldr.w	r2, [r0], #4
 80063c2:	b293      	uxth	r3, r2
 80063c4:	fb06 e303 	mla	r3, r6, r3, lr
 80063c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	ebaa 0303 	sub.w	r3, sl, r3
 80063d2:	0c12      	lsrs	r2, r2, #16
 80063d4:	f8dc a000 	ldr.w	sl, [ip]
 80063d8:	fb06 e202 	mla	r2, r6, r2, lr
 80063dc:	fa13 f38a 	uxtah	r3, r3, sl
 80063e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063e4:	fa1f fa82 	uxth.w	sl, r2
 80063e8:	f8dc 2000 	ldr.w	r2, [ip]
 80063ec:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fa:	4581      	cmp	r9, r0
 80063fc:	f84c 3b04 	str.w	r3, [ip], #4
 8006400:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006404:	d2db      	bcs.n	80063be <quorem+0x44>
 8006406:	f855 300b 	ldr.w	r3, [r5, fp]
 800640a:	b92b      	cbnz	r3, 8006418 <quorem+0x9e>
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	3b04      	subs	r3, #4
 8006410:	429d      	cmp	r5, r3
 8006412:	461a      	mov	r2, r3
 8006414:	d32e      	bcc.n	8006474 <quorem+0xfa>
 8006416:	613c      	str	r4, [r7, #16]
 8006418:	4638      	mov	r0, r7
 800641a:	f001 faf7 	bl	8007a0c <__mcmp>
 800641e:	2800      	cmp	r0, #0
 8006420:	db24      	blt.n	800646c <quorem+0xf2>
 8006422:	3601      	adds	r6, #1
 8006424:	4628      	mov	r0, r5
 8006426:	f04f 0c00 	mov.w	ip, #0
 800642a:	f858 2b04 	ldr.w	r2, [r8], #4
 800642e:	f8d0 e000 	ldr.w	lr, [r0]
 8006432:	b293      	uxth	r3, r2
 8006434:	ebac 0303 	sub.w	r3, ip, r3
 8006438:	0c12      	lsrs	r2, r2, #16
 800643a:	fa13 f38e 	uxtah	r3, r3, lr
 800643e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006442:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006446:	b29b      	uxth	r3, r3
 8006448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800644c:	45c1      	cmp	r9, r8
 800644e:	f840 3b04 	str.w	r3, [r0], #4
 8006452:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006456:	d2e8      	bcs.n	800642a <quorem+0xb0>
 8006458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800645c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006460:	b922      	cbnz	r2, 800646c <quorem+0xf2>
 8006462:	3b04      	subs	r3, #4
 8006464:	429d      	cmp	r5, r3
 8006466:	461a      	mov	r2, r3
 8006468:	d30a      	bcc.n	8006480 <quorem+0x106>
 800646a:	613c      	str	r4, [r7, #16]
 800646c:	4630      	mov	r0, r6
 800646e:	b003      	add	sp, #12
 8006470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	3b04      	subs	r3, #4
 8006478:	2a00      	cmp	r2, #0
 800647a:	d1cc      	bne.n	8006416 <quorem+0x9c>
 800647c:	3c01      	subs	r4, #1
 800647e:	e7c7      	b.n	8006410 <quorem+0x96>
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	3b04      	subs	r3, #4
 8006484:	2a00      	cmp	r2, #0
 8006486:	d1f0      	bne.n	800646a <quorem+0xf0>
 8006488:	3c01      	subs	r4, #1
 800648a:	e7eb      	b.n	8006464 <quorem+0xea>
 800648c:	2000      	movs	r0, #0
 800648e:	e7ee      	b.n	800646e <quorem+0xf4>

08006490 <_dtoa_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	ed2d 8b02 	vpush	{d8}
 8006498:	ec57 6b10 	vmov	r6, r7, d0
 800649c:	b095      	sub	sp, #84	; 0x54
 800649e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80064aa:	4604      	mov	r4, r0
 80064ac:	9209      	str	r2, [sp, #36]	; 0x24
 80064ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b0:	b975      	cbnz	r5, 80064d0 <_dtoa_r+0x40>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f000 fffc 	bl	80074b0 <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6260      	str	r0, [r4, #36]	; 0x24
 80064bc:	b920      	cbnz	r0, 80064c8 <_dtoa_r+0x38>
 80064be:	4bb2      	ldr	r3, [pc, #712]	; (8006788 <_dtoa_r+0x2f8>)
 80064c0:	21ea      	movs	r1, #234	; 0xea
 80064c2:	48b2      	ldr	r0, [pc, #712]	; (800678c <_dtoa_r+0x2fc>)
 80064c4:	f7ff f84c 	bl	8005560 <__assert_func>
 80064c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064cc:	6005      	str	r5, [r0, #0]
 80064ce:	60c5      	str	r5, [r0, #12]
 80064d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	b151      	cbz	r1, 80064ec <_dtoa_r+0x5c>
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	604a      	str	r2, [r1, #4]
 80064da:	2301      	movs	r3, #1
 80064dc:	4093      	lsls	r3, r2
 80064de:	608b      	str	r3, [r1, #8]
 80064e0:	4620      	mov	r0, r4
 80064e2:	f001 f855 	bl	8007590 <_Bfree>
 80064e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	1e3b      	subs	r3, r7, #0
 80064ee:	bfb9      	ittee	lt
 80064f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	9303      	strlt	r3, [sp, #12]
 80064f6:	2300      	movge	r3, #0
 80064f8:	f8c8 3000 	strge.w	r3, [r8]
 80064fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006500:	4ba3      	ldr	r3, [pc, #652]	; (8006790 <_dtoa_r+0x300>)
 8006502:	bfbc      	itt	lt
 8006504:	2201      	movlt	r2, #1
 8006506:	f8c8 2000 	strlt.w	r2, [r8]
 800650a:	ea33 0309 	bics.w	r3, r3, r9
 800650e:	d11b      	bne.n	8006548 <_dtoa_r+0xb8>
 8006510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006512:	f242 730f 	movw	r3, #9999	; 0x270f
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800651c:	4333      	orrs	r3, r6
 800651e:	f000 857a 	beq.w	8007016 <_dtoa_r+0xb86>
 8006522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006524:	b963      	cbnz	r3, 8006540 <_dtoa_r+0xb0>
 8006526:	4b9b      	ldr	r3, [pc, #620]	; (8006794 <_dtoa_r+0x304>)
 8006528:	e024      	b.n	8006574 <_dtoa_r+0xe4>
 800652a:	4b9b      	ldr	r3, [pc, #620]	; (8006798 <_dtoa_r+0x308>)
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	9800      	ldr	r0, [sp, #0]
 8006536:	b015      	add	sp, #84	; 0x54
 8006538:	ecbd 8b02 	vpop	{d8}
 800653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006540:	4b94      	ldr	r3, [pc, #592]	; (8006794 <_dtoa_r+0x304>)
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	3303      	adds	r3, #3
 8006546:	e7f3      	b.n	8006530 <_dtoa_r+0xa0>
 8006548:	ed9d 7b02 	vldr	d7, [sp, #8]
 800654c:	2200      	movs	r2, #0
 800654e:	ec51 0b17 	vmov	r0, r1, d7
 8006552:	2300      	movs	r3, #0
 8006554:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006558:	f7fa fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800655c:	4680      	mov	r8, r0
 800655e:	b158      	cbz	r0, 8006578 <_dtoa_r+0xe8>
 8006560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006562:	2301      	movs	r3, #1
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8551 	beq.w	8007010 <_dtoa_r+0xb80>
 800656e:	488b      	ldr	r0, [pc, #556]	; (800679c <_dtoa_r+0x30c>)
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	1e43      	subs	r3, r0, #1
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	e7dd      	b.n	8006534 <_dtoa_r+0xa4>
 8006578:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800657c:	aa12      	add	r2, sp, #72	; 0x48
 800657e:	a913      	add	r1, sp, #76	; 0x4c
 8006580:	4620      	mov	r0, r4
 8006582:	f001 fae7 	bl	8007b54 <__d2b>
 8006586:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800658a:	4683      	mov	fp, r0
 800658c:	2d00      	cmp	r5, #0
 800658e:	d07c      	beq.n	800668a <_dtoa_r+0x1fa>
 8006590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006592:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800659a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800659e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065aa:	4b7d      	ldr	r3, [pc, #500]	; (80067a0 <_dtoa_r+0x310>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fe69 	bl	8000288 <__aeabi_dsub>
 80065b6:	a36e      	add	r3, pc, #440	; (adr r3, 8006770 <_dtoa_r+0x2e0>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7fa f81c 	bl	80005f8 <__aeabi_dmul>
 80065c0:	a36d      	add	r3, pc, #436	; (adr r3, 8006778 <_dtoa_r+0x2e8>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 fe61 	bl	800028c <__adddf3>
 80065ca:	4606      	mov	r6, r0
 80065cc:	4628      	mov	r0, r5
 80065ce:	460f      	mov	r7, r1
 80065d0:	f7f9 ffa8 	bl	8000524 <__aeabi_i2d>
 80065d4:	a36a      	add	r3, pc, #424	; (adr r3, 8006780 <_dtoa_r+0x2f0>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7f9 fe51 	bl	800028c <__adddf3>
 80065ea:	4606      	mov	r6, r0
 80065ec:	460f      	mov	r7, r1
 80065ee:	f7fa fab3 	bl	8000b58 <__aeabi_d2iz>
 80065f2:	2200      	movs	r2, #0
 80065f4:	4682      	mov	sl, r0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fa6e 	bl	8000adc <__aeabi_dcmplt>
 8006600:	b148      	cbz	r0, 8006616 <_dtoa_r+0x186>
 8006602:	4650      	mov	r0, sl
 8006604:	f7f9 ff8e 	bl	8000524 <__aeabi_i2d>
 8006608:	4632      	mov	r2, r6
 800660a:	463b      	mov	r3, r7
 800660c:	f7fa fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006610:	b908      	cbnz	r0, 8006616 <_dtoa_r+0x186>
 8006612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006616:	f1ba 0f16 	cmp.w	sl, #22
 800661a:	d854      	bhi.n	80066c6 <_dtoa_r+0x236>
 800661c:	4b61      	ldr	r3, [pc, #388]	; (80067a4 <_dtoa_r+0x314>)
 800661e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800662a:	f7fa fa57 	bl	8000adc <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d04b      	beq.n	80066ca <_dtoa_r+0x23a>
 8006632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006636:	2300      	movs	r3, #0
 8006638:	930e      	str	r3, [sp, #56]	; 0x38
 800663a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800663c:	1b5d      	subs	r5, r3, r5
 800663e:	1e6b      	subs	r3, r5, #1
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	bf43      	ittte	mi
 8006644:	2300      	movmi	r3, #0
 8006646:	f1c5 0801 	rsbmi	r8, r5, #1
 800664a:	9304      	strmi	r3, [sp, #16]
 800664c:	f04f 0800 	movpl.w	r8, #0
 8006650:	f1ba 0f00 	cmp.w	sl, #0
 8006654:	db3b      	blt.n	80066ce <_dtoa_r+0x23e>
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800665c:	4453      	add	r3, sl
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	2300      	movs	r3, #0
 8006662:	9306      	str	r3, [sp, #24]
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	2b09      	cmp	r3, #9
 8006668:	d869      	bhi.n	800673e <_dtoa_r+0x2ae>
 800666a:	2b05      	cmp	r3, #5
 800666c:	bfc4      	itt	gt
 800666e:	3b04      	subgt	r3, #4
 8006670:	9305      	strgt	r3, [sp, #20]
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	f1a3 0302 	sub.w	r3, r3, #2
 8006678:	bfcc      	ite	gt
 800667a:	2500      	movgt	r5, #0
 800667c:	2501      	movle	r5, #1
 800667e:	2b03      	cmp	r3, #3
 8006680:	d869      	bhi.n	8006756 <_dtoa_r+0x2c6>
 8006682:	e8df f003 	tbb	[pc, r3]
 8006686:	4e2c      	.short	0x4e2c
 8006688:	5a4c      	.short	0x5a4c
 800668a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800668e:	441d      	add	r5, r3
 8006690:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006694:	2b20      	cmp	r3, #32
 8006696:	bfc1      	itttt	gt
 8006698:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800669c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80066a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066a8:	bfda      	itte	le
 80066aa:	f1c3 0320 	rsble	r3, r3, #32
 80066ae:	fa06 f003 	lslle.w	r0, r6, r3
 80066b2:	4318      	orrgt	r0, r3
 80066b4:	f7f9 ff26 	bl	8000504 <__aeabi_ui2d>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4606      	mov	r6, r0
 80066bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066c0:	3d01      	subs	r5, #1
 80066c2:	9310      	str	r3, [sp, #64]	; 0x40
 80066c4:	e771      	b.n	80065aa <_dtoa_r+0x11a>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e7b6      	b.n	8006638 <_dtoa_r+0x1a8>
 80066ca:	900e      	str	r0, [sp, #56]	; 0x38
 80066cc:	e7b5      	b.n	800663a <_dtoa_r+0x1aa>
 80066ce:	f1ca 0300 	rsb	r3, sl, #0
 80066d2:	9306      	str	r3, [sp, #24]
 80066d4:	2300      	movs	r3, #0
 80066d6:	eba8 080a 	sub.w	r8, r8, sl
 80066da:	930d      	str	r3, [sp, #52]	; 0x34
 80066dc:	e7c2      	b.n	8006664 <_dtoa_r+0x1d4>
 80066de:	2300      	movs	r3, #0
 80066e0:	9308      	str	r3, [sp, #32]
 80066e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dc39      	bgt.n	800675c <_dtoa_r+0x2cc>
 80066e8:	f04f 0901 	mov.w	r9, #1
 80066ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80066f0:	464b      	mov	r3, r9
 80066f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80066f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066f8:	2200      	movs	r2, #0
 80066fa:	6042      	str	r2, [r0, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	f102 0614 	add.w	r6, r2, #20
 8006702:	429e      	cmp	r6, r3
 8006704:	6841      	ldr	r1, [r0, #4]
 8006706:	d92f      	bls.n	8006768 <_dtoa_r+0x2d8>
 8006708:	4620      	mov	r0, r4
 800670a:	f000 ff01 	bl	8007510 <_Balloc>
 800670e:	9000      	str	r0, [sp, #0]
 8006710:	2800      	cmp	r0, #0
 8006712:	d14b      	bne.n	80067ac <_dtoa_r+0x31c>
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <_dtoa_r+0x318>)
 8006716:	4602      	mov	r2, r0
 8006718:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800671c:	e6d1      	b.n	80064c2 <_dtoa_r+0x32>
 800671e:	2301      	movs	r3, #1
 8006720:	e7de      	b.n	80066e0 <_dtoa_r+0x250>
 8006722:	2300      	movs	r3, #0
 8006724:	9308      	str	r3, [sp, #32]
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	eb0a 0903 	add.w	r9, sl, r3
 800672c:	f109 0301 	add.w	r3, r9, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	bfb8      	it	lt
 8006736:	2301      	movlt	r3, #1
 8006738:	e7dd      	b.n	80066f6 <_dtoa_r+0x266>
 800673a:	2301      	movs	r3, #1
 800673c:	e7f2      	b.n	8006724 <_dtoa_r+0x294>
 800673e:	2501      	movs	r5, #1
 8006740:	2300      	movs	r3, #0
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	9508      	str	r5, [sp, #32]
 8006746:	f04f 39ff 	mov.w	r9, #4294967295
 800674a:	2200      	movs	r2, #0
 800674c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006750:	2312      	movs	r3, #18
 8006752:	9209      	str	r2, [sp, #36]	; 0x24
 8006754:	e7cf      	b.n	80066f6 <_dtoa_r+0x266>
 8006756:	2301      	movs	r3, #1
 8006758:	9308      	str	r3, [sp, #32]
 800675a:	e7f4      	b.n	8006746 <_dtoa_r+0x2b6>
 800675c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006760:	f8cd 9004 	str.w	r9, [sp, #4]
 8006764:	464b      	mov	r3, r9
 8006766:	e7c6      	b.n	80066f6 <_dtoa_r+0x266>
 8006768:	3101      	adds	r1, #1
 800676a:	6041      	str	r1, [r0, #4]
 800676c:	0052      	lsls	r2, r2, #1
 800676e:	e7c6      	b.n	80066fe <_dtoa_r+0x26e>
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	08008766 	.word	0x08008766
 800678c:	0800877d 	.word	0x0800877d
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	08008762 	.word	0x08008762
 8006798:	08008759 	.word	0x08008759
 800679c:	08008736 	.word	0x08008736
 80067a0:	3ff80000 	.word	0x3ff80000
 80067a4:	080088d8 	.word	0x080088d8
 80067a8:	080087dc 	.word	0x080087dc
 80067ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ae:	9a00      	ldr	r2, [sp, #0]
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	2b0e      	cmp	r3, #14
 80067b6:	f200 80ad 	bhi.w	8006914 <_dtoa_r+0x484>
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	f000 80aa 	beq.w	8006914 <_dtoa_r+0x484>
 80067c0:	f1ba 0f00 	cmp.w	sl, #0
 80067c4:	dd36      	ble.n	8006834 <_dtoa_r+0x3a4>
 80067c6:	4ac3      	ldr	r2, [pc, #780]	; (8006ad4 <_dtoa_r+0x644>)
 80067c8:	f00a 030f 	and.w	r3, sl, #15
 80067cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067d0:	ed93 7b00 	vldr	d7, [r3]
 80067d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80067d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80067dc:	eeb0 8a47 	vmov.f32	s16, s14
 80067e0:	eef0 8a67 	vmov.f32	s17, s15
 80067e4:	d016      	beq.n	8006814 <_dtoa_r+0x384>
 80067e6:	4bbc      	ldr	r3, [pc, #752]	; (8006ad8 <_dtoa_r+0x648>)
 80067e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f0:	f7fa f82c 	bl	800084c <__aeabi_ddiv>
 80067f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f8:	f007 070f 	and.w	r7, r7, #15
 80067fc:	2503      	movs	r5, #3
 80067fe:	4eb6      	ldr	r6, [pc, #728]	; (8006ad8 <_dtoa_r+0x648>)
 8006800:	b957      	cbnz	r7, 8006818 <_dtoa_r+0x388>
 8006802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006806:	ec53 2b18 	vmov	r2, r3, d8
 800680a:	f7fa f81f 	bl	800084c <__aeabi_ddiv>
 800680e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006812:	e029      	b.n	8006868 <_dtoa_r+0x3d8>
 8006814:	2502      	movs	r5, #2
 8006816:	e7f2      	b.n	80067fe <_dtoa_r+0x36e>
 8006818:	07f9      	lsls	r1, r7, #31
 800681a:	d508      	bpl.n	800682e <_dtoa_r+0x39e>
 800681c:	ec51 0b18 	vmov	r0, r1, d8
 8006820:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006824:	f7f9 fee8 	bl	80005f8 <__aeabi_dmul>
 8006828:	ec41 0b18 	vmov	d8, r0, r1
 800682c:	3501      	adds	r5, #1
 800682e:	107f      	asrs	r7, r7, #1
 8006830:	3608      	adds	r6, #8
 8006832:	e7e5      	b.n	8006800 <_dtoa_r+0x370>
 8006834:	f000 80a6 	beq.w	8006984 <_dtoa_r+0x4f4>
 8006838:	f1ca 0600 	rsb	r6, sl, #0
 800683c:	4ba5      	ldr	r3, [pc, #660]	; (8006ad4 <_dtoa_r+0x644>)
 800683e:	4fa6      	ldr	r7, [pc, #664]	; (8006ad8 <_dtoa_r+0x648>)
 8006840:	f006 020f 	and.w	r2, r6, #15
 8006844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006850:	f7f9 fed2 	bl	80005f8 <__aeabi_dmul>
 8006854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006858:	1136      	asrs	r6, r6, #4
 800685a:	2300      	movs	r3, #0
 800685c:	2502      	movs	r5, #2
 800685e:	2e00      	cmp	r6, #0
 8006860:	f040 8085 	bne.w	800696e <_dtoa_r+0x4de>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1d2      	bne.n	800680e <_dtoa_r+0x37e>
 8006868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 808c 	beq.w	8006988 <_dtoa_r+0x4f8>
 8006870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006874:	4b99      	ldr	r3, [pc, #612]	; (8006adc <_dtoa_r+0x64c>)
 8006876:	2200      	movs	r2, #0
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7fa f92e 	bl	8000adc <__aeabi_dcmplt>
 8006880:	2800      	cmp	r0, #0
 8006882:	f000 8081 	beq.w	8006988 <_dtoa_r+0x4f8>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d07d      	beq.n	8006988 <_dtoa_r+0x4f8>
 800688c:	f1b9 0f00 	cmp.w	r9, #0
 8006890:	dd3c      	ble.n	800690c <_dtoa_r+0x47c>
 8006892:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006896:	9307      	str	r3, [sp, #28]
 8006898:	2200      	movs	r2, #0
 800689a:	4b91      	ldr	r3, [pc, #580]	; (8006ae0 <_dtoa_r+0x650>)
 800689c:	4630      	mov	r0, r6
 800689e:	4639      	mov	r1, r7
 80068a0:	f7f9 feaa 	bl	80005f8 <__aeabi_dmul>
 80068a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a8:	3501      	adds	r5, #1
 80068aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80068ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068b2:	4628      	mov	r0, r5
 80068b4:	f7f9 fe36 	bl	8000524 <__aeabi_i2d>
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	f7f9 fe9c 	bl	80005f8 <__aeabi_dmul>
 80068c0:	4b88      	ldr	r3, [pc, #544]	; (8006ae4 <_dtoa_r+0x654>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f7f9 fce2 	bl	800028c <__adddf3>
 80068c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d15c      	bne.n	8006992 <_dtoa_r+0x502>
 80068d8:	4b83      	ldr	r3, [pc, #524]	; (8006ae8 <_dtoa_r+0x658>)
 80068da:	2200      	movs	r2, #0
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7f9 fcd2 	bl	8000288 <__aeabi_dsub>
 80068e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	f7fa f914 	bl	8000b18 <__aeabi_dcmpgt>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f040 8296 	bne.w	8006e22 <_dtoa_r+0x992>
 80068f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80068fa:	4630      	mov	r0, r6
 80068fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006900:	4639      	mov	r1, r7
 8006902:	f7fa f8eb 	bl	8000adc <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f040 8288 	bne.w	8006e1c <_dtoa_r+0x98c>
 800690c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006916:	2b00      	cmp	r3, #0
 8006918:	f2c0 8158 	blt.w	8006bcc <_dtoa_r+0x73c>
 800691c:	f1ba 0f0e 	cmp.w	sl, #14
 8006920:	f300 8154 	bgt.w	8006bcc <_dtoa_r+0x73c>
 8006924:	4b6b      	ldr	r3, [pc, #428]	; (8006ad4 <_dtoa_r+0x644>)
 8006926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800692a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800692e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	f280 80e3 	bge.w	8006afc <_dtoa_r+0x66c>
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f300 80df 	bgt.w	8006afc <_dtoa_r+0x66c>
 800693e:	f040 826d 	bne.w	8006e1c <_dtoa_r+0x98c>
 8006942:	4b69      	ldr	r3, [pc, #420]	; (8006ae8 <_dtoa_r+0x658>)
 8006944:	2200      	movs	r2, #0
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f7f9 fe55 	bl	80005f8 <__aeabi_dmul>
 800694e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006952:	f7fa f8d7 	bl	8000b04 <__aeabi_dcmpge>
 8006956:	9e01      	ldr	r6, [sp, #4]
 8006958:	4637      	mov	r7, r6
 800695a:	2800      	cmp	r0, #0
 800695c:	f040 8243 	bne.w	8006de6 <_dtoa_r+0x956>
 8006960:	9d00      	ldr	r5, [sp, #0]
 8006962:	2331      	movs	r3, #49	; 0x31
 8006964:	f805 3b01 	strb.w	r3, [r5], #1
 8006968:	f10a 0a01 	add.w	sl, sl, #1
 800696c:	e23f      	b.n	8006dee <_dtoa_r+0x95e>
 800696e:	07f2      	lsls	r2, r6, #31
 8006970:	d505      	bpl.n	800697e <_dtoa_r+0x4ee>
 8006972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006976:	f7f9 fe3f 	bl	80005f8 <__aeabi_dmul>
 800697a:	3501      	adds	r5, #1
 800697c:	2301      	movs	r3, #1
 800697e:	1076      	asrs	r6, r6, #1
 8006980:	3708      	adds	r7, #8
 8006982:	e76c      	b.n	800685e <_dtoa_r+0x3ce>
 8006984:	2502      	movs	r5, #2
 8006986:	e76f      	b.n	8006868 <_dtoa_r+0x3d8>
 8006988:	9b01      	ldr	r3, [sp, #4]
 800698a:	f8cd a01c 	str.w	sl, [sp, #28]
 800698e:	930c      	str	r3, [sp, #48]	; 0x30
 8006990:	e78d      	b.n	80068ae <_dtoa_r+0x41e>
 8006992:	9900      	ldr	r1, [sp, #0]
 8006994:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006998:	4b4e      	ldr	r3, [pc, #312]	; (8006ad4 <_dtoa_r+0x644>)
 800699a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800699e:	4401      	add	r1, r0
 80069a0:	9102      	str	r1, [sp, #8]
 80069a2:	9908      	ldr	r1, [sp, #32]
 80069a4:	eeb0 8a47 	vmov.f32	s16, s14
 80069a8:	eef0 8a67 	vmov.f32	s17, s15
 80069ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d045      	beq.n	8006a44 <_dtoa_r+0x5b4>
 80069b8:	494c      	ldr	r1, [pc, #304]	; (8006aec <_dtoa_r+0x65c>)
 80069ba:	2000      	movs	r0, #0
 80069bc:	f7f9 ff46 	bl	800084c <__aeabi_ddiv>
 80069c0:	ec53 2b18 	vmov	r2, r3, d8
 80069c4:	f7f9 fc60 	bl	8000288 <__aeabi_dsub>
 80069c8:	9d00      	ldr	r5, [sp, #0]
 80069ca:	ec41 0b18 	vmov	d8, r0, r1
 80069ce:	4639      	mov	r1, r7
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7fa f8c1 	bl	8000b58 <__aeabi_d2iz>
 80069d6:	900c      	str	r0, [sp, #48]	; 0x30
 80069d8:	f7f9 fda4 	bl	8000524 <__aeabi_i2d>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4630      	mov	r0, r6
 80069e2:	4639      	mov	r1, r7
 80069e4:	f7f9 fc50 	bl	8000288 <__aeabi_dsub>
 80069e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ea:	3330      	adds	r3, #48	; 0x30
 80069ec:	f805 3b01 	strb.w	r3, [r5], #1
 80069f0:	ec53 2b18 	vmov	r2, r3, d8
 80069f4:	4606      	mov	r6, r0
 80069f6:	460f      	mov	r7, r1
 80069f8:	f7fa f870 	bl	8000adc <__aeabi_dcmplt>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d165      	bne.n	8006acc <_dtoa_r+0x63c>
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	4935      	ldr	r1, [pc, #212]	; (8006adc <_dtoa_r+0x64c>)
 8006a06:	2000      	movs	r0, #0
 8006a08:	f7f9 fc3e 	bl	8000288 <__aeabi_dsub>
 8006a0c:	ec53 2b18 	vmov	r2, r3, d8
 8006a10:	f7fa f864 	bl	8000adc <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	f040 80b9 	bne.w	8006b8c <_dtoa_r+0x6fc>
 8006a1a:	9b02      	ldr	r3, [sp, #8]
 8006a1c:	429d      	cmp	r5, r3
 8006a1e:	f43f af75 	beq.w	800690c <_dtoa_r+0x47c>
 8006a22:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <_dtoa_r+0x650>)
 8006a24:	ec51 0b18 	vmov	r0, r1, d8
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7f9 fde5 	bl	80005f8 <__aeabi_dmul>
 8006a2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ae0 <_dtoa_r+0x650>)
 8006a30:	ec41 0b18 	vmov	d8, r0, r1
 8006a34:	2200      	movs	r2, #0
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7f9 fddd 	bl	80005f8 <__aeabi_dmul>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	460f      	mov	r7, r1
 8006a42:	e7c4      	b.n	80069ce <_dtoa_r+0x53e>
 8006a44:	ec51 0b17 	vmov	r0, r1, d7
 8006a48:	f7f9 fdd6 	bl	80005f8 <__aeabi_dmul>
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	9d00      	ldr	r5, [sp, #0]
 8006a50:	930c      	str	r3, [sp, #48]	; 0x30
 8006a52:	ec41 0b18 	vmov	d8, r0, r1
 8006a56:	4639      	mov	r1, r7
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7fa f87d 	bl	8000b58 <__aeabi_d2iz>
 8006a5e:	9011      	str	r0, [sp, #68]	; 0x44
 8006a60:	f7f9 fd60 	bl	8000524 <__aeabi_i2d>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7f9 fc0c 	bl	8000288 <__aeabi_dsub>
 8006a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a72:	3330      	adds	r3, #48	; 0x30
 8006a74:	f805 3b01 	strb.w	r3, [r5], #1
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	429d      	cmp	r5, r3
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	d134      	bne.n	8006af0 <_dtoa_r+0x660>
 8006a86:	4b19      	ldr	r3, [pc, #100]	; (8006aec <_dtoa_r+0x65c>)
 8006a88:	ec51 0b18 	vmov	r0, r1, d8
 8006a8c:	f7f9 fbfe 	bl	800028c <__adddf3>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7fa f83e 	bl	8000b18 <__aeabi_dcmpgt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d175      	bne.n	8006b8c <_dtoa_r+0x6fc>
 8006aa0:	ec53 2b18 	vmov	r2, r3, d8
 8006aa4:	4911      	ldr	r1, [pc, #68]	; (8006aec <_dtoa_r+0x65c>)
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f7f9 fbee 	bl	8000288 <__aeabi_dsub>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7fa f812 	bl	8000adc <__aeabi_dcmplt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	f43f af27 	beq.w	800690c <_dtoa_r+0x47c>
 8006abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac0:	1e6b      	subs	r3, r5, #1
 8006ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ac8:	2b30      	cmp	r3, #48	; 0x30
 8006aca:	d0f8      	beq.n	8006abe <_dtoa_r+0x62e>
 8006acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ad0:	e04a      	b.n	8006b68 <_dtoa_r+0x6d8>
 8006ad2:	bf00      	nop
 8006ad4:	080088d8 	.word	0x080088d8
 8006ad8:	080088b0 	.word	0x080088b0
 8006adc:	3ff00000 	.word	0x3ff00000
 8006ae0:	40240000 	.word	0x40240000
 8006ae4:	401c0000 	.word	0x401c0000
 8006ae8:	40140000 	.word	0x40140000
 8006aec:	3fe00000 	.word	0x3fe00000
 8006af0:	4baf      	ldr	r3, [pc, #700]	; (8006db0 <_dtoa_r+0x920>)
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	4606      	mov	r6, r0
 8006af8:	460f      	mov	r7, r1
 8006afa:	e7ac      	b.n	8006a56 <_dtoa_r+0x5c6>
 8006afc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b00:	9d00      	ldr	r5, [sp, #0]
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	4630      	mov	r0, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	f7f9 fe9f 	bl	800084c <__aeabi_ddiv>
 8006b0e:	f7fa f823 	bl	8000b58 <__aeabi_d2iz>
 8006b12:	9002      	str	r0, [sp, #8]
 8006b14:	f7f9 fd06 	bl	8000524 <__aeabi_i2d>
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	f7f9 fd6c 	bl	80005f8 <__aeabi_dmul>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4630      	mov	r0, r6
 8006b26:	4639      	mov	r1, r7
 8006b28:	f7f9 fbae 	bl	8000288 <__aeabi_dsub>
 8006b2c:	9e02      	ldr	r6, [sp, #8]
 8006b2e:	9f01      	ldr	r7, [sp, #4]
 8006b30:	3630      	adds	r6, #48	; 0x30
 8006b32:	f805 6b01 	strb.w	r6, [r5], #1
 8006b36:	9e00      	ldr	r6, [sp, #0]
 8006b38:	1bae      	subs	r6, r5, r6
 8006b3a:	42b7      	cmp	r7, r6
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	d137      	bne.n	8006bb2 <_dtoa_r+0x722>
 8006b42:	f7f9 fba3 	bl	800028c <__adddf3>
 8006b46:	4642      	mov	r2, r8
 8006b48:	464b      	mov	r3, r9
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	f7f9 ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8006b52:	b9c8      	cbnz	r0, 8006b88 <_dtoa_r+0x6f8>
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b60:	b110      	cbz	r0, 8006b68 <_dtoa_r+0x6d8>
 8006b62:	9b02      	ldr	r3, [sp, #8]
 8006b64:	07d9      	lsls	r1, r3, #31
 8006b66:	d40f      	bmi.n	8006b88 <_dtoa_r+0x6f8>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	4659      	mov	r1, fp
 8006b6c:	f000 fd10 	bl	8007590 <_Bfree>
 8006b70:	2300      	movs	r3, #0
 8006b72:	702b      	strb	r3, [r5, #0]
 8006b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b76:	f10a 0001 	add.w	r0, sl, #1
 8006b7a:	6018      	str	r0, [r3, #0]
 8006b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f43f acd8 	beq.w	8006534 <_dtoa_r+0xa4>
 8006b84:	601d      	str	r5, [r3, #0]
 8006b86:	e4d5      	b.n	8006534 <_dtoa_r+0xa4>
 8006b88:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	461d      	mov	r5, r3
 8006b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b94:	2a39      	cmp	r2, #57	; 0x39
 8006b96:	d108      	bne.n	8006baa <_dtoa_r+0x71a>
 8006b98:	9a00      	ldr	r2, [sp, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d1f7      	bne.n	8006b8e <_dtoa_r+0x6fe>
 8006b9e:	9a07      	ldr	r2, [sp, #28]
 8006ba0:	9900      	ldr	r1, [sp, #0]
 8006ba2:	3201      	adds	r2, #1
 8006ba4:	9207      	str	r2, [sp, #28]
 8006ba6:	2230      	movs	r2, #48	; 0x30
 8006ba8:	700a      	strb	r2, [r1, #0]
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	3201      	adds	r2, #1
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e78c      	b.n	8006acc <_dtoa_r+0x63c>
 8006bb2:	4b7f      	ldr	r3, [pc, #508]	; (8006db0 <_dtoa_r+0x920>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f7f9 fd1f 	bl	80005f8 <__aeabi_dmul>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	f7f9 ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d09b      	beq.n	8006b02 <_dtoa_r+0x672>
 8006bca:	e7cd      	b.n	8006b68 <_dtoa_r+0x6d8>
 8006bcc:	9a08      	ldr	r2, [sp, #32]
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	f000 80c4 	beq.w	8006d5c <_dtoa_r+0x8cc>
 8006bd4:	9a05      	ldr	r2, [sp, #20]
 8006bd6:	2a01      	cmp	r2, #1
 8006bd8:	f300 80a8 	bgt.w	8006d2c <_dtoa_r+0x89c>
 8006bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bde:	2a00      	cmp	r2, #0
 8006be0:	f000 80a0 	beq.w	8006d24 <_dtoa_r+0x894>
 8006be4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006be8:	9e06      	ldr	r6, [sp, #24]
 8006bea:	4645      	mov	r5, r8
 8006bec:	9a04      	ldr	r2, [sp, #16]
 8006bee:	2101      	movs	r1, #1
 8006bf0:	441a      	add	r2, r3
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	4498      	add	r8, r3
 8006bf6:	9204      	str	r2, [sp, #16]
 8006bf8:	f000 fd86 	bl	8007708 <__i2b>
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	dd0b      	ble.n	8006c1a <_dtoa_r+0x78a>
 8006c02:	9b04      	ldr	r3, [sp, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd08      	ble.n	8006c1a <_dtoa_r+0x78a>
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	9a04      	ldr	r2, [sp, #16]
 8006c0c:	bfa8      	it	ge
 8006c0e:	462b      	movge	r3, r5
 8006c10:	eba8 0803 	sub.w	r8, r8, r3
 8006c14:	1aed      	subs	r5, r5, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	b1fb      	cbz	r3, 8006c5e <_dtoa_r+0x7ce>
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 809f 	beq.w	8006d64 <_dtoa_r+0x8d4>
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	dd11      	ble.n	8006c4e <_dtoa_r+0x7be>
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fe26 	bl	8007880 <__pow5mult>
 8006c34:	465a      	mov	r2, fp
 8006c36:	4601      	mov	r1, r0
 8006c38:	4607      	mov	r7, r0
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fd7a 	bl	8007734 <__multiply>
 8006c40:	4659      	mov	r1, fp
 8006c42:	9007      	str	r0, [sp, #28]
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fca3 	bl	8007590 <_Bfree>
 8006c4a:	9b07      	ldr	r3, [sp, #28]
 8006c4c:	469b      	mov	fp, r3
 8006c4e:	9b06      	ldr	r3, [sp, #24]
 8006c50:	1b9a      	subs	r2, r3, r6
 8006c52:	d004      	beq.n	8006c5e <_dtoa_r+0x7ce>
 8006c54:	4659      	mov	r1, fp
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fe12 	bl	8007880 <__pow5mult>
 8006c5c:	4683      	mov	fp, r0
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fd51 	bl	8007708 <__i2b>
 8006c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	dd7c      	ble.n	8006d68 <_dtoa_r+0x8d8>
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4601      	mov	r1, r0
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fe04 	bl	8007880 <__pow5mult>
 8006c78:	9b05      	ldr	r3, [sp, #20]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	dd76      	ble.n	8006d6e <_dtoa_r+0x8de>
 8006c80:	2300      	movs	r3, #0
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	6933      	ldr	r3, [r6, #16]
 8006c86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c8a:	6918      	ldr	r0, [r3, #16]
 8006c8c:	f000 fcec 	bl	8007668 <__hi0bits>
 8006c90:	f1c0 0020 	rsb	r0, r0, #32
 8006c94:	9b04      	ldr	r3, [sp, #16]
 8006c96:	4418      	add	r0, r3
 8006c98:	f010 001f 	ands.w	r0, r0, #31
 8006c9c:	f000 8086 	beq.w	8006dac <_dtoa_r+0x91c>
 8006ca0:	f1c0 0320 	rsb	r3, r0, #32
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	dd7f      	ble.n	8006da8 <_dtoa_r+0x918>
 8006ca8:	f1c0 001c 	rsb	r0, r0, #28
 8006cac:	9b04      	ldr	r3, [sp, #16]
 8006cae:	4403      	add	r3, r0
 8006cb0:	4480      	add	r8, r0
 8006cb2:	4405      	add	r5, r0
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	f1b8 0f00 	cmp.w	r8, #0
 8006cba:	dd05      	ble.n	8006cc8 <_dtoa_r+0x838>
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fe37 	bl	8007934 <__lshift>
 8006cc6:	4683      	mov	fp, r0
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dd05      	ble.n	8006cda <_dtoa_r+0x84a>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fe2e 	bl	8007934 <__lshift>
 8006cd8:	4606      	mov	r6, r0
 8006cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d069      	beq.n	8006db4 <_dtoa_r+0x924>
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4658      	mov	r0, fp
 8006ce4:	f000 fe92 	bl	8007a0c <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	da63      	bge.n	8006db4 <_dtoa_r+0x924>
 8006cec:	2300      	movs	r3, #0
 8006cee:	4659      	mov	r1, fp
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 fc6e 	bl	80075d4 <__multadd>
 8006cf8:	9b08      	ldr	r3, [sp, #32]
 8006cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cfe:	4683      	mov	fp, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 818f 	beq.w	8007024 <_dtoa_r+0xb94>
 8006d06:	4639      	mov	r1, r7
 8006d08:	2300      	movs	r3, #0
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fc61 	bl	80075d4 <__multadd>
 8006d12:	f1b9 0f00 	cmp.w	r9, #0
 8006d16:	4607      	mov	r7, r0
 8006d18:	f300 808e 	bgt.w	8006e38 <_dtoa_r+0x9a8>
 8006d1c:	9b05      	ldr	r3, [sp, #20]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc50      	bgt.n	8006dc4 <_dtoa_r+0x934>
 8006d22:	e089      	b.n	8006e38 <_dtoa_r+0x9a8>
 8006d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d2a:	e75d      	b.n	8006be8 <_dtoa_r+0x758>
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	1e5e      	subs	r6, r3, #1
 8006d30:	9b06      	ldr	r3, [sp, #24]
 8006d32:	42b3      	cmp	r3, r6
 8006d34:	bfbf      	itttt	lt
 8006d36:	9b06      	ldrlt	r3, [sp, #24]
 8006d38:	9606      	strlt	r6, [sp, #24]
 8006d3a:	1af2      	sublt	r2, r6, r3
 8006d3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006d3e:	bfb6      	itet	lt
 8006d40:	189b      	addlt	r3, r3, r2
 8006d42:	1b9e      	subge	r6, r3, r6
 8006d44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	bfb8      	it	lt
 8006d4a:	2600      	movlt	r6, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bfb5      	itete	lt
 8006d50:	eba8 0503 	sublt.w	r5, r8, r3
 8006d54:	9b01      	ldrge	r3, [sp, #4]
 8006d56:	2300      	movlt	r3, #0
 8006d58:	4645      	movge	r5, r8
 8006d5a:	e747      	b.n	8006bec <_dtoa_r+0x75c>
 8006d5c:	9e06      	ldr	r6, [sp, #24]
 8006d5e:	9f08      	ldr	r7, [sp, #32]
 8006d60:	4645      	mov	r5, r8
 8006d62:	e74c      	b.n	8006bfe <_dtoa_r+0x76e>
 8006d64:	9a06      	ldr	r2, [sp, #24]
 8006d66:	e775      	b.n	8006c54 <_dtoa_r+0x7c4>
 8006d68:	9b05      	ldr	r3, [sp, #20]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	dc18      	bgt.n	8006da0 <_dtoa_r+0x910>
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	b9b3      	cbnz	r3, 8006da0 <_dtoa_r+0x910>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d78:	b9a3      	cbnz	r3, 8006da4 <_dtoa_r+0x914>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	b12b      	cbz	r3, 8006d92 <_dtoa_r+0x902>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	f108 0801 	add.w	r8, r8, #1
 8006d90:	2301      	movs	r3, #1
 8006d92:	9306      	str	r3, [sp, #24]
 8006d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f47f af74 	bne.w	8006c84 <_dtoa_r+0x7f4>
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	e779      	b.n	8006c94 <_dtoa_r+0x804>
 8006da0:	2300      	movs	r3, #0
 8006da2:	e7f6      	b.n	8006d92 <_dtoa_r+0x902>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	e7f4      	b.n	8006d92 <_dtoa_r+0x902>
 8006da8:	d085      	beq.n	8006cb6 <_dtoa_r+0x826>
 8006daa:	4618      	mov	r0, r3
 8006dac:	301c      	adds	r0, #28
 8006dae:	e77d      	b.n	8006cac <_dtoa_r+0x81c>
 8006db0:	40240000 	.word	0x40240000
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dc38      	bgt.n	8006e2c <_dtoa_r+0x99c>
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	dd35      	ble.n	8006e2c <_dtoa_r+0x99c>
 8006dc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006dc4:	f1b9 0f00 	cmp.w	r9, #0
 8006dc8:	d10d      	bne.n	8006de6 <_dtoa_r+0x956>
 8006dca:	4631      	mov	r1, r6
 8006dcc:	464b      	mov	r3, r9
 8006dce:	2205      	movs	r2, #5
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fbff 	bl	80075d4 <__multadd>
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	4606      	mov	r6, r0
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fe16 	bl	8007a0c <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f73f adbd 	bgt.w	8006960 <_dtoa_r+0x4d0>
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	9d00      	ldr	r5, [sp, #0]
 8006dea:	ea6f 0a03 	mvn.w	sl, r3
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	4631      	mov	r1, r6
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fbcb 	bl	8007590 <_Bfree>
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	f43f aeb4 	beq.w	8006b68 <_dtoa_r+0x6d8>
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d005      	beq.n	8006e12 <_dtoa_r+0x982>
 8006e06:	45b8      	cmp	r8, r7
 8006e08:	d003      	beq.n	8006e12 <_dtoa_r+0x982>
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fbbf 	bl	8007590 <_Bfree>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fbbb 	bl	8007590 <_Bfree>
 8006e1a:	e6a5      	b.n	8006b68 <_dtoa_r+0x6d8>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	4637      	mov	r7, r6
 8006e20:	e7e1      	b.n	8006de6 <_dtoa_r+0x956>
 8006e22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006e24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e28:	4637      	mov	r7, r6
 8006e2a:	e599      	b.n	8006960 <_dtoa_r+0x4d0>
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 80fd 	beq.w	8007032 <_dtoa_r+0xba2>
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	dd05      	ble.n	8006e48 <_dtoa_r+0x9b8>
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fd77 	bl	8007934 <__lshift>
 8006e46:	4607      	mov	r7, r0
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d05c      	beq.n	8006f08 <_dtoa_r+0xa78>
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fb5d 	bl	8007510 <_Balloc>
 8006e56:	4605      	mov	r5, r0
 8006e58:	b928      	cbnz	r0, 8006e66 <_dtoa_r+0x9d6>
 8006e5a:	4b80      	ldr	r3, [pc, #512]	; (800705c <_dtoa_r+0xbcc>)
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e62:	f7ff bb2e 	b.w	80064c2 <_dtoa_r+0x32>
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	3202      	adds	r2, #2
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	f107 010c 	add.w	r1, r7, #12
 8006e70:	300c      	adds	r0, #12
 8006e72:	f000 fb25 	bl	80074c0 <memcpy>
 8006e76:	2201      	movs	r2, #1
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fd5a 	bl	8007934 <__lshift>
 8006e80:	9b00      	ldr	r3, [sp, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	444b      	add	r3, r9
 8006e8a:	9307      	str	r3, [sp, #28]
 8006e8c:	9b02      	ldr	r3, [sp, #8]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	46b8      	mov	r8, r7
 8006e94:	9306      	str	r3, [sp, #24]
 8006e96:	4607      	mov	r7, r0
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	f7ff fa6a 	bl	800637a <quorem>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	3330      	adds	r3, #48	; 0x30
 8006eaa:	9004      	str	r0, [sp, #16]
 8006eac:	4641      	mov	r1, r8
 8006eae:	4658      	mov	r0, fp
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	f000 fdab 	bl	8007a0c <__mcmp>
 8006eb6:	463a      	mov	r2, r7
 8006eb8:	4681      	mov	r9, r0
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fdc1 	bl	8007a44 <__mdiff>
 8006ec2:	68c2      	ldr	r2, [r0, #12]
 8006ec4:	9b08      	ldr	r3, [sp, #32]
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	bb02      	cbnz	r2, 8006f0c <_dtoa_r+0xa7c>
 8006eca:	4601      	mov	r1, r0
 8006ecc:	4658      	mov	r0, fp
 8006ece:	f000 fd9d 	bl	8007a0c <__mcmp>
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4620      	mov	r0, r4
 8006eda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006ede:	f000 fb57 	bl	8007590 <_Bfree>
 8006ee2:	9b05      	ldr	r3, [sp, #20]
 8006ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee6:	9d01      	ldr	r5, [sp, #4]
 8006ee8:	ea43 0102 	orr.w	r1, r3, r2
 8006eec:	9b06      	ldr	r3, [sp, #24]
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	d10d      	bne.n	8006f10 <_dtoa_r+0xa80>
 8006ef4:	2b39      	cmp	r3, #57	; 0x39
 8006ef6:	d029      	beq.n	8006f4c <_dtoa_r+0xabc>
 8006ef8:	f1b9 0f00 	cmp.w	r9, #0
 8006efc:	dd01      	ble.n	8006f02 <_dtoa_r+0xa72>
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	3331      	adds	r3, #49	; 0x31
 8006f02:	9a02      	ldr	r2, [sp, #8]
 8006f04:	7013      	strb	r3, [r2, #0]
 8006f06:	e774      	b.n	8006df2 <_dtoa_r+0x962>
 8006f08:	4638      	mov	r0, r7
 8006f0a:	e7b9      	b.n	8006e80 <_dtoa_r+0x9f0>
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	e7e2      	b.n	8006ed6 <_dtoa_r+0xa46>
 8006f10:	f1b9 0f00 	cmp.w	r9, #0
 8006f14:	db06      	blt.n	8006f24 <_dtoa_r+0xa94>
 8006f16:	9905      	ldr	r1, [sp, #20]
 8006f18:	ea41 0909 	orr.w	r9, r1, r9
 8006f1c:	9906      	ldr	r1, [sp, #24]
 8006f1e:	ea59 0101 	orrs.w	r1, r9, r1
 8006f22:	d120      	bne.n	8006f66 <_dtoa_r+0xad6>
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	ddec      	ble.n	8006f02 <_dtoa_r+0xa72>
 8006f28:	4659      	mov	r1, fp
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	f000 fd00 	bl	8007934 <__lshift>
 8006f34:	4631      	mov	r1, r6
 8006f36:	4683      	mov	fp, r0
 8006f38:	f000 fd68 	bl	8007a0c <__mcmp>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	dc02      	bgt.n	8006f48 <_dtoa_r+0xab8>
 8006f42:	d1de      	bne.n	8006f02 <_dtoa_r+0xa72>
 8006f44:	07da      	lsls	r2, r3, #31
 8006f46:	d5dc      	bpl.n	8006f02 <_dtoa_r+0xa72>
 8006f48:	2b39      	cmp	r3, #57	; 0x39
 8006f4a:	d1d8      	bne.n	8006efe <_dtoa_r+0xa6e>
 8006f4c:	9a02      	ldr	r2, [sp, #8]
 8006f4e:	2339      	movs	r3, #57	; 0x39
 8006f50:	7013      	strb	r3, [r2, #0]
 8006f52:	462b      	mov	r3, r5
 8006f54:	461d      	mov	r5, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f5c:	2a39      	cmp	r2, #57	; 0x39
 8006f5e:	d050      	beq.n	8007002 <_dtoa_r+0xb72>
 8006f60:	3201      	adds	r2, #1
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e745      	b.n	8006df2 <_dtoa_r+0x962>
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	dd03      	ble.n	8006f72 <_dtoa_r+0xae2>
 8006f6a:	2b39      	cmp	r3, #57	; 0x39
 8006f6c:	d0ee      	beq.n	8006f4c <_dtoa_r+0xabc>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	e7c7      	b.n	8006f02 <_dtoa_r+0xa72>
 8006f72:	9a01      	ldr	r2, [sp, #4]
 8006f74:	9907      	ldr	r1, [sp, #28]
 8006f76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f7a:	428a      	cmp	r2, r1
 8006f7c:	d02a      	beq.n	8006fd4 <_dtoa_r+0xb44>
 8006f7e:	4659      	mov	r1, fp
 8006f80:	2300      	movs	r3, #0
 8006f82:	220a      	movs	r2, #10
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fb25 	bl	80075d4 <__multadd>
 8006f8a:	45b8      	cmp	r8, r7
 8006f8c:	4683      	mov	fp, r0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	f04f 020a 	mov.w	r2, #10
 8006f96:	4641      	mov	r1, r8
 8006f98:	4620      	mov	r0, r4
 8006f9a:	d107      	bne.n	8006fac <_dtoa_r+0xb1c>
 8006f9c:	f000 fb1a 	bl	80075d4 <__multadd>
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	4607      	mov	r7, r0
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	e775      	b.n	8006e98 <_dtoa_r+0xa08>
 8006fac:	f000 fb12 	bl	80075d4 <__multadd>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	220a      	movs	r2, #10
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fb0b 	bl	80075d4 <__multadd>
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	e7f0      	b.n	8006fa4 <_dtoa_r+0xb14>
 8006fc2:	f1b9 0f00 	cmp.w	r9, #0
 8006fc6:	9a00      	ldr	r2, [sp, #0]
 8006fc8:	bfcc      	ite	gt
 8006fca:	464d      	movgt	r5, r9
 8006fcc:	2501      	movle	r5, #1
 8006fce:	4415      	add	r5, r2
 8006fd0:	f04f 0800 	mov.w	r8, #0
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4620      	mov	r0, r4
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	f000 fcaa 	bl	8007934 <__lshift>
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4683      	mov	fp, r0
 8006fe4:	f000 fd12 	bl	8007a0c <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dcb2      	bgt.n	8006f52 <_dtoa_r+0xac2>
 8006fec:	d102      	bne.n	8006ff4 <_dtoa_r+0xb64>
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	07db      	lsls	r3, r3, #31
 8006ff2:	d4ae      	bmi.n	8006f52 <_dtoa_r+0xac2>
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	461d      	mov	r5, r3
 8006ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffc:	2a30      	cmp	r2, #48	; 0x30
 8006ffe:	d0fa      	beq.n	8006ff6 <_dtoa_r+0xb66>
 8007000:	e6f7      	b.n	8006df2 <_dtoa_r+0x962>
 8007002:	9a00      	ldr	r2, [sp, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1a5      	bne.n	8006f54 <_dtoa_r+0xac4>
 8007008:	f10a 0a01 	add.w	sl, sl, #1
 800700c:	2331      	movs	r3, #49	; 0x31
 800700e:	e779      	b.n	8006f04 <_dtoa_r+0xa74>
 8007010:	4b13      	ldr	r3, [pc, #76]	; (8007060 <_dtoa_r+0xbd0>)
 8007012:	f7ff baaf 	b.w	8006574 <_dtoa_r+0xe4>
 8007016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007018:	2b00      	cmp	r3, #0
 800701a:	f47f aa86 	bne.w	800652a <_dtoa_r+0x9a>
 800701e:	4b11      	ldr	r3, [pc, #68]	; (8007064 <_dtoa_r+0xbd4>)
 8007020:	f7ff baa8 	b.w	8006574 <_dtoa_r+0xe4>
 8007024:	f1b9 0f00 	cmp.w	r9, #0
 8007028:	dc03      	bgt.n	8007032 <_dtoa_r+0xba2>
 800702a:	9b05      	ldr	r3, [sp, #20]
 800702c:	2b02      	cmp	r3, #2
 800702e:	f73f aec9 	bgt.w	8006dc4 <_dtoa_r+0x934>
 8007032:	9d00      	ldr	r5, [sp, #0]
 8007034:	4631      	mov	r1, r6
 8007036:	4658      	mov	r0, fp
 8007038:	f7ff f99f 	bl	800637a <quorem>
 800703c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007040:	f805 3b01 	strb.w	r3, [r5], #1
 8007044:	9a00      	ldr	r2, [sp, #0]
 8007046:	1aaa      	subs	r2, r5, r2
 8007048:	4591      	cmp	r9, r2
 800704a:	ddba      	ble.n	8006fc2 <_dtoa_r+0xb32>
 800704c:	4659      	mov	r1, fp
 800704e:	2300      	movs	r3, #0
 8007050:	220a      	movs	r2, #10
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fabe 	bl	80075d4 <__multadd>
 8007058:	4683      	mov	fp, r0
 800705a:	e7eb      	b.n	8007034 <_dtoa_r+0xba4>
 800705c:	080087dc 	.word	0x080087dc
 8007060:	08008735 	.word	0x08008735
 8007064:	08008759 	.word	0x08008759

08007068 <__sflush_r>:
 8007068:	898a      	ldrh	r2, [r1, #12]
 800706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	4605      	mov	r5, r0
 8007070:	0710      	lsls	r0, r2, #28
 8007072:	460c      	mov	r4, r1
 8007074:	d458      	bmi.n	8007128 <__sflush_r+0xc0>
 8007076:	684b      	ldr	r3, [r1, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dc05      	bgt.n	8007088 <__sflush_r+0x20>
 800707c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	dc02      	bgt.n	8007088 <__sflush_r+0x20>
 8007082:	2000      	movs	r0, #0
 8007084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800708a:	2e00      	cmp	r6, #0
 800708c:	d0f9      	beq.n	8007082 <__sflush_r+0x1a>
 800708e:	2300      	movs	r3, #0
 8007090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007094:	682f      	ldr	r7, [r5, #0]
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	d032      	beq.n	8007100 <__sflush_r+0x98>
 800709a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	075a      	lsls	r2, r3, #29
 80070a0:	d505      	bpl.n	80070ae <__sflush_r+0x46>
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	1ac0      	subs	r0, r0, r3
 80070a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070a8:	b10b      	cbz	r3, 80070ae <__sflush_r+0x46>
 80070aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070ac:	1ac0      	subs	r0, r0, r3
 80070ae:	2300      	movs	r3, #0
 80070b0:	4602      	mov	r2, r0
 80070b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b4:	6a21      	ldr	r1, [r4, #32]
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b0      	blx	r6
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	d106      	bne.n	80070ce <__sflush_r+0x66>
 80070c0:	6829      	ldr	r1, [r5, #0]
 80070c2:	291d      	cmp	r1, #29
 80070c4:	d82c      	bhi.n	8007120 <__sflush_r+0xb8>
 80070c6:	4a2a      	ldr	r2, [pc, #168]	; (8007170 <__sflush_r+0x108>)
 80070c8:	40ca      	lsrs	r2, r1
 80070ca:	07d6      	lsls	r6, r2, #31
 80070cc:	d528      	bpl.n	8007120 <__sflush_r+0xb8>
 80070ce:	2200      	movs	r2, #0
 80070d0:	6062      	str	r2, [r4, #4]
 80070d2:	04d9      	lsls	r1, r3, #19
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	6022      	str	r2, [r4, #0]
 80070d8:	d504      	bpl.n	80070e4 <__sflush_r+0x7c>
 80070da:	1c42      	adds	r2, r0, #1
 80070dc:	d101      	bne.n	80070e2 <__sflush_r+0x7a>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	b903      	cbnz	r3, 80070e4 <__sflush_r+0x7c>
 80070e2:	6560      	str	r0, [r4, #84]	; 0x54
 80070e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e6:	602f      	str	r7, [r5, #0]
 80070e8:	2900      	cmp	r1, #0
 80070ea:	d0ca      	beq.n	8007082 <__sflush_r+0x1a>
 80070ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <__sflush_r+0x92>
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 fd99 	bl	8007c2c <_free_r>
 80070fa:	2000      	movs	r0, #0
 80070fc:	6360      	str	r0, [r4, #52]	; 0x34
 80070fe:	e7c1      	b.n	8007084 <__sflush_r+0x1c>
 8007100:	6a21      	ldr	r1, [r4, #32]
 8007102:	2301      	movs	r3, #1
 8007104:	4628      	mov	r0, r5
 8007106:	47b0      	blx	r6
 8007108:	1c41      	adds	r1, r0, #1
 800710a:	d1c7      	bne.n	800709c <__sflush_r+0x34>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0c4      	beq.n	800709c <__sflush_r+0x34>
 8007112:	2b1d      	cmp	r3, #29
 8007114:	d001      	beq.n	800711a <__sflush_r+0xb2>
 8007116:	2b16      	cmp	r3, #22
 8007118:	d101      	bne.n	800711e <__sflush_r+0xb6>
 800711a:	602f      	str	r7, [r5, #0]
 800711c:	e7b1      	b.n	8007082 <__sflush_r+0x1a>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	e7ad      	b.n	8007084 <__sflush_r+0x1c>
 8007128:	690f      	ldr	r7, [r1, #16]
 800712a:	2f00      	cmp	r7, #0
 800712c:	d0a9      	beq.n	8007082 <__sflush_r+0x1a>
 800712e:	0793      	lsls	r3, r2, #30
 8007130:	680e      	ldr	r6, [r1, #0]
 8007132:	bf08      	it	eq
 8007134:	694b      	ldreq	r3, [r1, #20]
 8007136:	600f      	str	r7, [r1, #0]
 8007138:	bf18      	it	ne
 800713a:	2300      	movne	r3, #0
 800713c:	eba6 0807 	sub.w	r8, r6, r7
 8007140:	608b      	str	r3, [r1, #8]
 8007142:	f1b8 0f00 	cmp.w	r8, #0
 8007146:	dd9c      	ble.n	8007082 <__sflush_r+0x1a>
 8007148:	6a21      	ldr	r1, [r4, #32]
 800714a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800714c:	4643      	mov	r3, r8
 800714e:	463a      	mov	r2, r7
 8007150:	4628      	mov	r0, r5
 8007152:	47b0      	blx	r6
 8007154:	2800      	cmp	r0, #0
 8007156:	dc06      	bgt.n	8007166 <__sflush_r+0xfe>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	e78e      	b.n	8007084 <__sflush_r+0x1c>
 8007166:	4407      	add	r7, r0
 8007168:	eba8 0800 	sub.w	r8, r8, r0
 800716c:	e7e9      	b.n	8007142 <__sflush_r+0xda>
 800716e:	bf00      	nop
 8007170:	20400001 	.word	0x20400001

08007174 <_fflush_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	690b      	ldr	r3, [r1, #16]
 8007178:	4605      	mov	r5, r0
 800717a:	460c      	mov	r4, r1
 800717c:	b913      	cbnz	r3, 8007184 <_fflush_r+0x10>
 800717e:	2500      	movs	r5, #0
 8007180:	4628      	mov	r0, r5
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	b118      	cbz	r0, 800718e <_fflush_r+0x1a>
 8007186:	6983      	ldr	r3, [r0, #24]
 8007188:	b90b      	cbnz	r3, 800718e <_fflush_r+0x1a>
 800718a:	f000 f887 	bl	800729c <__sinit>
 800718e:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <_fflush_r+0x6c>)
 8007190:	429c      	cmp	r4, r3
 8007192:	d11b      	bne.n	80071cc <_fflush_r+0x58>
 8007194:	686c      	ldr	r4, [r5, #4]
 8007196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0ef      	beq.n	800717e <_fflush_r+0xa>
 800719e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071a0:	07d0      	lsls	r0, r2, #31
 80071a2:	d404      	bmi.n	80071ae <_fflush_r+0x3a>
 80071a4:	0599      	lsls	r1, r3, #22
 80071a6:	d402      	bmi.n	80071ae <_fflush_r+0x3a>
 80071a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071aa:	f000 f91a 	bl	80073e2 <__retarget_lock_acquire_recursive>
 80071ae:	4628      	mov	r0, r5
 80071b0:	4621      	mov	r1, r4
 80071b2:	f7ff ff59 	bl	8007068 <__sflush_r>
 80071b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b8:	07da      	lsls	r2, r3, #31
 80071ba:	4605      	mov	r5, r0
 80071bc:	d4e0      	bmi.n	8007180 <_fflush_r+0xc>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	059b      	lsls	r3, r3, #22
 80071c2:	d4dd      	bmi.n	8007180 <_fflush_r+0xc>
 80071c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071c6:	f000 f90d 	bl	80073e4 <__retarget_lock_release_recursive>
 80071ca:	e7d9      	b.n	8007180 <_fflush_r+0xc>
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <_fflush_r+0x70>)
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d101      	bne.n	80071d6 <_fflush_r+0x62>
 80071d2:	68ac      	ldr	r4, [r5, #8]
 80071d4:	e7df      	b.n	8007196 <_fflush_r+0x22>
 80071d6:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <_fflush_r+0x74>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	bf08      	it	eq
 80071dc:	68ec      	ldreq	r4, [r5, #12]
 80071de:	e7da      	b.n	8007196 <_fflush_r+0x22>
 80071e0:	08008810 	.word	0x08008810
 80071e4:	08008830 	.word	0x08008830
 80071e8:	080087f0 	.word	0x080087f0

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f7fe fa03 	bl	8005614 <memset>
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <std+0x38>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x3c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <std+0x40>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <std+0x44>)
 800721c:	6224      	str	r4, [r4, #32]
 800721e:	6323      	str	r3, [r4, #48]	; 0x30
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	0800812d 	.word	0x0800812d
 8007228:	0800814f 	.word	0x0800814f
 800722c:	08008187 	.word	0x08008187
 8007230:	080081ab 	.word	0x080081ab

08007234 <_cleanup_r>:
 8007234:	4901      	ldr	r1, [pc, #4]	; (800723c <_cleanup_r+0x8>)
 8007236:	f000 b8af 	b.w	8007398 <_fwalk_reent>
 800723a:	bf00      	nop
 800723c:	08007175 	.word	0x08007175

08007240 <__sfmoreglue>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	1e4a      	subs	r2, r1, #1
 8007244:	2568      	movs	r5, #104	; 0x68
 8007246:	4355      	muls	r5, r2
 8007248:	460e      	mov	r6, r1
 800724a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800724e:	f000 fd3d 	bl	8007ccc <_malloc_r>
 8007252:	4604      	mov	r4, r0
 8007254:	b140      	cbz	r0, 8007268 <__sfmoreglue+0x28>
 8007256:	2100      	movs	r1, #0
 8007258:	e9c0 1600 	strd	r1, r6, [r0]
 800725c:	300c      	adds	r0, #12
 800725e:	60a0      	str	r0, [r4, #8]
 8007260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007264:	f7fe f9d6 	bl	8005614 <memset>
 8007268:	4620      	mov	r0, r4
 800726a:	bd70      	pop	{r4, r5, r6, pc}

0800726c <__sfp_lock_acquire>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__sfp_lock_acquire+0x8>)
 800726e:	f000 b8b8 	b.w	80073e2 <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	200003ec 	.word	0x200003ec

08007278 <__sfp_lock_release>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__sfp_lock_release+0x8>)
 800727a:	f000 b8b3 	b.w	80073e4 <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	200003ec 	.word	0x200003ec

08007284 <__sinit_lock_acquire>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__sinit_lock_acquire+0x8>)
 8007286:	f000 b8ac 	b.w	80073e2 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	200003e7 	.word	0x200003e7

08007290 <__sinit_lock_release>:
 8007290:	4801      	ldr	r0, [pc, #4]	; (8007298 <__sinit_lock_release+0x8>)
 8007292:	f000 b8a7 	b.w	80073e4 <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	200003e7 	.word	0x200003e7

0800729c <__sinit>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	f7ff fff0 	bl	8007284 <__sinit_lock_acquire>
 80072a4:	69a3      	ldr	r3, [r4, #24]
 80072a6:	b11b      	cbz	r3, 80072b0 <__sinit+0x14>
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f7ff bff0 	b.w	8007290 <__sinit_lock_release>
 80072b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072b4:	6523      	str	r3, [r4, #80]	; 0x50
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <__sinit+0x68>)
 80072b8:	4a13      	ldr	r2, [pc, #76]	; (8007308 <__sinit+0x6c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80072be:	42a3      	cmp	r3, r4
 80072c0:	bf04      	itt	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	61a3      	streq	r3, [r4, #24]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f820 	bl	800730c <__sfp>
 80072cc:	6060      	str	r0, [r4, #4]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f81c 	bl	800730c <__sfp>
 80072d4:	60a0      	str	r0, [r4, #8]
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f818 	bl	800730c <__sfp>
 80072dc:	2200      	movs	r2, #0
 80072de:	60e0      	str	r0, [r4, #12]
 80072e0:	2104      	movs	r1, #4
 80072e2:	6860      	ldr	r0, [r4, #4]
 80072e4:	f7ff ff82 	bl	80071ec <std>
 80072e8:	68a0      	ldr	r0, [r4, #8]
 80072ea:	2201      	movs	r2, #1
 80072ec:	2109      	movs	r1, #9
 80072ee:	f7ff ff7d 	bl	80071ec <std>
 80072f2:	68e0      	ldr	r0, [r4, #12]
 80072f4:	2202      	movs	r2, #2
 80072f6:	2112      	movs	r1, #18
 80072f8:	f7ff ff78 	bl	80071ec <std>
 80072fc:	2301      	movs	r3, #1
 80072fe:	61a3      	str	r3, [r4, #24]
 8007300:	e7d2      	b.n	80072a8 <__sinit+0xc>
 8007302:	bf00      	nop
 8007304:	08008710 	.word	0x08008710
 8007308:	08007235 	.word	0x08007235

0800730c <__sfp>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	4607      	mov	r7, r0
 8007310:	f7ff ffac 	bl	800726c <__sfp_lock_acquire>
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <__sfp+0x84>)
 8007316:	681e      	ldr	r6, [r3, #0]
 8007318:	69b3      	ldr	r3, [r6, #24]
 800731a:	b913      	cbnz	r3, 8007322 <__sfp+0x16>
 800731c:	4630      	mov	r0, r6
 800731e:	f7ff ffbd 	bl	800729c <__sinit>
 8007322:	3648      	adds	r6, #72	; 0x48
 8007324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007328:	3b01      	subs	r3, #1
 800732a:	d503      	bpl.n	8007334 <__sfp+0x28>
 800732c:	6833      	ldr	r3, [r6, #0]
 800732e:	b30b      	cbz	r3, 8007374 <__sfp+0x68>
 8007330:	6836      	ldr	r6, [r6, #0]
 8007332:	e7f7      	b.n	8007324 <__sfp+0x18>
 8007334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007338:	b9d5      	cbnz	r5, 8007370 <__sfp+0x64>
 800733a:	4b16      	ldr	r3, [pc, #88]	; (8007394 <__sfp+0x88>)
 800733c:	60e3      	str	r3, [r4, #12]
 800733e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007342:	6665      	str	r5, [r4, #100]	; 0x64
 8007344:	f000 f84c 	bl	80073e0 <__retarget_lock_init_recursive>
 8007348:	f7ff ff96 	bl	8007278 <__sfp_lock_release>
 800734c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007354:	6025      	str	r5, [r4, #0]
 8007356:	61a5      	str	r5, [r4, #24]
 8007358:	2208      	movs	r2, #8
 800735a:	4629      	mov	r1, r5
 800735c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007360:	f7fe f958 	bl	8005614 <memset>
 8007364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800736c:	4620      	mov	r0, r4
 800736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007370:	3468      	adds	r4, #104	; 0x68
 8007372:	e7d9      	b.n	8007328 <__sfp+0x1c>
 8007374:	2104      	movs	r1, #4
 8007376:	4638      	mov	r0, r7
 8007378:	f7ff ff62 	bl	8007240 <__sfmoreglue>
 800737c:	4604      	mov	r4, r0
 800737e:	6030      	str	r0, [r6, #0]
 8007380:	2800      	cmp	r0, #0
 8007382:	d1d5      	bne.n	8007330 <__sfp+0x24>
 8007384:	f7ff ff78 	bl	8007278 <__sfp_lock_release>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	e7ee      	b.n	800736c <__sfp+0x60>
 800738e:	bf00      	nop
 8007390:	08008710 	.word	0x08008710
 8007394:	ffff0001 	.word	0xffff0001

08007398 <_fwalk_reent>:
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	4606      	mov	r6, r0
 800739e:	4688      	mov	r8, r1
 80073a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073a4:	2700      	movs	r7, #0
 80073a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073aa:	f1b9 0901 	subs.w	r9, r9, #1
 80073ae:	d505      	bpl.n	80073bc <_fwalk_reent+0x24>
 80073b0:	6824      	ldr	r4, [r4, #0]
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	d1f7      	bne.n	80073a6 <_fwalk_reent+0xe>
 80073b6:	4638      	mov	r0, r7
 80073b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073bc:	89ab      	ldrh	r3, [r5, #12]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d907      	bls.n	80073d2 <_fwalk_reent+0x3a>
 80073c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c6:	3301      	adds	r3, #1
 80073c8:	d003      	beq.n	80073d2 <_fwalk_reent+0x3a>
 80073ca:	4629      	mov	r1, r5
 80073cc:	4630      	mov	r0, r6
 80073ce:	47c0      	blx	r8
 80073d0:	4307      	orrs	r7, r0
 80073d2:	3568      	adds	r5, #104	; 0x68
 80073d4:	e7e9      	b.n	80073aa <_fwalk_reent+0x12>
	...

080073d8 <_localeconv_r>:
 80073d8:	4800      	ldr	r0, [pc, #0]	; (80073dc <_localeconv_r+0x4>)
 80073da:	4770      	bx	lr
 80073dc:	2000016c 	.word	0x2000016c

080073e0 <__retarget_lock_init_recursive>:
 80073e0:	4770      	bx	lr

080073e2 <__retarget_lock_acquire_recursive>:
 80073e2:	4770      	bx	lr

080073e4 <__retarget_lock_release_recursive>:
 80073e4:	4770      	bx	lr

080073e6 <__swhatbuf_r>:
 80073e6:	b570      	push	{r4, r5, r6, lr}
 80073e8:	460e      	mov	r6, r1
 80073ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ee:	2900      	cmp	r1, #0
 80073f0:	b096      	sub	sp, #88	; 0x58
 80073f2:	4614      	mov	r4, r2
 80073f4:	461d      	mov	r5, r3
 80073f6:	da07      	bge.n	8007408 <__swhatbuf_r+0x22>
 80073f8:	2300      	movs	r3, #0
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	89b3      	ldrh	r3, [r6, #12]
 80073fe:	061a      	lsls	r2, r3, #24
 8007400:	d410      	bmi.n	8007424 <__swhatbuf_r+0x3e>
 8007402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007406:	e00e      	b.n	8007426 <__swhatbuf_r+0x40>
 8007408:	466a      	mov	r2, sp
 800740a:	f000 fef5 	bl	80081f8 <_fstat_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	dbf2      	blt.n	80073f8 <__swhatbuf_r+0x12>
 8007412:	9a01      	ldr	r2, [sp, #4]
 8007414:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007418:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800741c:	425a      	negs	r2, r3
 800741e:	415a      	adcs	r2, r3
 8007420:	602a      	str	r2, [r5, #0]
 8007422:	e7ee      	b.n	8007402 <__swhatbuf_r+0x1c>
 8007424:	2340      	movs	r3, #64	; 0x40
 8007426:	2000      	movs	r0, #0
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	b016      	add	sp, #88	; 0x58
 800742c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007430 <__smakebuf_r>:
 8007430:	898b      	ldrh	r3, [r1, #12]
 8007432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007434:	079d      	lsls	r5, r3, #30
 8007436:	4606      	mov	r6, r0
 8007438:	460c      	mov	r4, r1
 800743a:	d507      	bpl.n	800744c <__smakebuf_r+0x1c>
 800743c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	6123      	str	r3, [r4, #16]
 8007444:	2301      	movs	r3, #1
 8007446:	6163      	str	r3, [r4, #20]
 8007448:	b002      	add	sp, #8
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	ab01      	add	r3, sp, #4
 800744e:	466a      	mov	r2, sp
 8007450:	f7ff ffc9 	bl	80073e6 <__swhatbuf_r>
 8007454:	9900      	ldr	r1, [sp, #0]
 8007456:	4605      	mov	r5, r0
 8007458:	4630      	mov	r0, r6
 800745a:	f000 fc37 	bl	8007ccc <_malloc_r>
 800745e:	b948      	cbnz	r0, 8007474 <__smakebuf_r+0x44>
 8007460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007464:	059a      	lsls	r2, r3, #22
 8007466:	d4ef      	bmi.n	8007448 <__smakebuf_r+0x18>
 8007468:	f023 0303 	bic.w	r3, r3, #3
 800746c:	f043 0302 	orr.w	r3, r3, #2
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	e7e3      	b.n	800743c <__smakebuf_r+0xc>
 8007474:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <__smakebuf_r+0x7c>)
 8007476:	62b3      	str	r3, [r6, #40]	; 0x28
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	6020      	str	r0, [r4, #0]
 800747c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	9b00      	ldr	r3, [sp, #0]
 8007484:	6163      	str	r3, [r4, #20]
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	6120      	str	r0, [r4, #16]
 800748a:	b15b      	cbz	r3, 80074a4 <__smakebuf_r+0x74>
 800748c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007490:	4630      	mov	r0, r6
 8007492:	f000 fec3 	bl	800821c <_isatty_r>
 8007496:	b128      	cbz	r0, 80074a4 <__smakebuf_r+0x74>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	89a0      	ldrh	r0, [r4, #12]
 80074a6:	4305      	orrs	r5, r0
 80074a8:	81a5      	strh	r5, [r4, #12]
 80074aa:	e7cd      	b.n	8007448 <__smakebuf_r+0x18>
 80074ac:	08007235 	.word	0x08007235

080074b0 <malloc>:
 80074b0:	4b02      	ldr	r3, [pc, #8]	; (80074bc <malloc+0xc>)
 80074b2:	4601      	mov	r1, r0
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f000 bc09 	b.w	8007ccc <_malloc_r>
 80074ba:	bf00      	nop
 80074bc:	20000018 	.word	0x20000018

080074c0 <memcpy>:
 80074c0:	440a      	add	r2, r1
 80074c2:	4291      	cmp	r1, r2
 80074c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80074c8:	d100      	bne.n	80074cc <memcpy+0xc>
 80074ca:	4770      	bx	lr
 80074cc:	b510      	push	{r4, lr}
 80074ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d6:	4291      	cmp	r1, r2
 80074d8:	d1f9      	bne.n	80074ce <memcpy+0xe>
 80074da:	bd10      	pop	{r4, pc}

080074dc <memmove>:
 80074dc:	4288      	cmp	r0, r1
 80074de:	b510      	push	{r4, lr}
 80074e0:	eb01 0402 	add.w	r4, r1, r2
 80074e4:	d902      	bls.n	80074ec <memmove+0x10>
 80074e6:	4284      	cmp	r4, r0
 80074e8:	4623      	mov	r3, r4
 80074ea:	d807      	bhi.n	80074fc <memmove+0x20>
 80074ec:	1e43      	subs	r3, r0, #1
 80074ee:	42a1      	cmp	r1, r4
 80074f0:	d008      	beq.n	8007504 <memmove+0x28>
 80074f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074fa:	e7f8      	b.n	80074ee <memmove+0x12>
 80074fc:	4402      	add	r2, r0
 80074fe:	4601      	mov	r1, r0
 8007500:	428a      	cmp	r2, r1
 8007502:	d100      	bne.n	8007506 <memmove+0x2a>
 8007504:	bd10      	pop	{r4, pc}
 8007506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800750a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800750e:	e7f7      	b.n	8007500 <memmove+0x24>

08007510 <_Balloc>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007514:	4604      	mov	r4, r0
 8007516:	460d      	mov	r5, r1
 8007518:	b976      	cbnz	r6, 8007538 <_Balloc+0x28>
 800751a:	2010      	movs	r0, #16
 800751c:	f7ff ffc8 	bl	80074b0 <malloc>
 8007520:	4602      	mov	r2, r0
 8007522:	6260      	str	r0, [r4, #36]	; 0x24
 8007524:	b920      	cbnz	r0, 8007530 <_Balloc+0x20>
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <_Balloc+0x78>)
 8007528:	4818      	ldr	r0, [pc, #96]	; (800758c <_Balloc+0x7c>)
 800752a:	2166      	movs	r1, #102	; 0x66
 800752c:	f7fe f818 	bl	8005560 <__assert_func>
 8007530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007534:	6006      	str	r6, [r0, #0]
 8007536:	60c6      	str	r6, [r0, #12]
 8007538:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800753a:	68f3      	ldr	r3, [r6, #12]
 800753c:	b183      	cbz	r3, 8007560 <_Balloc+0x50>
 800753e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007546:	b9b8      	cbnz	r0, 8007578 <_Balloc+0x68>
 8007548:	2101      	movs	r1, #1
 800754a:	fa01 f605 	lsl.w	r6, r1, r5
 800754e:	1d72      	adds	r2, r6, #5
 8007550:	0092      	lsls	r2, r2, #2
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fb5a 	bl	8007c0c <_calloc_r>
 8007558:	b160      	cbz	r0, 8007574 <_Balloc+0x64>
 800755a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800755e:	e00e      	b.n	800757e <_Balloc+0x6e>
 8007560:	2221      	movs	r2, #33	; 0x21
 8007562:	2104      	movs	r1, #4
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fb51 	bl	8007c0c <_calloc_r>
 800756a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756c:	60f0      	str	r0, [r6, #12]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e4      	bne.n	800753e <_Balloc+0x2e>
 8007574:	2000      	movs	r0, #0
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	6802      	ldr	r2, [r0, #0]
 800757a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800757e:	2300      	movs	r3, #0
 8007580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007584:	e7f7      	b.n	8007576 <_Balloc+0x66>
 8007586:	bf00      	nop
 8007588:	08008766 	.word	0x08008766
 800758c:	08008850 	.word	0x08008850

08007590 <_Bfree>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007594:	4605      	mov	r5, r0
 8007596:	460c      	mov	r4, r1
 8007598:	b976      	cbnz	r6, 80075b8 <_Bfree+0x28>
 800759a:	2010      	movs	r0, #16
 800759c:	f7ff ff88 	bl	80074b0 <malloc>
 80075a0:	4602      	mov	r2, r0
 80075a2:	6268      	str	r0, [r5, #36]	; 0x24
 80075a4:	b920      	cbnz	r0, 80075b0 <_Bfree+0x20>
 80075a6:	4b09      	ldr	r3, [pc, #36]	; (80075cc <_Bfree+0x3c>)
 80075a8:	4809      	ldr	r0, [pc, #36]	; (80075d0 <_Bfree+0x40>)
 80075aa:	218a      	movs	r1, #138	; 0x8a
 80075ac:	f7fd ffd8 	bl	8005560 <__assert_func>
 80075b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075b4:	6006      	str	r6, [r0, #0]
 80075b6:	60c6      	str	r6, [r0, #12]
 80075b8:	b13c      	cbz	r4, 80075ca <_Bfree+0x3a>
 80075ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075bc:	6862      	ldr	r2, [r4, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075c4:	6021      	str	r1, [r4, #0]
 80075c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	08008766 	.word	0x08008766
 80075d0:	08008850 	.word	0x08008850

080075d4 <__multadd>:
 80075d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d8:	690e      	ldr	r6, [r1, #16]
 80075da:	4607      	mov	r7, r0
 80075dc:	4698      	mov	r8, r3
 80075de:	460c      	mov	r4, r1
 80075e0:	f101 0014 	add.w	r0, r1, #20
 80075e4:	2300      	movs	r3, #0
 80075e6:	6805      	ldr	r5, [r0, #0]
 80075e8:	b2a9      	uxth	r1, r5
 80075ea:	fb02 8101 	mla	r1, r2, r1, r8
 80075ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075f2:	0c2d      	lsrs	r5, r5, #16
 80075f4:	fb02 c505 	mla	r5, r2, r5, ip
 80075f8:	b289      	uxth	r1, r1
 80075fa:	3301      	adds	r3, #1
 80075fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007600:	429e      	cmp	r6, r3
 8007602:	f840 1b04 	str.w	r1, [r0], #4
 8007606:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800760a:	dcec      	bgt.n	80075e6 <__multadd+0x12>
 800760c:	f1b8 0f00 	cmp.w	r8, #0
 8007610:	d022      	beq.n	8007658 <__multadd+0x84>
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	42b3      	cmp	r3, r6
 8007616:	dc19      	bgt.n	800764c <__multadd+0x78>
 8007618:	6861      	ldr	r1, [r4, #4]
 800761a:	4638      	mov	r0, r7
 800761c:	3101      	adds	r1, #1
 800761e:	f7ff ff77 	bl	8007510 <_Balloc>
 8007622:	4605      	mov	r5, r0
 8007624:	b928      	cbnz	r0, 8007632 <__multadd+0x5e>
 8007626:	4602      	mov	r2, r0
 8007628:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <__multadd+0x8c>)
 800762a:	480e      	ldr	r0, [pc, #56]	; (8007664 <__multadd+0x90>)
 800762c:	21b5      	movs	r1, #181	; 0xb5
 800762e:	f7fd ff97 	bl	8005560 <__assert_func>
 8007632:	6922      	ldr	r2, [r4, #16]
 8007634:	3202      	adds	r2, #2
 8007636:	f104 010c 	add.w	r1, r4, #12
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	300c      	adds	r0, #12
 800763e:	f7ff ff3f 	bl	80074c0 <memcpy>
 8007642:	4621      	mov	r1, r4
 8007644:	4638      	mov	r0, r7
 8007646:	f7ff ffa3 	bl	8007590 <_Bfree>
 800764a:	462c      	mov	r4, r5
 800764c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007650:	3601      	adds	r6, #1
 8007652:	f8c3 8014 	str.w	r8, [r3, #20]
 8007656:	6126      	str	r6, [r4, #16]
 8007658:	4620      	mov	r0, r4
 800765a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765e:	bf00      	nop
 8007660:	080087dc 	.word	0x080087dc
 8007664:	08008850 	.word	0x08008850

08007668 <__hi0bits>:
 8007668:	0c03      	lsrs	r3, r0, #16
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	b9d3      	cbnz	r3, 80076a4 <__hi0bits+0x3c>
 800766e:	0400      	lsls	r0, r0, #16
 8007670:	2310      	movs	r3, #16
 8007672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007676:	bf04      	itt	eq
 8007678:	0200      	lsleq	r0, r0, #8
 800767a:	3308      	addeq	r3, #8
 800767c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007680:	bf04      	itt	eq
 8007682:	0100      	lsleq	r0, r0, #4
 8007684:	3304      	addeq	r3, #4
 8007686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800768a:	bf04      	itt	eq
 800768c:	0080      	lsleq	r0, r0, #2
 800768e:	3302      	addeq	r3, #2
 8007690:	2800      	cmp	r0, #0
 8007692:	db05      	blt.n	80076a0 <__hi0bits+0x38>
 8007694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007698:	f103 0301 	add.w	r3, r3, #1
 800769c:	bf08      	it	eq
 800769e:	2320      	moveq	r3, #32
 80076a0:	4618      	mov	r0, r3
 80076a2:	4770      	bx	lr
 80076a4:	2300      	movs	r3, #0
 80076a6:	e7e4      	b.n	8007672 <__hi0bits+0xa>

080076a8 <__lo0bits>:
 80076a8:	6803      	ldr	r3, [r0, #0]
 80076aa:	f013 0207 	ands.w	r2, r3, #7
 80076ae:	4601      	mov	r1, r0
 80076b0:	d00b      	beq.n	80076ca <__lo0bits+0x22>
 80076b2:	07da      	lsls	r2, r3, #31
 80076b4:	d424      	bmi.n	8007700 <__lo0bits+0x58>
 80076b6:	0798      	lsls	r0, r3, #30
 80076b8:	bf49      	itett	mi
 80076ba:	085b      	lsrmi	r3, r3, #1
 80076bc:	089b      	lsrpl	r3, r3, #2
 80076be:	2001      	movmi	r0, #1
 80076c0:	600b      	strmi	r3, [r1, #0]
 80076c2:	bf5c      	itt	pl
 80076c4:	600b      	strpl	r3, [r1, #0]
 80076c6:	2002      	movpl	r0, #2
 80076c8:	4770      	bx	lr
 80076ca:	b298      	uxth	r0, r3
 80076cc:	b9b0      	cbnz	r0, 80076fc <__lo0bits+0x54>
 80076ce:	0c1b      	lsrs	r3, r3, #16
 80076d0:	2010      	movs	r0, #16
 80076d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076d6:	bf04      	itt	eq
 80076d8:	0a1b      	lsreq	r3, r3, #8
 80076da:	3008      	addeq	r0, #8
 80076dc:	071a      	lsls	r2, r3, #28
 80076de:	bf04      	itt	eq
 80076e0:	091b      	lsreq	r3, r3, #4
 80076e2:	3004      	addeq	r0, #4
 80076e4:	079a      	lsls	r2, r3, #30
 80076e6:	bf04      	itt	eq
 80076e8:	089b      	lsreq	r3, r3, #2
 80076ea:	3002      	addeq	r0, #2
 80076ec:	07da      	lsls	r2, r3, #31
 80076ee:	d403      	bmi.n	80076f8 <__lo0bits+0x50>
 80076f0:	085b      	lsrs	r3, r3, #1
 80076f2:	f100 0001 	add.w	r0, r0, #1
 80076f6:	d005      	beq.n	8007704 <__lo0bits+0x5c>
 80076f8:	600b      	str	r3, [r1, #0]
 80076fa:	4770      	bx	lr
 80076fc:	4610      	mov	r0, r2
 80076fe:	e7e8      	b.n	80076d2 <__lo0bits+0x2a>
 8007700:	2000      	movs	r0, #0
 8007702:	4770      	bx	lr
 8007704:	2020      	movs	r0, #32
 8007706:	4770      	bx	lr

08007708 <__i2b>:
 8007708:	b510      	push	{r4, lr}
 800770a:	460c      	mov	r4, r1
 800770c:	2101      	movs	r1, #1
 800770e:	f7ff feff 	bl	8007510 <_Balloc>
 8007712:	4602      	mov	r2, r0
 8007714:	b928      	cbnz	r0, 8007722 <__i2b+0x1a>
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <__i2b+0x24>)
 8007718:	4805      	ldr	r0, [pc, #20]	; (8007730 <__i2b+0x28>)
 800771a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800771e:	f7fd ff1f 	bl	8005560 <__assert_func>
 8007722:	2301      	movs	r3, #1
 8007724:	6144      	str	r4, [r0, #20]
 8007726:	6103      	str	r3, [r0, #16]
 8007728:	bd10      	pop	{r4, pc}
 800772a:	bf00      	nop
 800772c:	080087dc 	.word	0x080087dc
 8007730:	08008850 	.word	0x08008850

08007734 <__multiply>:
 8007734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	4614      	mov	r4, r2
 800773a:	690a      	ldr	r2, [r1, #16]
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	429a      	cmp	r2, r3
 8007740:	bfb8      	it	lt
 8007742:	460b      	movlt	r3, r1
 8007744:	460d      	mov	r5, r1
 8007746:	bfbc      	itt	lt
 8007748:	4625      	movlt	r5, r4
 800774a:	461c      	movlt	r4, r3
 800774c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007750:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007754:	68ab      	ldr	r3, [r5, #8]
 8007756:	6869      	ldr	r1, [r5, #4]
 8007758:	eb0a 0709 	add.w	r7, sl, r9
 800775c:	42bb      	cmp	r3, r7
 800775e:	b085      	sub	sp, #20
 8007760:	bfb8      	it	lt
 8007762:	3101      	addlt	r1, #1
 8007764:	f7ff fed4 	bl	8007510 <_Balloc>
 8007768:	b930      	cbnz	r0, 8007778 <__multiply+0x44>
 800776a:	4602      	mov	r2, r0
 800776c:	4b42      	ldr	r3, [pc, #264]	; (8007878 <__multiply+0x144>)
 800776e:	4843      	ldr	r0, [pc, #268]	; (800787c <__multiply+0x148>)
 8007770:	f240 115d 	movw	r1, #349	; 0x15d
 8007774:	f7fd fef4 	bl	8005560 <__assert_func>
 8007778:	f100 0614 	add.w	r6, r0, #20
 800777c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007780:	4633      	mov	r3, r6
 8007782:	2200      	movs	r2, #0
 8007784:	4543      	cmp	r3, r8
 8007786:	d31e      	bcc.n	80077c6 <__multiply+0x92>
 8007788:	f105 0c14 	add.w	ip, r5, #20
 800778c:	f104 0314 	add.w	r3, r4, #20
 8007790:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007794:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007798:	9202      	str	r2, [sp, #8]
 800779a:	ebac 0205 	sub.w	r2, ip, r5
 800779e:	3a15      	subs	r2, #21
 80077a0:	f022 0203 	bic.w	r2, r2, #3
 80077a4:	3204      	adds	r2, #4
 80077a6:	f105 0115 	add.w	r1, r5, #21
 80077aa:	458c      	cmp	ip, r1
 80077ac:	bf38      	it	cc
 80077ae:	2204      	movcc	r2, #4
 80077b0:	9201      	str	r2, [sp, #4]
 80077b2:	9a02      	ldr	r2, [sp, #8]
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d808      	bhi.n	80077cc <__multiply+0x98>
 80077ba:	2f00      	cmp	r7, #0
 80077bc:	dc55      	bgt.n	800786a <__multiply+0x136>
 80077be:	6107      	str	r7, [r0, #16]
 80077c0:	b005      	add	sp, #20
 80077c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c6:	f843 2b04 	str.w	r2, [r3], #4
 80077ca:	e7db      	b.n	8007784 <__multiply+0x50>
 80077cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80077d0:	f1ba 0f00 	cmp.w	sl, #0
 80077d4:	d020      	beq.n	8007818 <__multiply+0xe4>
 80077d6:	f105 0e14 	add.w	lr, r5, #20
 80077da:	46b1      	mov	r9, r6
 80077dc:	2200      	movs	r2, #0
 80077de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80077e2:	f8d9 b000 	ldr.w	fp, [r9]
 80077e6:	b2a1      	uxth	r1, r4
 80077e8:	fa1f fb8b 	uxth.w	fp, fp
 80077ec:	fb0a b101 	mla	r1, sl, r1, fp
 80077f0:	4411      	add	r1, r2
 80077f2:	f8d9 2000 	ldr.w	r2, [r9]
 80077f6:	0c24      	lsrs	r4, r4, #16
 80077f8:	0c12      	lsrs	r2, r2, #16
 80077fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80077fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007802:	b289      	uxth	r1, r1
 8007804:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007808:	45f4      	cmp	ip, lr
 800780a:	f849 1b04 	str.w	r1, [r9], #4
 800780e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007812:	d8e4      	bhi.n	80077de <__multiply+0xaa>
 8007814:	9901      	ldr	r1, [sp, #4]
 8007816:	5072      	str	r2, [r6, r1]
 8007818:	9a03      	ldr	r2, [sp, #12]
 800781a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800781e:	3304      	adds	r3, #4
 8007820:	f1b9 0f00 	cmp.w	r9, #0
 8007824:	d01f      	beq.n	8007866 <__multiply+0x132>
 8007826:	6834      	ldr	r4, [r6, #0]
 8007828:	f105 0114 	add.w	r1, r5, #20
 800782c:	46b6      	mov	lr, r6
 800782e:	f04f 0a00 	mov.w	sl, #0
 8007832:	880a      	ldrh	r2, [r1, #0]
 8007834:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007838:	fb09 b202 	mla	r2, r9, r2, fp
 800783c:	4492      	add	sl, r2
 800783e:	b2a4      	uxth	r4, r4
 8007840:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007844:	f84e 4b04 	str.w	r4, [lr], #4
 8007848:	f851 4b04 	ldr.w	r4, [r1], #4
 800784c:	f8be 2000 	ldrh.w	r2, [lr]
 8007850:	0c24      	lsrs	r4, r4, #16
 8007852:	fb09 2404 	mla	r4, r9, r4, r2
 8007856:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800785a:	458c      	cmp	ip, r1
 800785c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007860:	d8e7      	bhi.n	8007832 <__multiply+0xfe>
 8007862:	9a01      	ldr	r2, [sp, #4]
 8007864:	50b4      	str	r4, [r6, r2]
 8007866:	3604      	adds	r6, #4
 8007868:	e7a3      	b.n	80077b2 <__multiply+0x7e>
 800786a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1a5      	bne.n	80077be <__multiply+0x8a>
 8007872:	3f01      	subs	r7, #1
 8007874:	e7a1      	b.n	80077ba <__multiply+0x86>
 8007876:	bf00      	nop
 8007878:	080087dc 	.word	0x080087dc
 800787c:	08008850 	.word	0x08008850

08007880 <__pow5mult>:
 8007880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007884:	4615      	mov	r5, r2
 8007886:	f012 0203 	ands.w	r2, r2, #3
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	d007      	beq.n	80078a0 <__pow5mult+0x20>
 8007890:	4c25      	ldr	r4, [pc, #148]	; (8007928 <__pow5mult+0xa8>)
 8007892:	3a01      	subs	r2, #1
 8007894:	2300      	movs	r3, #0
 8007896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800789a:	f7ff fe9b 	bl	80075d4 <__multadd>
 800789e:	4607      	mov	r7, r0
 80078a0:	10ad      	asrs	r5, r5, #2
 80078a2:	d03d      	beq.n	8007920 <__pow5mult+0xa0>
 80078a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078a6:	b97c      	cbnz	r4, 80078c8 <__pow5mult+0x48>
 80078a8:	2010      	movs	r0, #16
 80078aa:	f7ff fe01 	bl	80074b0 <malloc>
 80078ae:	4602      	mov	r2, r0
 80078b0:	6270      	str	r0, [r6, #36]	; 0x24
 80078b2:	b928      	cbnz	r0, 80078c0 <__pow5mult+0x40>
 80078b4:	4b1d      	ldr	r3, [pc, #116]	; (800792c <__pow5mult+0xac>)
 80078b6:	481e      	ldr	r0, [pc, #120]	; (8007930 <__pow5mult+0xb0>)
 80078b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078bc:	f7fd fe50 	bl	8005560 <__assert_func>
 80078c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078c4:	6004      	str	r4, [r0, #0]
 80078c6:	60c4      	str	r4, [r0, #12]
 80078c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078d0:	b94c      	cbnz	r4, 80078e6 <__pow5mult+0x66>
 80078d2:	f240 2171 	movw	r1, #625	; 0x271
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff ff16 	bl	8007708 <__i2b>
 80078dc:	2300      	movs	r3, #0
 80078de:	f8c8 0008 	str.w	r0, [r8, #8]
 80078e2:	4604      	mov	r4, r0
 80078e4:	6003      	str	r3, [r0, #0]
 80078e6:	f04f 0900 	mov.w	r9, #0
 80078ea:	07eb      	lsls	r3, r5, #31
 80078ec:	d50a      	bpl.n	8007904 <__pow5mult+0x84>
 80078ee:	4639      	mov	r1, r7
 80078f0:	4622      	mov	r2, r4
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff ff1e 	bl	8007734 <__multiply>
 80078f8:	4639      	mov	r1, r7
 80078fa:	4680      	mov	r8, r0
 80078fc:	4630      	mov	r0, r6
 80078fe:	f7ff fe47 	bl	8007590 <_Bfree>
 8007902:	4647      	mov	r7, r8
 8007904:	106d      	asrs	r5, r5, #1
 8007906:	d00b      	beq.n	8007920 <__pow5mult+0xa0>
 8007908:	6820      	ldr	r0, [r4, #0]
 800790a:	b938      	cbnz	r0, 800791c <__pow5mult+0x9c>
 800790c:	4622      	mov	r2, r4
 800790e:	4621      	mov	r1, r4
 8007910:	4630      	mov	r0, r6
 8007912:	f7ff ff0f 	bl	8007734 <__multiply>
 8007916:	6020      	str	r0, [r4, #0]
 8007918:	f8c0 9000 	str.w	r9, [r0]
 800791c:	4604      	mov	r4, r0
 800791e:	e7e4      	b.n	80078ea <__pow5mult+0x6a>
 8007920:	4638      	mov	r0, r7
 8007922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007926:	bf00      	nop
 8007928:	080089a0 	.word	0x080089a0
 800792c:	08008766 	.word	0x08008766
 8007930:	08008850 	.word	0x08008850

08007934 <__lshift>:
 8007934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	460c      	mov	r4, r1
 800793a:	6849      	ldr	r1, [r1, #4]
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007942:	68a3      	ldr	r3, [r4, #8]
 8007944:	4607      	mov	r7, r0
 8007946:	4691      	mov	r9, r2
 8007948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800794c:	f108 0601 	add.w	r6, r8, #1
 8007950:	42b3      	cmp	r3, r6
 8007952:	db0b      	blt.n	800796c <__lshift+0x38>
 8007954:	4638      	mov	r0, r7
 8007956:	f7ff fddb 	bl	8007510 <_Balloc>
 800795a:	4605      	mov	r5, r0
 800795c:	b948      	cbnz	r0, 8007972 <__lshift+0x3e>
 800795e:	4602      	mov	r2, r0
 8007960:	4b28      	ldr	r3, [pc, #160]	; (8007a04 <__lshift+0xd0>)
 8007962:	4829      	ldr	r0, [pc, #164]	; (8007a08 <__lshift+0xd4>)
 8007964:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007968:	f7fd fdfa 	bl	8005560 <__assert_func>
 800796c:	3101      	adds	r1, #1
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	e7ee      	b.n	8007950 <__lshift+0x1c>
 8007972:	2300      	movs	r3, #0
 8007974:	f100 0114 	add.w	r1, r0, #20
 8007978:	f100 0210 	add.w	r2, r0, #16
 800797c:	4618      	mov	r0, r3
 800797e:	4553      	cmp	r3, sl
 8007980:	db33      	blt.n	80079ea <__lshift+0xb6>
 8007982:	6920      	ldr	r0, [r4, #16]
 8007984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007988:	f104 0314 	add.w	r3, r4, #20
 800798c:	f019 091f 	ands.w	r9, r9, #31
 8007990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007998:	d02b      	beq.n	80079f2 <__lshift+0xbe>
 800799a:	f1c9 0e20 	rsb	lr, r9, #32
 800799e:	468a      	mov	sl, r1
 80079a0:	2200      	movs	r2, #0
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	fa00 f009 	lsl.w	r0, r0, r9
 80079a8:	4302      	orrs	r2, r0
 80079aa:	f84a 2b04 	str.w	r2, [sl], #4
 80079ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b2:	459c      	cmp	ip, r3
 80079b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80079b8:	d8f3      	bhi.n	80079a2 <__lshift+0x6e>
 80079ba:	ebac 0304 	sub.w	r3, ip, r4
 80079be:	3b15      	subs	r3, #21
 80079c0:	f023 0303 	bic.w	r3, r3, #3
 80079c4:	3304      	adds	r3, #4
 80079c6:	f104 0015 	add.w	r0, r4, #21
 80079ca:	4584      	cmp	ip, r0
 80079cc:	bf38      	it	cc
 80079ce:	2304      	movcc	r3, #4
 80079d0:	50ca      	str	r2, [r1, r3]
 80079d2:	b10a      	cbz	r2, 80079d8 <__lshift+0xa4>
 80079d4:	f108 0602 	add.w	r6, r8, #2
 80079d8:	3e01      	subs	r6, #1
 80079da:	4638      	mov	r0, r7
 80079dc:	612e      	str	r6, [r5, #16]
 80079de:	4621      	mov	r1, r4
 80079e0:	f7ff fdd6 	bl	8007590 <_Bfree>
 80079e4:	4628      	mov	r0, r5
 80079e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80079ee:	3301      	adds	r3, #1
 80079f0:	e7c5      	b.n	800797e <__lshift+0x4a>
 80079f2:	3904      	subs	r1, #4
 80079f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079fc:	459c      	cmp	ip, r3
 80079fe:	d8f9      	bhi.n	80079f4 <__lshift+0xc0>
 8007a00:	e7ea      	b.n	80079d8 <__lshift+0xa4>
 8007a02:	bf00      	nop
 8007a04:	080087dc 	.word	0x080087dc
 8007a08:	08008850 	.word	0x08008850

08007a0c <__mcmp>:
 8007a0c:	b530      	push	{r4, r5, lr}
 8007a0e:	6902      	ldr	r2, [r0, #16]
 8007a10:	690c      	ldr	r4, [r1, #16]
 8007a12:	1b12      	subs	r2, r2, r4
 8007a14:	d10e      	bne.n	8007a34 <__mcmp+0x28>
 8007a16:	f100 0314 	add.w	r3, r0, #20
 8007a1a:	3114      	adds	r1, #20
 8007a1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a2c:	42a5      	cmp	r5, r4
 8007a2e:	d003      	beq.n	8007a38 <__mcmp+0x2c>
 8007a30:	d305      	bcc.n	8007a3e <__mcmp+0x32>
 8007a32:	2201      	movs	r2, #1
 8007a34:	4610      	mov	r0, r2
 8007a36:	bd30      	pop	{r4, r5, pc}
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	d3f3      	bcc.n	8007a24 <__mcmp+0x18>
 8007a3c:	e7fa      	b.n	8007a34 <__mcmp+0x28>
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	e7f7      	b.n	8007a34 <__mcmp+0x28>

08007a44 <__mdiff>:
 8007a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4617      	mov	r7, r2
 8007a52:	f7ff ffdb 	bl	8007a0c <__mcmp>
 8007a56:	1e05      	subs	r5, r0, #0
 8007a58:	d110      	bne.n	8007a7c <__mdiff+0x38>
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff fd57 	bl	8007510 <_Balloc>
 8007a62:	b930      	cbnz	r0, 8007a72 <__mdiff+0x2e>
 8007a64:	4b39      	ldr	r3, [pc, #228]	; (8007b4c <__mdiff+0x108>)
 8007a66:	4602      	mov	r2, r0
 8007a68:	f240 2132 	movw	r1, #562	; 0x232
 8007a6c:	4838      	ldr	r0, [pc, #224]	; (8007b50 <__mdiff+0x10c>)
 8007a6e:	f7fd fd77 	bl	8005560 <__assert_func>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	bfa4      	itt	ge
 8007a7e:	463b      	movge	r3, r7
 8007a80:	4627      	movge	r7, r4
 8007a82:	4630      	mov	r0, r6
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	bfa6      	itte	ge
 8007a88:	461c      	movge	r4, r3
 8007a8a:	2500      	movge	r5, #0
 8007a8c:	2501      	movlt	r5, #1
 8007a8e:	f7ff fd3f 	bl	8007510 <_Balloc>
 8007a92:	b920      	cbnz	r0, 8007a9e <__mdiff+0x5a>
 8007a94:	4b2d      	ldr	r3, [pc, #180]	; (8007b4c <__mdiff+0x108>)
 8007a96:	4602      	mov	r2, r0
 8007a98:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a9c:	e7e6      	b.n	8007a6c <__mdiff+0x28>
 8007a9e:	693e      	ldr	r6, [r7, #16]
 8007aa0:	60c5      	str	r5, [r0, #12]
 8007aa2:	6925      	ldr	r5, [r4, #16]
 8007aa4:	f107 0114 	add.w	r1, r7, #20
 8007aa8:	f104 0914 	add.w	r9, r4, #20
 8007aac:	f100 0e14 	add.w	lr, r0, #20
 8007ab0:	f107 0210 	add.w	r2, r7, #16
 8007ab4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ab8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007abc:	46f2      	mov	sl, lr
 8007abe:	2700      	movs	r7, #0
 8007ac0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ac8:	fa1f f883 	uxth.w	r8, r3
 8007acc:	fa17 f78b 	uxtah	r7, r7, fp
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	eba7 0808 	sub.w	r8, r7, r8
 8007ad6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ada:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ade:	fa1f f888 	uxth.w	r8, r8
 8007ae2:	141f      	asrs	r7, r3, #16
 8007ae4:	454d      	cmp	r5, r9
 8007ae6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007aea:	f84a 3b04 	str.w	r3, [sl], #4
 8007aee:	d8e7      	bhi.n	8007ac0 <__mdiff+0x7c>
 8007af0:	1b2b      	subs	r3, r5, r4
 8007af2:	3b15      	subs	r3, #21
 8007af4:	f023 0303 	bic.w	r3, r3, #3
 8007af8:	3304      	adds	r3, #4
 8007afa:	3415      	adds	r4, #21
 8007afc:	42a5      	cmp	r5, r4
 8007afe:	bf38      	it	cc
 8007b00:	2304      	movcc	r3, #4
 8007b02:	4419      	add	r1, r3
 8007b04:	4473      	add	r3, lr
 8007b06:	469e      	mov	lr, r3
 8007b08:	460d      	mov	r5, r1
 8007b0a:	4565      	cmp	r5, ip
 8007b0c:	d30e      	bcc.n	8007b2c <__mdiff+0xe8>
 8007b0e:	f10c 0203 	add.w	r2, ip, #3
 8007b12:	1a52      	subs	r2, r2, r1
 8007b14:	f022 0203 	bic.w	r2, r2, #3
 8007b18:	3903      	subs	r1, #3
 8007b1a:	458c      	cmp	ip, r1
 8007b1c:	bf38      	it	cc
 8007b1e:	2200      	movcc	r2, #0
 8007b20:	441a      	add	r2, r3
 8007b22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b26:	b17b      	cbz	r3, 8007b48 <__mdiff+0x104>
 8007b28:	6106      	str	r6, [r0, #16]
 8007b2a:	e7a5      	b.n	8007a78 <__mdiff+0x34>
 8007b2c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b30:	fa17 f488 	uxtah	r4, r7, r8
 8007b34:	1422      	asrs	r2, r4, #16
 8007b36:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b3a:	b2a4      	uxth	r4, r4
 8007b3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b40:	f84e 4b04 	str.w	r4, [lr], #4
 8007b44:	1417      	asrs	r7, r2, #16
 8007b46:	e7e0      	b.n	8007b0a <__mdiff+0xc6>
 8007b48:	3e01      	subs	r6, #1
 8007b4a:	e7ea      	b.n	8007b22 <__mdiff+0xde>
 8007b4c:	080087dc 	.word	0x080087dc
 8007b50:	08008850 	.word	0x08008850

08007b54 <__d2b>:
 8007b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	4689      	mov	r9, r1
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	ec57 6b10 	vmov	r6, r7, d0
 8007b60:	4690      	mov	r8, r2
 8007b62:	f7ff fcd5 	bl	8007510 <_Balloc>
 8007b66:	4604      	mov	r4, r0
 8007b68:	b930      	cbnz	r0, 8007b78 <__d2b+0x24>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	4b25      	ldr	r3, [pc, #148]	; (8007c04 <__d2b+0xb0>)
 8007b6e:	4826      	ldr	r0, [pc, #152]	; (8007c08 <__d2b+0xb4>)
 8007b70:	f240 310a 	movw	r1, #778	; 0x30a
 8007b74:	f7fd fcf4 	bl	8005560 <__assert_func>
 8007b78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b80:	bb35      	cbnz	r5, 8007bd0 <__d2b+0x7c>
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	d028      	beq.n	8007bda <__d2b+0x86>
 8007b88:	4668      	mov	r0, sp
 8007b8a:	9600      	str	r6, [sp, #0]
 8007b8c:	f7ff fd8c 	bl	80076a8 <__lo0bits>
 8007b90:	9900      	ldr	r1, [sp, #0]
 8007b92:	b300      	cbz	r0, 8007bd6 <__d2b+0x82>
 8007b94:	9a01      	ldr	r2, [sp, #4]
 8007b96:	f1c0 0320 	rsb	r3, r0, #32
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	40c2      	lsrs	r2, r0
 8007ba2:	6163      	str	r3, [r4, #20]
 8007ba4:	9201      	str	r2, [sp, #4]
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	61a3      	str	r3, [r4, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2202      	movne	r2, #2
 8007bb0:	2201      	moveq	r2, #1
 8007bb2:	6122      	str	r2, [r4, #16]
 8007bb4:	b1d5      	cbz	r5, 8007bec <__d2b+0x98>
 8007bb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bba:	4405      	add	r5, r0
 8007bbc:	f8c9 5000 	str.w	r5, [r9]
 8007bc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bc4:	f8c8 0000 	str.w	r0, [r8]
 8007bc8:	4620      	mov	r0, r4
 8007bca:	b003      	add	sp, #12
 8007bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bd4:	e7d5      	b.n	8007b82 <__d2b+0x2e>
 8007bd6:	6161      	str	r1, [r4, #20]
 8007bd8:	e7e5      	b.n	8007ba6 <__d2b+0x52>
 8007bda:	a801      	add	r0, sp, #4
 8007bdc:	f7ff fd64 	bl	80076a8 <__lo0bits>
 8007be0:	9b01      	ldr	r3, [sp, #4]
 8007be2:	6163      	str	r3, [r4, #20]
 8007be4:	2201      	movs	r2, #1
 8007be6:	6122      	str	r2, [r4, #16]
 8007be8:	3020      	adds	r0, #32
 8007bea:	e7e3      	b.n	8007bb4 <__d2b+0x60>
 8007bec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bf4:	f8c9 0000 	str.w	r0, [r9]
 8007bf8:	6918      	ldr	r0, [r3, #16]
 8007bfa:	f7ff fd35 	bl	8007668 <__hi0bits>
 8007bfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c02:	e7df      	b.n	8007bc4 <__d2b+0x70>
 8007c04:	080087dc 	.word	0x080087dc
 8007c08:	08008850 	.word	0x08008850

08007c0c <_calloc_r>:
 8007c0c:	b513      	push	{r0, r1, r4, lr}
 8007c0e:	434a      	muls	r2, r1
 8007c10:	4611      	mov	r1, r2
 8007c12:	9201      	str	r2, [sp, #4]
 8007c14:	f000 f85a 	bl	8007ccc <_malloc_r>
 8007c18:	4604      	mov	r4, r0
 8007c1a:	b118      	cbz	r0, 8007c24 <_calloc_r+0x18>
 8007c1c:	9a01      	ldr	r2, [sp, #4]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	f7fd fcf8 	bl	8005614 <memset>
 8007c24:	4620      	mov	r0, r4
 8007c26:	b002      	add	sp, #8
 8007c28:	bd10      	pop	{r4, pc}
	...

08007c2c <_free_r>:
 8007c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	d048      	beq.n	8007cc4 <_free_r+0x98>
 8007c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c36:	9001      	str	r0, [sp, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c3e:	bfb8      	it	lt
 8007c40:	18e4      	addlt	r4, r4, r3
 8007c42:	f000 fb1f 	bl	8008284 <__malloc_lock>
 8007c46:	4a20      	ldr	r2, [pc, #128]	; (8007cc8 <_free_r+0x9c>)
 8007c48:	9801      	ldr	r0, [sp, #4]
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	4615      	mov	r5, r2
 8007c4e:	b933      	cbnz	r3, 8007c5e <_free_r+0x32>
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	6014      	str	r4, [r2, #0]
 8007c54:	b003      	add	sp, #12
 8007c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c5a:	f000 bb19 	b.w	8008290 <__malloc_unlock>
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	d90b      	bls.n	8007c7a <_free_r+0x4e>
 8007c62:	6821      	ldr	r1, [r4, #0]
 8007c64:	1862      	adds	r2, r4, r1
 8007c66:	4293      	cmp	r3, r2
 8007c68:	bf04      	itt	eq
 8007c6a:	681a      	ldreq	r2, [r3, #0]
 8007c6c:	685b      	ldreq	r3, [r3, #4]
 8007c6e:	6063      	str	r3, [r4, #4]
 8007c70:	bf04      	itt	eq
 8007c72:	1852      	addeq	r2, r2, r1
 8007c74:	6022      	streq	r2, [r4, #0]
 8007c76:	602c      	str	r4, [r5, #0]
 8007c78:	e7ec      	b.n	8007c54 <_free_r+0x28>
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	b10b      	cbz	r3, 8007c84 <_free_r+0x58>
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	d9fa      	bls.n	8007c7a <_free_r+0x4e>
 8007c84:	6811      	ldr	r1, [r2, #0]
 8007c86:	1855      	adds	r5, r2, r1
 8007c88:	42a5      	cmp	r5, r4
 8007c8a:	d10b      	bne.n	8007ca4 <_free_r+0x78>
 8007c8c:	6824      	ldr	r4, [r4, #0]
 8007c8e:	4421      	add	r1, r4
 8007c90:	1854      	adds	r4, r2, r1
 8007c92:	42a3      	cmp	r3, r4
 8007c94:	6011      	str	r1, [r2, #0]
 8007c96:	d1dd      	bne.n	8007c54 <_free_r+0x28>
 8007c98:	681c      	ldr	r4, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	6053      	str	r3, [r2, #4]
 8007c9e:	4421      	add	r1, r4
 8007ca0:	6011      	str	r1, [r2, #0]
 8007ca2:	e7d7      	b.n	8007c54 <_free_r+0x28>
 8007ca4:	d902      	bls.n	8007cac <_free_r+0x80>
 8007ca6:	230c      	movs	r3, #12
 8007ca8:	6003      	str	r3, [r0, #0]
 8007caa:	e7d3      	b.n	8007c54 <_free_r+0x28>
 8007cac:	6825      	ldr	r5, [r4, #0]
 8007cae:	1961      	adds	r1, r4, r5
 8007cb0:	428b      	cmp	r3, r1
 8007cb2:	bf04      	itt	eq
 8007cb4:	6819      	ldreq	r1, [r3, #0]
 8007cb6:	685b      	ldreq	r3, [r3, #4]
 8007cb8:	6063      	str	r3, [r4, #4]
 8007cba:	bf04      	itt	eq
 8007cbc:	1949      	addeq	r1, r1, r5
 8007cbe:	6021      	streq	r1, [r4, #0]
 8007cc0:	6054      	str	r4, [r2, #4]
 8007cc2:	e7c7      	b.n	8007c54 <_free_r+0x28>
 8007cc4:	b003      	add	sp, #12
 8007cc6:	bd30      	pop	{r4, r5, pc}
 8007cc8:	20000214 	.word	0x20000214

08007ccc <_malloc_r>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	1ccd      	adds	r5, r1, #3
 8007cd0:	f025 0503 	bic.w	r5, r5, #3
 8007cd4:	3508      	adds	r5, #8
 8007cd6:	2d0c      	cmp	r5, #12
 8007cd8:	bf38      	it	cc
 8007cda:	250c      	movcc	r5, #12
 8007cdc:	2d00      	cmp	r5, #0
 8007cde:	4606      	mov	r6, r0
 8007ce0:	db01      	blt.n	8007ce6 <_malloc_r+0x1a>
 8007ce2:	42a9      	cmp	r1, r5
 8007ce4:	d903      	bls.n	8007cee <_malloc_r+0x22>
 8007ce6:	230c      	movs	r3, #12
 8007ce8:	6033      	str	r3, [r6, #0]
 8007cea:	2000      	movs	r0, #0
 8007cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cee:	f000 fac9 	bl	8008284 <__malloc_lock>
 8007cf2:	4921      	ldr	r1, [pc, #132]	; (8007d78 <_malloc_r+0xac>)
 8007cf4:	680a      	ldr	r2, [r1, #0]
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	b99c      	cbnz	r4, 8007d22 <_malloc_r+0x56>
 8007cfa:	4f20      	ldr	r7, [pc, #128]	; (8007d7c <_malloc_r+0xb0>)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	b923      	cbnz	r3, 8007d0a <_malloc_r+0x3e>
 8007d00:	4621      	mov	r1, r4
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 f9be 	bl	8008084 <_sbrk_r>
 8007d08:	6038      	str	r0, [r7, #0]
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f000 f9b9 	bl	8008084 <_sbrk_r>
 8007d12:	1c43      	adds	r3, r0, #1
 8007d14:	d123      	bne.n	8007d5e <_malloc_r+0x92>
 8007d16:	230c      	movs	r3, #12
 8007d18:	6033      	str	r3, [r6, #0]
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f000 fab8 	bl	8008290 <__malloc_unlock>
 8007d20:	e7e3      	b.n	8007cea <_malloc_r+0x1e>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	1b5b      	subs	r3, r3, r5
 8007d26:	d417      	bmi.n	8007d58 <_malloc_r+0x8c>
 8007d28:	2b0b      	cmp	r3, #11
 8007d2a:	d903      	bls.n	8007d34 <_malloc_r+0x68>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	441c      	add	r4, r3
 8007d30:	6025      	str	r5, [r4, #0]
 8007d32:	e004      	b.n	8007d3e <_malloc_r+0x72>
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	42a2      	cmp	r2, r4
 8007d38:	bf0c      	ite	eq
 8007d3a:	600b      	streq	r3, [r1, #0]
 8007d3c:	6053      	strne	r3, [r2, #4]
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 faa6 	bl	8008290 <__malloc_unlock>
 8007d44:	f104 000b 	add.w	r0, r4, #11
 8007d48:	1d23      	adds	r3, r4, #4
 8007d4a:	f020 0007 	bic.w	r0, r0, #7
 8007d4e:	1ac2      	subs	r2, r0, r3
 8007d50:	d0cc      	beq.n	8007cec <_malloc_r+0x20>
 8007d52:	1a1b      	subs	r3, r3, r0
 8007d54:	50a3      	str	r3, [r4, r2]
 8007d56:	e7c9      	b.n	8007cec <_malloc_r+0x20>
 8007d58:	4622      	mov	r2, r4
 8007d5a:	6864      	ldr	r4, [r4, #4]
 8007d5c:	e7cc      	b.n	8007cf8 <_malloc_r+0x2c>
 8007d5e:	1cc4      	adds	r4, r0, #3
 8007d60:	f024 0403 	bic.w	r4, r4, #3
 8007d64:	42a0      	cmp	r0, r4
 8007d66:	d0e3      	beq.n	8007d30 <_malloc_r+0x64>
 8007d68:	1a21      	subs	r1, r4, r0
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f000 f98a 	bl	8008084 <_sbrk_r>
 8007d70:	3001      	adds	r0, #1
 8007d72:	d1dd      	bne.n	8007d30 <_malloc_r+0x64>
 8007d74:	e7cf      	b.n	8007d16 <_malloc_r+0x4a>
 8007d76:	bf00      	nop
 8007d78:	20000214 	.word	0x20000214
 8007d7c:	20000218 	.word	0x20000218

08007d80 <_realloc_r>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	4607      	mov	r7, r0
 8007d84:	4614      	mov	r4, r2
 8007d86:	460e      	mov	r6, r1
 8007d88:	b921      	cbnz	r1, 8007d94 <_realloc_r+0x14>
 8007d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d8e:	4611      	mov	r1, r2
 8007d90:	f7ff bf9c 	b.w	8007ccc <_malloc_r>
 8007d94:	b922      	cbnz	r2, 8007da0 <_realloc_r+0x20>
 8007d96:	f7ff ff49 	bl	8007c2c <_free_r>
 8007d9a:	4625      	mov	r5, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da0:	f000 fa7c 	bl	800829c <_malloc_usable_size_r>
 8007da4:	42a0      	cmp	r0, r4
 8007da6:	d20f      	bcs.n	8007dc8 <_realloc_r+0x48>
 8007da8:	4621      	mov	r1, r4
 8007daa:	4638      	mov	r0, r7
 8007dac:	f7ff ff8e 	bl	8007ccc <_malloc_r>
 8007db0:	4605      	mov	r5, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d0f2      	beq.n	8007d9c <_realloc_r+0x1c>
 8007db6:	4631      	mov	r1, r6
 8007db8:	4622      	mov	r2, r4
 8007dba:	f7ff fb81 	bl	80074c0 <memcpy>
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7ff ff33 	bl	8007c2c <_free_r>
 8007dc6:	e7e9      	b.n	8007d9c <_realloc_r+0x1c>
 8007dc8:	4635      	mov	r5, r6
 8007dca:	e7e7      	b.n	8007d9c <_realloc_r+0x1c>

08007dcc <__ssputs_r>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	688e      	ldr	r6, [r1, #8]
 8007dd2:	429e      	cmp	r6, r3
 8007dd4:	4682      	mov	sl, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	4690      	mov	r8, r2
 8007dda:	461f      	mov	r7, r3
 8007ddc:	d838      	bhi.n	8007e50 <__ssputs_r+0x84>
 8007dde:	898a      	ldrh	r2, [r1, #12]
 8007de0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007de4:	d032      	beq.n	8007e4c <__ssputs_r+0x80>
 8007de6:	6825      	ldr	r5, [r4, #0]
 8007de8:	6909      	ldr	r1, [r1, #16]
 8007dea:	eba5 0901 	sub.w	r9, r5, r1
 8007dee:	6965      	ldr	r5, [r4, #20]
 8007df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007df4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007df8:	3301      	adds	r3, #1
 8007dfa:	444b      	add	r3, r9
 8007dfc:	106d      	asrs	r5, r5, #1
 8007dfe:	429d      	cmp	r5, r3
 8007e00:	bf38      	it	cc
 8007e02:	461d      	movcc	r5, r3
 8007e04:	0553      	lsls	r3, r2, #21
 8007e06:	d531      	bpl.n	8007e6c <__ssputs_r+0xa0>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7ff ff5f 	bl	8007ccc <_malloc_r>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	b950      	cbnz	r0, 8007e28 <__ssputs_r+0x5c>
 8007e12:	230c      	movs	r3, #12
 8007e14:	f8ca 3000 	str.w	r3, [sl]
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e28:	6921      	ldr	r1, [r4, #16]
 8007e2a:	464a      	mov	r2, r9
 8007e2c:	f7ff fb48 	bl	80074c0 <memcpy>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	6126      	str	r6, [r4, #16]
 8007e3e:	6165      	str	r5, [r4, #20]
 8007e40:	444e      	add	r6, r9
 8007e42:	eba5 0509 	sub.w	r5, r5, r9
 8007e46:	6026      	str	r6, [r4, #0]
 8007e48:	60a5      	str	r5, [r4, #8]
 8007e4a:	463e      	mov	r6, r7
 8007e4c:	42be      	cmp	r6, r7
 8007e4e:	d900      	bls.n	8007e52 <__ssputs_r+0x86>
 8007e50:	463e      	mov	r6, r7
 8007e52:	4632      	mov	r2, r6
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	4641      	mov	r1, r8
 8007e58:	f7ff fb40 	bl	80074dc <memmove>
 8007e5c:	68a3      	ldr	r3, [r4, #8]
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	1b9b      	subs	r3, r3, r6
 8007e62:	4432      	add	r2, r6
 8007e64:	60a3      	str	r3, [r4, #8]
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	2000      	movs	r0, #0
 8007e6a:	e7db      	b.n	8007e24 <__ssputs_r+0x58>
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	f7ff ff87 	bl	8007d80 <_realloc_r>
 8007e72:	4606      	mov	r6, r0
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d1e1      	bne.n	8007e3c <__ssputs_r+0x70>
 8007e78:	6921      	ldr	r1, [r4, #16]
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f7ff fed6 	bl	8007c2c <_free_r>
 8007e80:	e7c7      	b.n	8007e12 <__ssputs_r+0x46>
	...

08007e84 <_svfiprintf_r>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	4698      	mov	r8, r3
 8007e8a:	898b      	ldrh	r3, [r1, #12]
 8007e8c:	061b      	lsls	r3, r3, #24
 8007e8e:	b09d      	sub	sp, #116	; 0x74
 8007e90:	4607      	mov	r7, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	4614      	mov	r4, r2
 8007e96:	d50e      	bpl.n	8007eb6 <_svfiprintf_r+0x32>
 8007e98:	690b      	ldr	r3, [r1, #16]
 8007e9a:	b963      	cbnz	r3, 8007eb6 <_svfiprintf_r+0x32>
 8007e9c:	2140      	movs	r1, #64	; 0x40
 8007e9e:	f7ff ff15 	bl	8007ccc <_malloc_r>
 8007ea2:	6028      	str	r0, [r5, #0]
 8007ea4:	6128      	str	r0, [r5, #16]
 8007ea6:	b920      	cbnz	r0, 8007eb2 <_svfiprintf_r+0x2e>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb0:	e0d1      	b.n	8008056 <_svfiprintf_r+0x1d2>
 8007eb2:	2340      	movs	r3, #64	; 0x40
 8007eb4:	616b      	str	r3, [r5, #20]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eba:	2320      	movs	r3, #32
 8007ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec4:	2330      	movs	r3, #48	; 0x30
 8007ec6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008070 <_svfiprintf_r+0x1ec>
 8007eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ece:	f04f 0901 	mov.w	r9, #1
 8007ed2:	4623      	mov	r3, r4
 8007ed4:	469a      	mov	sl, r3
 8007ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eda:	b10a      	cbz	r2, 8007ee0 <_svfiprintf_r+0x5c>
 8007edc:	2a25      	cmp	r2, #37	; 0x25
 8007ede:	d1f9      	bne.n	8007ed4 <_svfiprintf_r+0x50>
 8007ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ee4:	d00b      	beq.n	8007efe <_svfiprintf_r+0x7a>
 8007ee6:	465b      	mov	r3, fp
 8007ee8:	4622      	mov	r2, r4
 8007eea:	4629      	mov	r1, r5
 8007eec:	4638      	mov	r0, r7
 8007eee:	f7ff ff6d 	bl	8007dcc <__ssputs_r>
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f000 80aa 	beq.w	800804c <_svfiprintf_r+0x1c8>
 8007ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007efa:	445a      	add	r2, fp
 8007efc:	9209      	str	r2, [sp, #36]	; 0x24
 8007efe:	f89a 3000 	ldrb.w	r3, [sl]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80a2 	beq.w	800804c <_svfiprintf_r+0x1c8>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f12:	f10a 0a01 	add.w	sl, sl, #1
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	9307      	str	r3, [sp, #28]
 8007f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f20:	4654      	mov	r4, sl
 8007f22:	2205      	movs	r2, #5
 8007f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f28:	4851      	ldr	r0, [pc, #324]	; (8008070 <_svfiprintf_r+0x1ec>)
 8007f2a:	f7f8 f959 	bl	80001e0 <memchr>
 8007f2e:	9a04      	ldr	r2, [sp, #16]
 8007f30:	b9d8      	cbnz	r0, 8007f6a <_svfiprintf_r+0xe6>
 8007f32:	06d0      	lsls	r0, r2, #27
 8007f34:	bf44      	itt	mi
 8007f36:	2320      	movmi	r3, #32
 8007f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3c:	0711      	lsls	r1, r2, #28
 8007f3e:	bf44      	itt	mi
 8007f40:	232b      	movmi	r3, #43	; 0x2b
 8007f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f46:	f89a 3000 	ldrb.w	r3, [sl]
 8007f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4c:	d015      	beq.n	8007f7a <_svfiprintf_r+0xf6>
 8007f4e:	9a07      	ldr	r2, [sp, #28]
 8007f50:	4654      	mov	r4, sl
 8007f52:	2000      	movs	r0, #0
 8007f54:	f04f 0c0a 	mov.w	ip, #10
 8007f58:	4621      	mov	r1, r4
 8007f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f5e:	3b30      	subs	r3, #48	; 0x30
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d94e      	bls.n	8008002 <_svfiprintf_r+0x17e>
 8007f64:	b1b0      	cbz	r0, 8007f94 <_svfiprintf_r+0x110>
 8007f66:	9207      	str	r2, [sp, #28]
 8007f68:	e014      	b.n	8007f94 <_svfiprintf_r+0x110>
 8007f6a:	eba0 0308 	sub.w	r3, r0, r8
 8007f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f72:	4313      	orrs	r3, r2
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	46a2      	mov	sl, r4
 8007f78:	e7d2      	b.n	8007f20 <_svfiprintf_r+0x9c>
 8007f7a:	9b03      	ldr	r3, [sp, #12]
 8007f7c:	1d19      	adds	r1, r3, #4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	9103      	str	r1, [sp, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bfbb      	ittet	lt
 8007f86:	425b      	neglt	r3, r3
 8007f88:	f042 0202 	orrlt.w	r2, r2, #2
 8007f8c:	9307      	strge	r3, [sp, #28]
 8007f8e:	9307      	strlt	r3, [sp, #28]
 8007f90:	bfb8      	it	lt
 8007f92:	9204      	strlt	r2, [sp, #16]
 8007f94:	7823      	ldrb	r3, [r4, #0]
 8007f96:	2b2e      	cmp	r3, #46	; 0x2e
 8007f98:	d10c      	bne.n	8007fb4 <_svfiprintf_r+0x130>
 8007f9a:	7863      	ldrb	r3, [r4, #1]
 8007f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f9e:	d135      	bne.n	800800c <_svfiprintf_r+0x188>
 8007fa0:	9b03      	ldr	r3, [sp, #12]
 8007fa2:	1d1a      	adds	r2, r3, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	9203      	str	r2, [sp, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bfb8      	it	lt
 8007fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fb0:	3402      	adds	r4, #2
 8007fb2:	9305      	str	r3, [sp, #20]
 8007fb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008080 <_svfiprintf_r+0x1fc>
 8007fb8:	7821      	ldrb	r1, [r4, #0]
 8007fba:	2203      	movs	r2, #3
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	f7f8 f90f 	bl	80001e0 <memchr>
 8007fc2:	b140      	cbz	r0, 8007fd6 <_svfiprintf_r+0x152>
 8007fc4:	2340      	movs	r3, #64	; 0x40
 8007fc6:	eba0 000a 	sub.w	r0, r0, sl
 8007fca:	fa03 f000 	lsl.w	r0, r3, r0
 8007fce:	9b04      	ldr	r3, [sp, #16]
 8007fd0:	4303      	orrs	r3, r0
 8007fd2:	3401      	adds	r4, #1
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	4826      	ldr	r0, [pc, #152]	; (8008074 <_svfiprintf_r+0x1f0>)
 8007fdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fe0:	2206      	movs	r2, #6
 8007fe2:	f7f8 f8fd 	bl	80001e0 <memchr>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d038      	beq.n	800805c <_svfiprintf_r+0x1d8>
 8007fea:	4b23      	ldr	r3, [pc, #140]	; (8008078 <_svfiprintf_r+0x1f4>)
 8007fec:	bb1b      	cbnz	r3, 8008036 <_svfiprintf_r+0x1b2>
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	3307      	adds	r3, #7
 8007ff2:	f023 0307 	bic.w	r3, r3, #7
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	9303      	str	r3, [sp, #12]
 8007ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffc:	4433      	add	r3, r6
 8007ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8008000:	e767      	b.n	8007ed2 <_svfiprintf_r+0x4e>
 8008002:	fb0c 3202 	mla	r2, ip, r2, r3
 8008006:	460c      	mov	r4, r1
 8008008:	2001      	movs	r0, #1
 800800a:	e7a5      	b.n	8007f58 <_svfiprintf_r+0xd4>
 800800c:	2300      	movs	r3, #0
 800800e:	3401      	adds	r4, #1
 8008010:	9305      	str	r3, [sp, #20]
 8008012:	4619      	mov	r1, r3
 8008014:	f04f 0c0a 	mov.w	ip, #10
 8008018:	4620      	mov	r0, r4
 800801a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800801e:	3a30      	subs	r2, #48	; 0x30
 8008020:	2a09      	cmp	r2, #9
 8008022:	d903      	bls.n	800802c <_svfiprintf_r+0x1a8>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0c5      	beq.n	8007fb4 <_svfiprintf_r+0x130>
 8008028:	9105      	str	r1, [sp, #20]
 800802a:	e7c3      	b.n	8007fb4 <_svfiprintf_r+0x130>
 800802c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008030:	4604      	mov	r4, r0
 8008032:	2301      	movs	r3, #1
 8008034:	e7f0      	b.n	8008018 <_svfiprintf_r+0x194>
 8008036:	ab03      	add	r3, sp, #12
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	462a      	mov	r2, r5
 800803c:	4b0f      	ldr	r3, [pc, #60]	; (800807c <_svfiprintf_r+0x1f8>)
 800803e:	a904      	add	r1, sp, #16
 8008040:	4638      	mov	r0, r7
 8008042:	f7fd fce9 	bl	8005a18 <_printf_float>
 8008046:	1c42      	adds	r2, r0, #1
 8008048:	4606      	mov	r6, r0
 800804a:	d1d6      	bne.n	8007ffa <_svfiprintf_r+0x176>
 800804c:	89ab      	ldrh	r3, [r5, #12]
 800804e:	065b      	lsls	r3, r3, #25
 8008050:	f53f af2c 	bmi.w	8007eac <_svfiprintf_r+0x28>
 8008054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008056:	b01d      	add	sp, #116	; 0x74
 8008058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	462a      	mov	r2, r5
 8008062:	4b06      	ldr	r3, [pc, #24]	; (800807c <_svfiprintf_r+0x1f8>)
 8008064:	a904      	add	r1, sp, #16
 8008066:	4638      	mov	r0, r7
 8008068:	f7fd ff7a 	bl	8005f60 <_printf_i>
 800806c:	e7eb      	b.n	8008046 <_svfiprintf_r+0x1c2>
 800806e:	bf00      	nop
 8008070:	08008714 	.word	0x08008714
 8008074:	0800871e 	.word	0x0800871e
 8008078:	08005a19 	.word	0x08005a19
 800807c:	08007dcd 	.word	0x08007dcd
 8008080:	0800871a 	.word	0x0800871a

08008084 <_sbrk_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_sbrk_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7fa f8c6 	bl	8002220 <_sbrk>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_sbrk_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_sbrk_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	200003f0 	.word	0x200003f0

080080a4 <_raise_r>:
 80080a4:	291f      	cmp	r1, #31
 80080a6:	b538      	push	{r3, r4, r5, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	d904      	bls.n	80080b8 <_raise_r+0x14>
 80080ae:	2316      	movs	r3, #22
 80080b0:	6003      	str	r3, [r0, #0]
 80080b2:	f04f 30ff 	mov.w	r0, #4294967295
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080ba:	b112      	cbz	r2, 80080c2 <_raise_r+0x1e>
 80080bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080c0:	b94b      	cbnz	r3, 80080d6 <_raise_r+0x32>
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f830 	bl	8008128 <_getpid_r>
 80080c8:	462a      	mov	r2, r5
 80080ca:	4601      	mov	r1, r0
 80080cc:	4620      	mov	r0, r4
 80080ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080d2:	f000 b817 	b.w	8008104 <_kill_r>
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d00a      	beq.n	80080f0 <_raise_r+0x4c>
 80080da:	1c59      	adds	r1, r3, #1
 80080dc:	d103      	bne.n	80080e6 <_raise_r+0x42>
 80080de:	2316      	movs	r3, #22
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	2001      	movs	r0, #1
 80080e4:	e7e7      	b.n	80080b6 <_raise_r+0x12>
 80080e6:	2400      	movs	r4, #0
 80080e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080ec:	4628      	mov	r0, r5
 80080ee:	4798      	blx	r3
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7e0      	b.n	80080b6 <_raise_r+0x12>

080080f4 <raise>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <raise+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f7ff bfd3 	b.w	80080a4 <_raise_r>
 80080fe:	bf00      	nop
 8008100:	20000018 	.word	0x20000018

08008104 <_kill_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	; (8008124 <_kill_r+0x20>)
 8008108:	2300      	movs	r3, #0
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	f7f9 fffd 	bl	8002110 <_kill>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	d102      	bne.n	8008120 <_kill_r+0x1c>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	b103      	cbz	r3, 8008120 <_kill_r+0x1c>
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	bd38      	pop	{r3, r4, r5, pc}
 8008122:	bf00      	nop
 8008124:	200003f0 	.word	0x200003f0

08008128 <_getpid_r>:
 8008128:	f7f9 bfea 	b.w	8002100 <_getpid>

0800812c <__sread>:
 800812c:	b510      	push	{r4, lr}
 800812e:	460c      	mov	r4, r1
 8008130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008134:	f000 f8ba 	bl	80082ac <_read_r>
 8008138:	2800      	cmp	r0, #0
 800813a:	bfab      	itete	ge
 800813c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800813e:	89a3      	ldrhlt	r3, [r4, #12]
 8008140:	181b      	addge	r3, r3, r0
 8008142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008146:	bfac      	ite	ge
 8008148:	6563      	strge	r3, [r4, #84]	; 0x54
 800814a:	81a3      	strhlt	r3, [r4, #12]
 800814c:	bd10      	pop	{r4, pc}

0800814e <__swrite>:
 800814e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008152:	461f      	mov	r7, r3
 8008154:	898b      	ldrh	r3, [r1, #12]
 8008156:	05db      	lsls	r3, r3, #23
 8008158:	4605      	mov	r5, r0
 800815a:	460c      	mov	r4, r1
 800815c:	4616      	mov	r6, r2
 800815e:	d505      	bpl.n	800816c <__swrite+0x1e>
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	2302      	movs	r3, #2
 8008166:	2200      	movs	r2, #0
 8008168:	f000 f868 	bl	800823c <_lseek_r>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	4632      	mov	r2, r6
 800817a:	463b      	mov	r3, r7
 800817c:	4628      	mov	r0, r5
 800817e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008182:	f000 b817 	b.w	80081b4 <_write_r>

08008186 <__sseek>:
 8008186:	b510      	push	{r4, lr}
 8008188:	460c      	mov	r4, r1
 800818a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818e:	f000 f855 	bl	800823c <_lseek_r>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	bf15      	itete	ne
 8008198:	6560      	strne	r0, [r4, #84]	; 0x54
 800819a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800819e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081a2:	81a3      	strheq	r3, [r4, #12]
 80081a4:	bf18      	it	ne
 80081a6:	81a3      	strhne	r3, [r4, #12]
 80081a8:	bd10      	pop	{r4, pc}

080081aa <__sclose>:
 80081aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ae:	f000 b813 	b.w	80081d8 <_close_r>
	...

080081b4 <_write_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	; (80081d4 <_write_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7f9 ffdb 	bl	800217e <_write>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_write_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_write_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	200003f0 	.word	0x200003f0

080081d8 <_close_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_close_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f9 ffe7 	bl	80021b6 <_close>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_close_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_close_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	200003f0 	.word	0x200003f0

080081f8 <_fstat_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	; (8008218 <_fstat_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7f9 ffe2 	bl	80021ce <_fstat>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_fstat_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_fstat_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	200003f0 	.word	0x200003f0

0800821c <_isatty_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	; (8008238 <_isatty_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7f9 ffe1 	bl	80021ee <_isatty>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_isatty_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_isatty_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	200003f0 	.word	0x200003f0

0800823c <_lseek_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	; (800825c <_lseek_r+0x20>)
 8008240:	4604      	mov	r4, r0
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7f9 ffda 	bl	8002204 <_lseek>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_lseek_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_lseek_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	200003f0 	.word	0x200003f0

08008260 <__ascii_mbtowc>:
 8008260:	b082      	sub	sp, #8
 8008262:	b901      	cbnz	r1, 8008266 <__ascii_mbtowc+0x6>
 8008264:	a901      	add	r1, sp, #4
 8008266:	b142      	cbz	r2, 800827a <__ascii_mbtowc+0x1a>
 8008268:	b14b      	cbz	r3, 800827e <__ascii_mbtowc+0x1e>
 800826a:	7813      	ldrb	r3, [r2, #0]
 800826c:	600b      	str	r3, [r1, #0]
 800826e:	7812      	ldrb	r2, [r2, #0]
 8008270:	1e10      	subs	r0, r2, #0
 8008272:	bf18      	it	ne
 8008274:	2001      	movne	r0, #1
 8008276:	b002      	add	sp, #8
 8008278:	4770      	bx	lr
 800827a:	4610      	mov	r0, r2
 800827c:	e7fb      	b.n	8008276 <__ascii_mbtowc+0x16>
 800827e:	f06f 0001 	mvn.w	r0, #1
 8008282:	e7f8      	b.n	8008276 <__ascii_mbtowc+0x16>

08008284 <__malloc_lock>:
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <__malloc_lock+0x8>)
 8008286:	f7ff b8ac 	b.w	80073e2 <__retarget_lock_acquire_recursive>
 800828a:	bf00      	nop
 800828c:	200003e8 	.word	0x200003e8

08008290 <__malloc_unlock>:
 8008290:	4801      	ldr	r0, [pc, #4]	; (8008298 <__malloc_unlock+0x8>)
 8008292:	f7ff b8a7 	b.w	80073e4 <__retarget_lock_release_recursive>
 8008296:	bf00      	nop
 8008298:	200003e8 	.word	0x200003e8

0800829c <_malloc_usable_size_r>:
 800829c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a0:	1f18      	subs	r0, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfbc      	itt	lt
 80082a6:	580b      	ldrlt	r3, [r1, r0]
 80082a8:	18c0      	addlt	r0, r0, r3
 80082aa:	4770      	bx	lr

080082ac <_read_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4d07      	ldr	r5, [pc, #28]	; (80082cc <_read_r+0x20>)
 80082b0:	4604      	mov	r4, r0
 80082b2:	4608      	mov	r0, r1
 80082b4:	4611      	mov	r1, r2
 80082b6:	2200      	movs	r2, #0
 80082b8:	602a      	str	r2, [r5, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f7f9 ff42 	bl	8002144 <_read>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_read_r+0x1e>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_read_r+0x1e>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200003f0 	.word	0x200003f0

080082d0 <__ascii_wctomb>:
 80082d0:	b149      	cbz	r1, 80082e6 <__ascii_wctomb+0x16>
 80082d2:	2aff      	cmp	r2, #255	; 0xff
 80082d4:	bf85      	ittet	hi
 80082d6:	238a      	movhi	r3, #138	; 0x8a
 80082d8:	6003      	strhi	r3, [r0, #0]
 80082da:	700a      	strbls	r2, [r1, #0]
 80082dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80082e0:	bf98      	it	ls
 80082e2:	2001      	movls	r0, #1
 80082e4:	4770      	bx	lr
 80082e6:	4608      	mov	r0, r1
 80082e8:	4770      	bx	lr
	...

080082ec <roundf>:
 80082ec:	ee10 0a10 	vmov	r0, s0
 80082f0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80082f4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80082f8:	2a16      	cmp	r2, #22
 80082fa:	dc15      	bgt.n	8008328 <roundf+0x3c>
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	da08      	bge.n	8008312 <roundf+0x26>
 8008300:	3201      	adds	r2, #1
 8008302:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008306:	d101      	bne.n	800830c <roundf+0x20>
 8008308:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800830c:	ee00 3a10 	vmov	s0, r3
 8008310:	4770      	bx	lr
 8008312:	4908      	ldr	r1, [pc, #32]	; (8008334 <roundf+0x48>)
 8008314:	4111      	asrs	r1, r2
 8008316:	4208      	tst	r0, r1
 8008318:	d0fa      	beq.n	8008310 <roundf+0x24>
 800831a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800831e:	4113      	asrs	r3, r2
 8008320:	4403      	add	r3, r0
 8008322:	ea23 0301 	bic.w	r3, r3, r1
 8008326:	e7f1      	b.n	800830c <roundf+0x20>
 8008328:	2a80      	cmp	r2, #128	; 0x80
 800832a:	d1f1      	bne.n	8008310 <roundf+0x24>
 800832c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	007fffff 	.word	0x007fffff

08008338 <_init>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr

08008344 <_fini>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr
